<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小李同学 Coding</title>
  
  <subtitle>要努力变强鸭</subtitle>
  <link href="https://blog.xxfer.cn/rss.xml" rel="self"/>
  
  <link href="https://blog.xxfer.cn/"/>
  <updated>2024-11-08T08:00:00.000Z</updated>
  <id>https://blog.xxfer.cn/</id>
  
  <author>
    <name>xxfer</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>拒绝花里胡哨，返璞归真😶</title>
    <link href="https://blog.xxfer.cn/posts/5a9ae0a2.html"/>
    <id>https://blog.xxfer.cn/posts/5a9ae0a2.html</id>
    <published>2024-11-08T08:00:00.000Z</published>
    <updated>2024-11-08T08:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近使用服务器比较多，所以需要频繁使用ssh进行连接。随之而来的问题就是终端的选择，这里想分享一下自己的看法。</p></blockquote><p>之前不是没有用过用于远程连接的工具，但只是尝试性学习，而不是像现在日常工作，所以不得不选择一个适合自己的工具。<br>下面就说说我的选择过程，首先需要说明的是，主系统我使用的是Windows。</p><h2 id="我的需求"><a href="#我的需求" class="headerlink" title="我的需求"></a>我的需求</h2><ol><li>支持ssh连接</li><li>UI好看（别骂了😖）</li><li>支持sftp传输（最好有可视化界面）</li></ol><h2 id="常见的工具（附下载链接）"><a href="#常见的工具（附下载链接）" class="headerlink" title="常见的工具（附下载链接）"></a>常见的工具（附下载链接）</h2><ol><li>MobaXterm</li></ol><p><a href="https://mobaxterm.mobatek.net/">传送门</a></p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/11/07/672cd3b0f1229.webp" style="width:680px;"/></div></div><p>这是我用过的第一个ssh连接工具，网上的评价也很不错，是一位学长推荐给我的，它不仅满足了我的基本要求，而且还有很多额外的功能（这里不做扩展，感兴趣的请自行了解）。</p><p>但美中不足的是，它的UI样式没有长在我的审美上，这也是后面要介绍的几个工具的不足之处…也有些大佬DIY的案例：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/11/07/672cd2eba9582.gif" style="width:680px;"/></div></div><ol start="2"><li>Xshell</li></ol><p><a href="https://www.xshell.com/zh/xshell/">传送门</a><br>Xshell实际上和MobaXterm差不多，我不做过多介绍，让我选择，我还是会选择MobaXterm。</p><ol start="3"><li>Tabby</li></ol><p><a href="https://tabby.sh/">传送门</a></p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/11/07/672cd4346ccf3.webp" alt="原生Tabby" style="width:680px;"/></div></div><p>DIY案例：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/11/07/672cd7d38ea0e.webp" alt="Tabby DIY" style="width:680px;"/></div></div><ol start="4"><li>Electerm</li></ol><p><a href="https://electerm.github.io/electerm/">传送门</a><br>直接上官网吧，有个demo，懒得找图了。</p><ol start="5"><li>Other</li></ol><p>上面几个是我用过的，另外还有不少类似的工具，<a href="https://www.putty.org/?hl=zh-cn">Putty</a>、<a href="https://termius.com/">terminus</a>…<br>大家根据自己的需要，比较一下做选择就行。</p><h2 id="最终选择"><a href="#最终选择" class="headerlink" title="最终选择"></a>最终选择</h2><p>使用下来的情况，总体给我的感觉：有点多余，纯属多此一举。不如Windows Terminal + VScode香。</p><p><strong>主要理由如下：</strong></p><ul><li>足够轻量，启动挺快的。</li><li>如果只是操作文件或是服务的启用终止等，Windows Terminal + linux tmux就够用。</li><li>如果需要编辑文件，VScode当然是个不错的选择，不需要磨合，DIY也方便，就非常的nice。</li><li>不需要使用vim、nano等编辑器，使用VScode操作也比较简单（vim很好，只是我用的不如VScode顺，vim大佬请自便）。</li><li>至于sftp传输文件，VScode中直接拖拽，也可以用scp等命令上传，速度就得看服务器上行了。</li><li>Windows Terminal标签页搭配快捷键，服务器之间的切换也很方便。<!-- <div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/11/07/672ccf8be1b88.webp" alt="Windows Terminal" style="width:680px;"/></div></div> --></li></ul><p>最后，如果有好用的方案，欢迎评论区推荐~~~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;最近使用服务器比较多，所以需要频繁使用ssh进行连接。随之而来的问题就是终端的选择，这里想分享一下自己的看法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;之前不是没有用过用于远程连接的工具，但只是尝试性学习，而不是像现在日常工作，所以不得不选择一个</summary>
      
    
    
    
    <category term="技术分享" scheme="https://blog.xxfer.cn/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="DIY" scheme="https://blog.xxfer.cn/tags/DIY/"/>
    
    <category term="自主开发" scheme="https://blog.xxfer.cn/tags/%E8%87%AA%E4%B8%BB%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>【持续更新...】Docker封禁：国内可用docker镜像源</title>
    <link href="https://blog.xxfer.cn/posts/308a1d42.html"/>
    <id>https://blog.xxfer.cn/posts/308a1d42.html</id>
    <published>2024-11-03T18:00:00.000Z</published>
    <updated>2024-11-11T08:50:36.288Z</updated>
    
    <content type="html"><![CDATA[<p>就在六月初，因为政策问题，导致国内的 Docker Hub 镜像加速器相继停止服务。导致开发、测试和部署工作严重受阻，许多高校的镜像缓存服务也相继停止。</p><p>其实最近一季度我都没怎么使用docker，或者说我没有在云上拉取过images（本地拉取都是挂着梯子，基本不会受阻），所以就没有什么问题。但是前些天看到一个项目，想在云服务器上试着部署一下，结果镜像拉取失败了。<br>这大概就是使用国内服务器的一些不足之处吧，国内云服务器带宽给的也很吝啬。。。如果有条件的同学，想玩玩docker的，建议大家还是用非大陆的服务器吧。</p><p>没办法，只能上网查找目前可用的镜像站点，在这里做一个分享，并定期在这里做一个更新。</p><p>以下几个镜像源还是能够使用（目前是2024.11.03）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;registry-mirrors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;https://docker.m.daocloud.io&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;https://dockerhub.icu&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;https://docker.anyhub.us.kg&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;https://docker.1panel.live&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>顺便增加一段自定义内网 IPv6 地址，开启容器的 IPv6 功能，以及限制日志文件大小，防止 Docker 日志塞满硬盘（泪的教训）。</p><p>总的json配置如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;log-driver&quot;</span><span class="punctuation">:</span> <span class="string">&quot;json-file&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;log-opts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;max-size&quot;</span><span class="punctuation">:</span> <span class="string">&quot;20m&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;max-file&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ipv6&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;fixed-cidr-v6&quot;</span><span class="punctuation">:</span> <span class="string">&quot;fd00:dead:beef:c0::/80&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;experimental&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ip6tables&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;registry-mirrors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;https://docker.m.daocloud.io&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;https://dockerhub.icu&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;https://docker.anyhub.us.kg&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;https://docker.1panel.live&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>可以直接使用命令进行输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> &gt; /etc/docker/daemon.json &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    &quot;log-driver&quot;: &quot;json-file&quot;,</span></span><br><span class="line"><span class="string">    &quot;log-opts&quot;: &#123;</span></span><br><span class="line"><span class="string">        &quot;max-size&quot;: &quot;20m&quot;,</span></span><br><span class="line"><span class="string">        &quot;max-file&quot;: &quot;3&quot;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    &quot;ipv6&quot;: true,</span></span><br><span class="line"><span class="string">    &quot;fixed-cidr-v6&quot;: &quot;fd00:dead:beef:c0::/80&quot;,</span></span><br><span class="line"><span class="string">    &quot;experimental&quot;:true,</span></span><br><span class="line"><span class="string">    &quot;ip6tables&quot;:true,</span></span><br><span class="line"><span class="string">    &quot;registry-mirrors&quot;: [</span></span><br><span class="line"><span class="string">      &quot;https://docker.m.daocloud.io&quot;,</span></span><br><span class="line"><span class="string">      &quot;https://dockerhub.icu&quot;,</span></span><br><span class="line"><span class="string">      &quot;https://docker.anyhub.us.kg&quot;,</span></span><br><span class="line"><span class="string">      &quot;https://docker.1panel.live&quot;</span></span><br><span class="line"><span class="string">    ]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><p>配置完成，重启一下daemon和docker：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload<span class="comment">#重启daemon进程</span></span><br><span class="line">sudo systemctl restart docker<span class="comment">#重启docker</span></span><br></pre></td></tr></table></figure><p>这里提一嘴，阿里云的镜像源尽量不要使用了，好像2022年就不再更新了，镜像确实不够新，尤其是不热门的项目更甚。</p><p>找镜像站应该是第一反应，但是目前已知且测试的情况来看，有很多问题。比如，幸存的镜像一般都会有限流限制速和白名单的存在，导致其镜像不全（尤其是个人用户创建的公开镜像）且下载速度比较慢。还有就是安全问题了，很难保证所使用的镜像服务是安全可信的。</p><p>其中，atomhub 所属于开放原子开源基金会，是国内多个大公司成立的非营利机构，标榜的就是 镜像来源安全可信，但目前只有 336 个镜像可以下载和使用。然后，1panel 所属于飞致云，商业容器相关的公司，该站点主要是给 1Panel 产品使用的，目前只有 143 个镜像可以下载和使用。最后，daocloud 所属于道客，也是一家商业容器相关的公司，收录的镜像目前有 596 个，且可要随时提 PR，增加更多的镜像地址。<br>可以发现上面的镜像站就是这几个。</p><p>最后的最后，就是如果你有能力、精力，也可以自建镜像站点，我嫌麻烦。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;就在六月初，因为政策问题，导致国内的 Docker Hub 镜像加速器相继停止服务。导致开发、测试和部署工作严重受阻，许多高校的镜像缓存服务也相继停止。&lt;/p&gt;
&lt;p&gt;其实最近一季度我都没怎么使用docker，或者说我没有在云上拉取过images（本地拉取都是挂着梯子，基本</summary>
      
    
    
    
    <category term="技术分享" scheme="https://blog.xxfer.cn/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="Docker" scheme="https://blog.xxfer.cn/tags/Docker/"/>
    
    <category term="自主开发" scheme="https://blog.xxfer.cn/tags/%E8%87%AA%E4%B8%BB%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>我们00后应该还是有人看Pokémon的吧</title>
    <link href="https://blog.xxfer.cn/posts/1815c0b3.html"/>
    <id>https://blog.xxfer.cn/posts/1815c0b3.html</id>
    <published>2024-10-19T12:00:00.000Z</published>
    <updated>2024-10-19T14:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>又过了一个月，闲来无事，到博客灌灌水。。。最近工位摸鱼的时候，在GitHub上看到一个挺有意思的项目。<br>这个项目是用于在终端显示Pokémon Sprite的，就像下面这样：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="/img/mewtwo.png" alt="知道上面这只的应该都不小了吧，哈哈" style="width:240px;"/></div></div><p>其实这个项目也挺好实现的，就是一个命令行工具，输出的内容都在安装时存放在本地了。输出内容是神奇宝贝图片通过python脚本转换成的ANSI转义码。<br>说白了，就是实现一个命令行工具和脚本工具。GitHub上有很多类似的项目，可以看出，那时候，宝可梦确实很受欢迎。当时我就来兴致了，主要是挺怀念小时候刷xy的暑假。<br>当时写完了这个东西，我还晒了个pyq，结果发现00后看这个的也不多😅<br>你们看过Pokémon吗？今年多大了？欢迎评论区留言，哈哈。<br>转了一圈发现有用Rust、shell实现的，好像没有用C的，所以就有了下面这个项目：</p><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://github.com/JJLibra/Pokemonc">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://www.freeimg.cn/i/2023/12/23/6586e75c86de7.png)">          <i class="anzhiyufont anzhiyu-icon-link" style="display: none"></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">PokemonC</div>            <div class="tag-link-sitename">JJLibra</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><p>暂时只支持Linux的部分发行版，生成资源的脚本也一并放在下面：</p><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://github.com/JJLibra/PokemonC_generator">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://www.freeimg.cn/i/2023/12/23/6586e75c86de7.png)">          <i class="anzhiyufont anzhiyu-icon-link" style="display: none"></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">PokemonC</div>            <div class="tag-link-sitename">JJLibra</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><p>图片等资源来自<a href="https://github.com/PokeAPI/pokeapi">PokéAPI</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;又过了一个月，闲来无事，到博客灌灌水。。。最近工位摸鱼的时候，在GitHub上看到一个挺有意思的项目。&lt;br&gt;这个项目是用于在终端显示Pokémon Sprite的，就像下面这样：&lt;/p&gt;
&lt;div class=&quot;img-wrap&quot;&gt;&lt;div class=&quot;img-bg&quot;&gt;</summary>
      
    
    
    
    <category term="日常生活" scheme="https://blog.xxfer.cn/categories/%E6%97%A5%E5%B8%B8%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="Pokémon" scheme="https://blog.xxfer.cn/tags/Pokemon/"/>
    
  </entry>
  
  <entry>
    <title>通知：说好的回归！</title>
    <link href="https://blog.xxfer.cn/posts/2e230587.html"/>
    <id>https://blog.xxfer.cn/posts/2e230587.html</id>
    <published>2024-09-11T00:00:00.000Z</published>
    <updated>2024-09-11T00:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>一些琐事解决得差不多了，接下来一年可以专心做自己喜欢的事情。</p><p>博客还是和之前一样，像是日记一样，随便写点。</p><p>感谢兄弟们的不离不弃！！！</p><p>下面的一年主要想发展发展除专业技能以外的能力：控场、增重、感情……毕竟在职场中专业能力固然重要，但其他的技能也是大大的加分项，这是我这几个月下来最大的感悟。</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/05/13/6641b82fef77b.jpg" alt="呀比 囧囧囧" style="width:400px;"/></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一些琐事解决得差不多了，接下来一年可以专心做自己喜欢的事情。&lt;/p&gt;
&lt;p&gt;博客还是和之前一样，像是日记一样，随便写点。&lt;/p&gt;
&lt;p&gt;感谢兄弟们的不离不弃！！！&lt;/p&gt;
&lt;p&gt;下面的一年主要想发展发展除专业技能以外的能力：控场、增重、感情……毕竟在职场中专业能力固然重要，</summary>
      
    
    
    
    <category term="日常生活" scheme="https://blog.xxfer.cn/categories/%E6%97%A5%E5%B8%B8%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>暂时停更通知，会回来的！</title>
    <link href="https://blog.xxfer.cn/posts/c36b97b1.html"/>
    <id>https://blog.xxfer.cn/posts/c36b97b1.html</id>
    <published>2024-05-13T12:00:00.000Z</published>
    <updated>2024-05-13T22:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>已经好长时间没有更新了，主要是确实有点忙。也不想随便写文章敷衍，所以一直没有更新。</p><p>不过不代表没有关注，没在打理博客，当然更不会放弃博客。说实话，搭建博客半年多来，收获很大，所以我不会轻易放弃的。</p><p>我也知道有不少朋友一直都在关注，来关照本站，很感谢大家。</p><p>这样的状态可能还需要持续两三个月时间，所以决定通知大家暂时停更文章，不过评论区、友链等互动不会断~</p><p>但今年国庆之前一定回归，到时也会把这么多天的所见所闻进行总结，分享给大家。</p><p>再次感谢大家，希望归来时能带来好消息…</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/05/13/6641b82fef77b.jpg" alt="呀比 囧囧囧" style="width:400px;"/></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;已经好长时间没有更新了，主要是确实有点忙。也不想随便写文章敷衍，所以一直没有更新。&lt;/p&gt;
&lt;p&gt;不过不代表没有关注，没在打理博客，当然更不会放弃博客。说实话，搭建博客半年多来，收获很大，所以我不会轻易放弃的。&lt;/p&gt;
&lt;p&gt;我也知道有不少朋友一直都在关注，来关照本站，很感</summary>
      
    
    
    
    <category term="日常生活" scheme="https://blog.xxfer.cn/categories/%E6%97%A5%E5%B8%B8%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>浮生若梦，为欢几何？</title>
    <link href="https://blog.xxfer.cn/posts/98264b23.html"/>
    <id>https://blog.xxfer.cn/posts/98264b23.html</id>
    <published>2024-04-15T02:00:00.000Z</published>
    <updated>2024-04-15T22:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="浮生若梦，为欢几何？"><a href="#浮生若梦，为欢几何？" class="headerlink" title="浮生若梦，为欢几何？"></a>浮生若梦，为欢几何？</h2><p>这是唐代诗人李白的诗句，出自《春夜宴从弟桃花园序》。<br>这句诗表达了李白对人生的感慨，认为人生就像一场梦，短暂而虚幻，能够欢乐的时间更是少之又少。因此，李白赞同古人秉烛夜游的做法，认为应该及时行乐，珍惜年华，不辜负美好的时光。</p><p>忙里偷闲，苦中作乐吧😇</p><h2 id="VScode插件：Freeimg-uploader"><a href="#VScode插件：Freeimg-uploader" class="headerlink" title="VScode插件：Freeimg-uploader"></a>VScode插件：Freeimg-uploader</h2><p>我是在VScode里写博客的，每次要插入图片就需要先去图床仪表盘手动上传图片，然后把URL复制到md文件中，非常麻烦，效率也很低。</p><p>虽然我用的图床<a href="https://www.freeimg.cn/">Freeimg</a>是兰空项目，但是兰空官方的插件好像用不了。实在没办法，我就写了这个对接图床的插件，这样就不需要在仪表盘和VScode之间反复横跳了，只需要在md文件中右键选择图片，就能上传图片到图床并自动插入URL。</p><p>如果有同样使用Freeimg图床的同学，欢迎一起使用这个插件：<a href="https://marketplace.visualstudio.com/items?itemName=JJLibra.Freeimg-uploader">Freeimg-uploader</a></p><p>我已经发布在VScode扩展商店了，只需要在扩展商店搜插件名称就行。代码开源在<a href="https://github.com/JJLibra/vscode-FreeimgUploader">vscode-Freeimg-uploader</a></p><h2 id="GitHub-Contributions"><a href="#GitHub-Contributions" class="headerlink" title="GitHub Contributions"></a>GitHub Contributions</h2><p>好久之前就发现明明commit了代码，但是在Profile里面看不到提交记录，但一直没去查为什么，懒癌是这样的…</p><p>我的问题：本地Git配置的邮箱与GitHub没有关联。</p><p>解决方法：<br>使用以下命令即可解决</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email <span class="string">&quot;youremail@example.com&quot;</span> <span class="comment"># 配置全局邮箱，我的建议</span></span><br><span class="line">git config user.email <span class="string">&quot;youremail@example.com&quot;</span> <span class="comment"># 只配置本仓库邮箱</span></span><br></pre></td></tr></table></figure><h2 id="你想活出怎样的人生？"><a href="#你想活出怎样的人生？" class="headerlink" title="你想活出怎样的人生？"></a>你想活出怎样的人生？</h2><!-- <div style="display: flex; justify-content: space-around; align-items: center;">  <img src="https://pan.freeimg.link/f/6xtq/1.png" style="width: 30%;height: 400px;">  <img src="https://pan.freeimg.link/f/wXT9/2.png" style="width: 30%;height: 400px;">  <img src="https://pan.freeimg.link/f/GLSp/3.png" style="width: 30%;height: 400px;"></div> --><div style="display: flex; justify-content: space-around; align-items: center;">  <img src="https://www.freeimg.cn/i/2024/04/18/661ff2fa58704.png" style="width: 30%;height: 400px;">  <img src="https://www.freeimg.cn/i/2024/04/18/661ff3059bcc4.png" style="width: 30%;height: 400px;">  <img src="https://www.freeimg.cn/i/2024/04/18/661ff32277d2b.png" style="width: 30%;height: 400px;"></div>这是宫崎骏的又一“封笔之作”。也许这回是真的要走了...这部电影也许是他留给新时代的我们最后的礼物了。《千与千寻》是我接触宫崎骏的第一部作品，也是我最喜欢的一部。每次想到宫崎骏，脑海里就会响起下面的旋律：<div class="audio"><audio controls preload><source src='https://d.kstore.space/download/7746/再度.mp4' type='audio/mp3'>Your browser does not support the audio tag.</audio></div>被誉为“千寻华尔兹”。第一次知道宫崎骏的时候还是小学两年级吧，就是因为《千与千寻》。尽管宫崎骏大部分作品上映时间早于我的童年，他的作品还是我童年的一部分。在观看《你想活出怎样的人生》之前，就有好些同学说看不太懂，和前几部作品的风格大不相同...可是，它又是继《千与千寻》后第二部拿下奥斯卡最佳动画长片的电影。我想这并非偶然。所以我在看这部电影的时候，就一直在想这里他想要说什么？观影到一半时，我还是不太明白它到底在放些什么，想要表达什么。看完以后，还是有好多内容不太理解，有好多疑问。当然，过后我也看了好多篇关于《你想活出怎样的人生》的影评，下面是我的一些理解：<ul><li><p>你想要活出怎样的人生？<br>这不是答案，而是一种反问。<br>看完整部电影你可能也会思考想要活出怎样的人生这个抽象的概念，他没有告诉你到底是怎样的人生，他传达出的是一种向着美追求美而无后悔的人生。</p></li><li><p>苍鹭、鹈鹕、鹦鹉</p><div style="display: flex; justify-content: space-around; align-items: center;"><img src="https://www.freeimg.cn/i/2024/04/18/661ff3b4d86be.webp" style="width: 30%; height: 180px;"><img src="https://www.freeimg.cn/i/2024/04/18/661ff3d1ded46.jpg" style="width: 30%; height: 180px;"><img src="https://www.freeimg.cn/i/2024/04/18/661ff3e6f2787.jpg" style="width: 30%; height: 180px;"></div>苍鹭的存在象征着指引和启示，帮助牧真人解开内心的困惑。所以他像是一个引路人。鹈鹕生活在一片没有鱼的海域，它们不得不吃掉“哇啦哇啦”，这个应该是说战争年代，普通人为了生存，被迫做一些恶事。鹦鹉应该是最好理解的，它们代表法西斯。但回到现实世界又变回了人畜无害的小鸟。</li><li><p>真人的父亲：日本军官形象<br>在现实中，宫崎骏的父亲在二战期间经营着一家生产战斗机零部件的小工厂，生意十分兴旺，这让宫崎骏度过了一个相对富裕的童年。宫崎胜次在家族飞机制造厂中担任要职，负责生产战备所需配件，以及零式战斗机。<br>宫崎骏小时候原本住在东京文京区，后来为了躲避二战战祸，全家由东京搬迁到东北部的栃木县乡下。因战事疏散，举家迁往宇都官市和鹿沼市。伯父在鹿沼市经营了一家名为“官崎飞机”的军火公司，主要制造著名的尾式战斗机尾舵和驾驶舱防风罩等军需附属产品，战争期间曾有1000名员工在此工作。官崎狻的父亲在那间工厂担任主管，因此家庭生活条件非常好。</p></li><li><p>7个特别滑稽的婆婆</p><div style="display: flex; justify-content: space-around; align-items: center;"><img src="https://www.freeimg.cn/i/2024/04/18/661ff401bfaec.webp" style="width: 30%; height: 180px;"><img src="https://www.freeimg.cn/i/2024/04/18/661ff4122ac1f.png" style="width: 30%; height: 180px;"><img src="https://www.freeimg.cn/i/2024/04/18/661ff425a9a4e.png" style="width: 30%; height: 180px;"></div>其中雾子也去了异世界，负责保护真人吧。其他六位婆婆只是以木偶出现在了异世界，我觉得应该是在现实世界中，那几个婆婆对真人的牵挂化作了这几个木偶，前去异世界保护真人。因为雾子把自己的木偶送给了真人，被称作“护身符”。</li></ul><p>类似具有隐喻意义的点数不胜数，需要我们思考理解，包括一些台词也非常耐人寻味，所以建议反复观看。</p><ul><li>另外，吉卜力的画风总是那么治愈，影片中的哇啦哇啦：<div style="display: flex; justify-content: space-around; align-items: center;"><img src="https://www.freeimg.cn/i/2024/04/18/661ff43f60cf5.png" style="width: 30%; height: 180px;"><img src="https://www.freeimg.cn/i/2024/04/18/661ff45316467.png" style="width: 30%; height: 180px;"><img src="https://www.freeimg.cn/i/2024/04/18/661ff46928165.png" style="width: 30%; height: 180px;"></div>其实我认为这部影片还是非常符合宫崎骏的创作风格的，又是一场主人公的冒险之旅。最后的片段，久子的一句话：“有你是我一生最幸福的事，别忘了我不怕火。”真人在那一刻也释怀，母亲用行动告诉自己，如何活出自己想要的人生。</li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/04/18/661ff484ed76e.webp" alt="宫崎骏留给我们的童年"/></div></div><p>关于我自己想要活出怎样的人生，很难讲，不知道从何说起。如果你们被问到想要怎样的人生，会怎么回答……</p><ul><li>优秀影评：<div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://zhuanlan.zhihu.com/p/690489129">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="">          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">影评</div>            <div class="tag-link-sitename">分派电影</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;浮生若梦，为欢几何？&quot;&gt;&lt;a href=&quot;#浮生若梦，为欢几何？&quot; class=&quot;headerlink&quot; title=&quot;浮生若梦，为欢几何？&quot;&gt;&lt;/a&gt;浮生若梦，为欢几何？&lt;/h2&gt;&lt;p&gt;这是唐代诗人李白的诗句，出自《春夜宴从弟桃花园序》。&lt;br&gt;这句诗表达了李白</summary>
      
    
    
    
    <category term="大学生涯" scheme="https://blog.xxfer.cn/categories/%E5%A4%A7%E5%AD%A6%E7%94%9F%E6%B6%AF/"/>
    
    
    <category term="GitHub" scheme="https://blog.xxfer.cn/tags/GitHub/"/>
    
    <category term="日常总结" scheme="https://blog.xxfer.cn/tags/%E6%97%A5%E5%B8%B8%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Kerberos身份认证小结</title>
    <link href="https://blog.xxfer.cn/posts/f3cb979.html"/>
    <id>https://blog.xxfer.cn/posts/f3cb979.html</id>
    <published>2024-04-02T00:00:00.000Z</published>
    <updated>2024-04-02T12:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="名字起源"><a href="#名字起源" class="headerlink" title="名字起源"></a>名字起源</h2><p>Kerberos 一词来源于古希腊神话中的 Cerberus —— 守护地狱之门的三头犬，本篇博客的封面上的那个三头恶犬。在古希腊神话故事中，Kerberos是一只具有三颗头颅的地狱恶犬，他守护在地狱之外，能够识别所有经此路过的亡灵，防止活着的入侵者闯入地狱。</p><h2 id="解决的问题"><a href="#解决的问题" class="headerlink" title="解决的问题"></a>解决的问题</h2><p>简单来说，这个协议或机制解决的就是“如何证明我就是我”这个问题，即身份认证。</p><p>大家应该知道一种有中心的身份认证机制，也就是CA。一种依赖于CA的身份认证，CA认证中心是有中心的，它是采用<strong>PKI（Public Key Infrastructure）</strong>公开密钥基础架构技术，专门提供网络身份认证服务。即将讲到的Kerberos也是一种有中心的身份认证机制，<strong>KDC（Key Distribution Center）</strong>即为认证中心。</p><div class="note blue anzhiyufont anzhiyu-icon-dengpao simple"><p>CA认证：</p><ul><li>中心化：CA是一个中心化的实体，负责颁发和管理数字证书。</li><li>用途：主要用于公钥基础设施（PKI）中，用于验证和签名证书，以确保通信的安全性。</li><li>证书：CA颁发数字证书，包含公钥和相关信息，用于身份验证和加密通信。</li></ul><p>KDC认证：</p><ul><li>中心化：KDC是Kerberos协议的一部分，也是一个中心化的实体，用于分发密钥。</li><li>用途：主要用于Kerberos身份验证，确保用户和服务之间的安全通信。</li><li>密钥分发：KDC负责生成会话密钥，以便双方进行加密通信。</li></ul><p>总之，CA认证主要用于数字证书的管理，而KDC认证用于Kerberos协议中的身份验证和密钥分发。</p></div><h2 id="Kerberos协议的组成角色"><a href="#Kerberos协议的组成角色" class="headerlink" title="Kerberos协议的组成角色"></a>Kerberos协议的组成角色</h2><p>Kerberos在古希腊神话中有三个头，而今天提到的Kerberos协议也有三个缺一不可的角色：</p><ul><li>客户端（client）：发送请求的一方</li><li>服务端（Server）：接收请求的一方</li><li>密钥分发中心（Key Distribution Center，KDC），而密钥分发中心一般又分为两部分，分别是：<ul><li>AS（Authentication Server）：认证服务器，专门用来认证客户端的身份并发放客户用于访问TGS的TGT（票据授予票据）</li><li>TGS（Ticket Granting Ticket）：票据授予服务器，用来发放整个认证过程以及客户端访问服务端时所需的服务授予票据</li></ul></li></ul><h2 id="Kerberos如何解决“如何证明我就是我”问题"><a href="#Kerberos如何解决“如何证明我就是我”问题" class="headerlink" title="Kerberos如何解决“如何证明我就是我”问题"></a>Kerberos如何解决“如何证明我就是我”问题</h2><p>Kerberos协议当中总共有三个不同的角色，客户端和服务端就不用多说了，一个是请求的发起者，一个是请求的接收者，那么KDC是做什么的呢？</p><p>在Kerberos协议中，通信的双方在通信之前必须相互证明自己的身份是可靠并且具有访问权限的（后面会说为什么是要具有访问权限的），那么双方都要如何证明自己呢？口说无凭，客户端的请求中需要携带自己的身份信息。可如果信息直接给服务端，服务端是没有理由直接信任这段信息就是真实的信息的，同理，服务端返回自己的身份信息给客户端，客户端也同样是无法辨别该服务器是否是自己想要访问的服务器。</p><p><strong>例子说明：</strong><br>A现在想要去访问B完成一个任务。但是AB两人之间是从来没有见过面的，他们只知道对方的名字叫A，B。此时如果A直接去找B告诉B我就是A，那么B是有理由不相信A的，因为即使A是一个冒充的他也分辨不了。同理，B也无法得到A的认可。因此就陷入了一个无法“证明我就是我”的困境。<br>于是AB就想了一个办法：AB找到了一个他俩共同信任的人C，且这个C既认识A又认识B。现在只要C告诉B，这个A确实就是真正的A，那么B就会信任这个A。同理，B经过C的认可后，A也会相信B的身份。此后，A在访问B之前会先去找C，C会交给A一个凭证，代表此时的A已经得到了C的认证，这时A拿着凭证再去找B，便可以得到B的信任了。</p><p>在上面的例子中，A，B分别是客户端和服务端，C担任的角色便是KDC，全称Key Distribution Center，中文名叫做密钥分发中心。KDC中包含一个叫做TGS（票据授予中心）的组件，可以理解为他就是一个发放身份认证票据的服务中心，在KDC中的组件AS（Authentication Server）认证了客户端的身份后，会给客户端发放用于访问网络服务的服务授予票据（Ticket）。由于整个Kerberos通信过程都采用<strong>对称加密</strong>的方式，密钥的获取也是从KDC中得到，所以KDC叫做密钥分发中心。</p><p><strong>整个Kerberos认证流程可以简化描述如下：</strong></p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/04/02/660b71debbb8e.png"/></div></div><p>客户端在访问每个想要访问的网络服务时，需要携带一个专门用于访问该服务并且能够证明自己身份的票据。服务端只有收到了该票据才能认定客户端身份正确，向客户端提供服务。</p><p>整个认证流程简化为两大步：</p><ol><li>客户端向KDC请求获取想要访问的目标服务的服务授予票据（Ticket）；</li><li>客户端拿着从KDC获取的服务授予票据（Ticket）访问相应的网络服务；</li></ol><h2 id="Kerberos认证过程分析"><a href="#Kerberos认证过程分析" class="headerlink" title="Kerberos认证过程分析"></a>Kerberos认证过程分析</h2><p>上文已经提到Kerberos认证流程简化后分为两大步：</p><ol><li>客户端向KDC请求获得他想要访问的服务的服务授予票据</li><li>拿着这张服务授予票据（Ticket）去访问服务端的服务</li></ol><p>大致的过程确实可以看作这两步，但其中还存在一些问题：</p><ol><li><strong>KDC怎么知道客户端就是真正的客户端？凭什么要给这个客户端发放服务授予票据（Ticket）呢？</strong></li><li><strong>服务端怎么知道客户端带来的服务授予票据（Ticket）就是一张真正的票据呢？</strong></li></ol><p>因此，笼统地把Kerberos理解为简单的两步还不够，下面对认证过程做细化分析。</p><p>整个认证流程可以简化为两大步，但其实在第一步中一共做了两件事，这两件事就是解决问题1的关键。而第二步是解决问题2的关键，最终结束认证过程建立通信。<strong>所以整个Kerberos认证流程可以细化为三个阶段，也可以理解为三次通信!</strong></p><p>在具体描述整个认证流程之前，还需要知道几个Kerberos认证的前提条件：</p><ol><li>Kerberos协议是一个“限权”的认证协议，Kerberos中会自带一个数据库，这个数据库会由创建Kerberos的运维人员提前在库中添加好整个系统中拥有使用Kerberos认证权限的用户和网络服务。在后续的认证中也是根据数据库中是否存在该用户和服务来判断该对象是否能够通过认证服务的 <em>拿上面的例子来说就是先让C在AB相识之前已经同时认识A和B，以便后面帮助AB互相认证</em></li><li>所有使用Kerberos协议的用户和网络服务，在被添加进Kerberos系统中时，都会根据自己当前的密码（一种用户密码，人为对网络服务随机生成的密码）生成一把密钥存储在Kerberos数据库中，且Kerberos数据库也会同时保存用户的基本信息（例如用户名，用户IP地址等）和网络服务的基本信息（IP，Server Name）</li><li>Kerberos中存在的三个角色，只要是发生了两两之间的通信，都需要先进行身份的认证</li></ol><h3 id="第一次通信"><a href="#第一次通信" class="headerlink" title="第一次通信"></a>第一次通信</h3><p>为了获得能够用来访问服务端服务的票据，客户端首先需要来到KDC获得服务授予票据（Ticket）。由于客户端是第一次访问KDC，此时KDC也不确定该客户端的身份，所以第一次通信的目的为<strong>KDC认证客户端身份，确认客户端是一个可靠且拥有访问KDC权限的客户端</strong>，过程如下：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/04/02/660b73f7b0711.png"/></div></div><ol><li>客户端用户向KDC以明文的方式发起请求。该次请求中携带了自己的用户名，主机IP，和当前时间戳；</li><li>KDC当中的AS（Authentication Server）接收请求（AS是KDC中专门用来认证客户端身份的认证服务器）后，会去Kerberos认证数据库中根据用户名查找是否存在该用户，此时只会查找是否有相同用户名的用户，并不会判断身份的可靠性；</li><li>如果AS发现数据库中没有该用户名，则认证失败，服务结束；如果存在该用户名，那么AS认证中心认为用户存在，此时便会返回响应给客户端，其中包含两部分内容：</li></ol><ul><li>票据授予票据TGT：客户端需要使用TGT去KDC中的TGS（票据授予中心）获取访问网络服务所需的Ticket（服务授予票据），TGT中包含的内容有Kerberos数据库中存在的该客户端的Name，IP，当前时间戳，客户端即将访问的TGS的Name，TGT的有效时间以及一把用于客户端和TGS间进行通信的Session_key(CT_SK)。整个TGT使用TGS密钥加密，客户端是解密不了的，由于密钥从没有在网络中传输过，所以也不存在密钥被劫持破解的情况。</li><li>第二部分内容是使用客户端密钥加密的一段内容，其中包括用于客户端和TGS间通信的Session_key(CT_SK)，客户端即将访问的TGS的Name以及TGT的有效时间，和一个当前时间戳。该部分内容使用客户端密钥加密，所以客户端在拿到该部分内容时可以通过自己的密钥解密。如果是一个假的客户端，那么他是不会拥有真正客户端的密钥的，因为该密钥也从没在网络中进行传输过。这也同时认证了客户端的身份，如果是假客户端会由于解密失败从而终端认证流程。</li></ul><p>至此，第一次通信完成。</p><h3 id="第二次通信"><a href="#第二次通信" class="headerlink" title="第二次通信"></a>第二次通信</h3><p>此时的客户端收到了来自KDC（其实是AS）的响应，并获取到了两部分内容。此时客户端会用自己的密钥将第二部分内容进行解密，分别获得时间戳，自己将要访问的TGS的信息，和用于与TGS通信时的密钥CT_SK。现在客户端首先会根据时间戳判断该时间戳与自己发送请求时的时间之间的差值是否大于5分钟，如果大于五分钟则认为该AS是伪造的，认证失败。如果时间戳合理，客户端便准备向TGS发起请求，即准备第二次通信，本次请求的主要目的是为了<strong>获取能够访问目标网络服务的服务授予票据Ticket</strong>。 在第二次通信请求中，客户端将携带三部分内容交给KDc中的TGS，第二次通信过程具体如下所述：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/04/02/660b73d40c302.png"/></div></div><p>客户端行为：</p><ol><li>客户端使用CT_SK加密将自己的客户端信息发送给KDC，其中包括客户端名，IP，时间戳；</li><li>客户端将自己想要访问的Server服务以明文的方式发送给KDC；</li><li>客户端将使用TGS密钥加密的TGT也原封不动的也携带给KDC；</li></ol><p>TGS行为：</p><ol><li>此时KDC中的TGS（票据授予服务器）收到了来自客户端的请求。他首先根据客户端明文传输过来的Server服务IP查看当前Kerberos系统中是否存在可以被用户访问的该服务。如果不存在，认证失败结束，。如果存在，继续接下来的认证。</li><li>TGS使用自己的密钥将TGT中的内容进行解密，此时他看到了经过AS认证过后并记录的用户信息，一把Session_KEY即CT_SK，还有时间戳信息，他会现根据时间戳判断此次通信是否真是可靠有无超出时延。</li><li>如果时延正常，则TGS会使用CK_SK对客户端的第一部分内容进行解密（使用CT_SK加密的客户端信息），取出其中的用户信息和TGT中的用户信息进行比对，如果全部相同则认为客户端身份正确，方可继续进行下一步。</li><li>此时KDC将返回响应给客户端，响应内容包括：</li></ol><ul><li>第一部分：用于客户端访问网络服务的使用Server密码加密的ST（Servre Ticket），其中包括客户端的Name，IP，需要访问的网络服务的地址Server IP，ST的有效时间，时间戳以及用于客户端和服务端之间通信的CS_SK（Session Key）。</li><li>第二部分：使用CT_SK加密的内容，其中包括CS_SK和时间戳，还有ST的有效时间。由于在第一次通信的过程中，AS已将CT_SK通过客户端密码加密交给了客户端，且客户端解密并缓存了CT_SK，所以该部分内容在客户端接收到时是可以自己解密的。</li></ul><p>至此，第二次通信完成。</p><h3 id="第三次通信"><a href="#第三次通信" class="headerlink" title="第三次通信"></a>第三次通信</h3><p>此时的客户端收到了来自KDC（TGS）的响应，并使用缓存在本地的CT_SK解密了第二部分内容（第一部分内容中的ST是由Server密码加密的，客户端无法解密），检查时间戳无误后取出其中的CS_SK准备向服务端发起最后的请求。</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/04/02/660b742c14e3e.png"/></div></div><p>客户端：</p><ol><li>客户端使用CK_SK将自己的主机信息和时间戳进行加密作为交给服务端的第一部分内容，然后将ST（服务授予票据）作为第二部分内容都发送给服务端。</li></ol><p>服务端：</p><ol><li>服务器此时收到了来自客户端的请求，他会使用自己的密钥，即Server密钥将客户端第二部分内容进行解密，核对时间戳之后将其中的CS_SK取出，使用CS_SK将客户端发来的第一部分内容进行解密，从而获得经过TGS认证过后的客户端信息，此时他将这部分信息和客户端第二部分内容带来的自己的信息进行比对，最终确认该客户端就是经过了KDC认证的具有真实身份的客户端，是他可以提供服务的客户端。此时服务端返回一段使用CT_SK加密的表示接收请求的响应给客户端，在客户端收到请求之后，使用缓存在本地的CS_ST解密之后也确定了服务端的身份（其实服务端在通信的过程中还会使用数字证书证明自己身份）。</li></ol><p>至此，第三次通信完成。</p><p>此时也代表着整个Kerberos认证的完成，通信的双方都确认了对方的身份，此时便可以放心的进行整个网络通信了。</p><p>时序图</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/04/02/660b744f45f80.png"/></div></div><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>整个Kerberos认证的过程较为复杂，三次通信中都使用了密钥，且密钥的种类一直在变化，并且为了防止网络拦截密钥，这些密钥都是临时生成的Session Key，即只在一次Session会话中起作用，即使密钥被劫持，等到密钥被破解可能这次会话都早已结束。<br>这为整个Kerberos认证过程保证了较高的安全性。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;名字起源&quot;&gt;&lt;a href=&quot;#名字起源&quot; class=&quot;headerlink&quot; title=&quot;名字起源&quot;&gt;&lt;/a&gt;名字起源&lt;/h2&gt;&lt;p&gt;Kerberos 一词来源于古希腊神话中的 Cerberus —— 守护地狱之门的三头犬，本篇博客的封面上的那个三头恶犬。在</summary>
      
    
    
    
    <category term="技术分享" scheme="https://blog.xxfer.cn/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="Web" scheme="https://blog.xxfer.cn/tags/Web/"/>
    
    <category term="网络安全" scheme="https://blog.xxfer.cn/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>最近</title>
    <link href="https://blog.xxfer.cn/posts/cbd4b5ab.html"/>
    <id>https://blog.xxfer.cn/posts/cbd4b5ab.html</id>
    <published>2024-03-21T00:00:00.000Z</published>
    <updated>2024-03-21T22:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前段时间相对空闲，所以更新比较频繁，这本就没什么质量的文章看上去更水了。后面要去忙一个项目，所以放缓博客的更新，顺便沉淀沉淀，尽可能提高博客文章的质量。</p></blockquote><h2 id="最近的一些事"><a href="#最近的一些事" class="headerlink" title="最近的一些事"></a>最近的一些事</h2><h3 id="关于-GitHub-学生认证"><a href="#关于-GitHub-学生认证" class="headerlink" title="关于 GitHub 学生认证"></a>关于 GitHub 学生认证</h3><p>最近有个学弟来问我是怎么通过GitHub学生认证的，我是一年前申请的，根据网上的教程挺顺利的，所以当时纳闷他会遇到什么问题。</p><p>看了以后发现现在的认证提交和之前的不太一样了。前面申请填写的一些东西大差不差，他主要卡在了<strong>提交证明材料</strong>的那个面板。我那时候有一个材料类型的选择框，选择other类以后，跟网上一样提交学信网的材料就行。但到他这里这个选择栏没了，使用学信网材料提交就显示：需要选择“other”类…</p><p>他说网上的方法试了个遍，都不行。那我觉得只能现场拍照提交了，于是用录取通知书，不行，提示检测到“录取通知书”的字样，总之不能用通知书。那就用学生证，离谱的是我们学校的学校名称和个人信息在正反面，拍不到一张照片里…最后拿我的学生证放在一起拍，提交成功了，哭笑不得。</p><p>总之，提交不成功按照它给的提示改进就行，个人感觉现在<strong>拍学生证</strong>的方式应该是最快的，照片里需要出现学校名称、个人信息以及时间节点，这样应该没什么问题了。</p><h3 id="star的项目从爆火到删库只在一夜之间"><a href="#star的项目从爆火到删库只在一夜之间" class="headerlink" title="star的项目从爆火到删库只在一夜之间"></a>star的项目从爆火到删库只在一夜之间</h3><p>yysy项目作者太难了，他写的是一个爬虫，前段时间我刚好在复习研究爬虫，然后我就star了。那时候才900+的star，没过几天就爆炸式增长了，上了GitHub的热度榜第一，作者也在b站表示受宠若惊，我也挺为作者高兴的，毕竟是自己写的项目受到了别人的认可。</p><p>结果，就在我fork了项目的第二天凌晨，仓库内容被删了，变成了现在<a href="https://github.com/NanmiCoder/MediaCrawler">这样</a>，b站的部分视频也没了。只能说爬虫这类项目确实会对这些平台造成负担吧，也能够理解作者的做法，开源精神值得学习。幸亏我fork了项目，真的巧。我只是想要学习一下，如果可以，技术允许的话，还想贡献一点代码的，谁知道fork后的几个小时库就没了，哎…</p><p>幸运的是不妨碍我继续学习💪</p><h3 id="另外就是感概自己所剩不多的学生时光"><a href="#另外就是感概自己所剩不多的学生时光" class="headerlink" title="另外就是感概自己所剩不多的学生时光"></a>另外就是感概自己所剩不多的学生时光</h3><p><strong>学生</strong>的身份，真的有很多的好处，不管在学习还是生活中。像很多平台进行学生认证以后会有不少不错的福利权限，社会对学生也同样会多一份包容。所以说做学生真的很幸福，但那终将成为难忘的回忆。至于研究生的读与不读，取决于大四能不能拿到“心仪”的工作offer，其实过得去就行，我还是觉得工作能带给我的会更多一些。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;前段时间相对空闲，所以更新比较频繁，这本就没什么质量的文章看上去更水了。后面要去忙一个项目，所以放缓博客的更新，顺便沉淀沉淀，尽可能提高博客文章的质量。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;最近的一些事&quot;&gt;&lt;a href=&quot;#最近的</summary>
      
    
    
    
    <category term="大学生涯" scheme="https://blog.xxfer.cn/categories/%E5%A4%A7%E5%AD%A6%E7%94%9F%E6%B6%AF/"/>
    
    
    <category term="GitHub" scheme="https://blog.xxfer.cn/tags/GitHub/"/>
    
    <category term="日常总结" scheme="https://blog.xxfer.cn/tags/%E6%97%A5%E5%B8%B8%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>How do you normalize your Git commit?</title>
    <link href="https://blog.xxfer.cn/posts/916babf0.html"/>
    <id>https://blog.xxfer.cn/posts/916babf0.html</id>
    <published>2024-03-20T11:00:00.000Z</published>
    <updated>2024-03-20T22:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>日常摸鱼，看到了有关规范<strong>git commit message</strong>的文章。还有在平时看到有不少hub里面的提交信息都特别整齐，感觉规范commit提交信息确实很有必要，也很实用美观。然后顺便水一篇博客。</p></blockquote><h2 id="意义"><a href="#意义" class="headerlink" title="意义"></a>意义</h2><p>Git Commit规范是代码管理中至关重要的一环，它确保了代码库的一致性和可读性。通过遵循这些规范，开发人员可以更有效地协作、跟踪和管理代码更改。虽然现在都是独立开发，不像公司里，但作为程序员，从现在开始培养好的习惯肯定是有必要的。</p><h2 id="浅尝"><a href="#浅尝" class="headerlink" title="浅尝"></a>浅尝</h2><p>比较适合想要尝试体验的同学：<a href="https://github.com/RedJue/git-commit-plugin">git-commit-plugin</a></p><p>这是vscode中的一个插件，扩展里面直接搜索就能找到，使用起来非常方便，并且可以依据实际需要定制提交模板。</p><p><strong>使用效果：</strong></p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/19/65f9479351fdc.gif"/></div></div><p>这是我使用这个插件提交到GitHub上的commit信息：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/19/65f9496df06bb.png"/></div></div><h2 id="稍进阶"><a href="#稍进阶" class="headerlink" title="稍进阶"></a>稍进阶</h2><p>推荐使用<a href="https://github.com/Zhengqbbb/cz-git">cz-git</a>，可以根据<a href="https://cz-git.qbb.sh/zh/">官方文档</a>进行配置。配置步骤我就不搬运了，官方文档写得挺清楚了。</p><p><strong>使用效果：</strong></p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/19/65f94a0a7ac54.gif"/></div></div><p>我现在使用的模板是在官方给的中英文模板基础上修改的，这是我的提交效果：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/19/65f94b57cd1c0.png"/></div></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/19/65f94be3ce43e.png"/></div></div><p><strong>模板根据实际需求和个人爱好配置即可</strong></p><h2 id="可选但建议"><a href="#可选但建议" class="headerlink" title="可选但建议"></a>可选但建议</h2><p>上面只是利用一些工具生成较为统一的提交信息，并没有限制提交，如果使用不规范的提交信息还是可以提交上去。所以下面可以结合<strong>commitlint</strong>和<strong>husky</strong>进一步规范提交，参考<a href="https://blog.csdn.net/huangfengnt/article/details/135781676">配置教程</a>。</p><p><strong>使用效果：</strong></p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/19/65f956dfc04d9.png"/></div></div><p>可以发现上面的commit信息不规范，提交失败。如果使用cz提交可以正常提交。新版的<strong>husky</strong>好像会失效，建议大家使用低版本。</p><h2 id="另外"><a href="#另外" class="headerlink" title="另外"></a>另外</h2><p>最早的应该就是 Angular 的那套规范，上面的两种模板基本也参照这套规范，相关可以参考这篇<a href="https://juejin.cn/post/6844904033635794958">博客</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;日常摸鱼，看到了有关规范&lt;strong&gt;git commit message&lt;/strong&gt;的文章。还有在平时看到有不少hub里面的提交信息都特别整齐，感觉规范commit提交信息确实很有必要，也很实用美观。然后顺便水一篇博客。&lt;/p&gt;
&lt;/bl</summary>
      
    
    
    
    <category term="技术分享" scheme="https://blog.xxfer.cn/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="Git" scheme="https://blog.xxfer.cn/tags/Git/"/>
    
    <category term="VScode" scheme="https://blog.xxfer.cn/tags/VScode/"/>
    
  </entry>
  
  <entry>
    <title>路径规划：基于QT的Astar算法演示器</title>
    <link href="https://blog.xxfer.cn/posts/7dca2e02.html"/>
    <id>https://blog.xxfer.cn/posts/7dca2e02.html</id>
    <published>2024-03-15T22:00:00.000Z</published>
    <updated>2024-03-16T00:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="项目说明"><a href="#项目说明" class="headerlink" title="项目说明"></a>项目说明</h2><p>这是我自主研发的小软件，用于《算法设计与优化》的课设作业：无人机路径搜索和优化算法。这篇文章早在2023年底的时候已经发布了，之所以再发一遍是因为演示部分一直没更新，今天抽空把演示部分补上了，重新发布。</p><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><p>基于 Qt 框架，使用 C++ 开发</p><p>OS：Windows</p><p>IDE：QT Creator</p><h2 id="主界面布局"><a href="#主界面布局" class="headerlink" title="主界面布局"></a>主界面布局</h2><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2023/12/27/658c4264e5507.jpg" style="width:800px;"/></div></div><h2 id="如何使用？"><a href="#如何使用？" class="headerlink" title="如何使用？"></a>如何使用？</h2><ul><li>下载安装</li></ul><p>源码放在GitHub上，下载即可使用</p><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://github.com/JJLibra/Astar">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://www.freeimg.cn/i/2023/12/23/6586e75c86de7.png)">          <i class="anzhiyufont anzhiyu-icon-link" style="display: none"></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">A-star算法</div>            <div class="tag-link-sitename">GitHub</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><ol><li><p>直接通过链接进入下载源码，相信看本篇文章的同学都会使用GitHub，我不再细说。</p></li><li><p>当然也可以本地新建文件夹，然后使用命令克隆源码：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:JJLibra/Astar.git</span><br></pre></td></tr></table></figure></li><li><p>考虑到GitHub访问比较慢，甚至无法访问，我把网盘链接也附上（提取码：16ca），但只有最新版本的代码：</p></li></ol><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://pan.baidu.com/s/1SwZ1t9c0dEq-w0hxFZM_XA">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://www.freeimg.cn/i/2023/12/30/658f84e46d5ad.png)">          <i class="anzhiyufont anzhiyu-icon-link" style="display: none"></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">A-star算法</div>            <div class="tag-link-sitename">百度网盘</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><p>下载源码以后，建议安装 QT Creator 打开 Astar.pro 项目工程文件，即可编辑做二次开发</p><ul><li>Windows 中打包为可执行文件</li></ul><p>推荐使用 Enigma Virtual Box 打包，可以<a href="https://blog.csdn.net/qq_40994692/article/details/113880198">参考这篇博客</a></p><h2 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h2><ul><li>界面设计</li></ul><ol><li>自定义地图宽高</li><li>地图单元格大小可调</li><li>自定义起点、终点、障碍物</li><li>底部状态栏，便于调试</li><li>顶部工具栏可隐藏</li><li>显示最优路径的同时将探索点用不同颜色显示在地图中</li><li>绘制地图可以 .Amap 文件保存到本地文件夹</li><li>可将保存的 .Amap 文件载入地图</li><li>性能分析，数据可视化处理</li><li>生成随机地图（生成逻辑待优化，目前还不能确保生成的地图一定存在可行路径）</li><li>可导入本地图片作为地图背景，一种伪栅格化操作</li><li>“关于我们”页面</li><li>一点拙劣的 QSS 美化</li></ol><ul><li>算法设计</li></ul><ol><li>深度优先搜索算法</li><li>广度优先搜索算法</li><li>Dijkstra 算法</li><li>最佳优先搜索算法</li><li>传统 A 星算法</li><li>双向 A 星算法</li><li>优化 A 星算法<ul><li>三种距离计算定义预估距离 h<ul><li>切比雪夫距离</li><li>曼哈顿距离</li><li>欧几里得距离</li></ul></li><li>整体动态加权 dynamic</li><li>自定义拐角权值 penalty</li><li>自定义安全距离模式 alpha</li></ul></li><li>三种增量式搜索算法（还不够完善，不建议使用）</li></ol><h2 id="程序演示"><a href="#程序演示" class="headerlink" title="程序演示"></a>程序演示</h2><div class="note orange anzhiyufont anzhiyu-icon-dengpao simple"><p>由于流量有限，GIF的画质可能不是很高，实际运行情况会更好看的🙏</p></div><ul><li><strong>设置地图</strong></li></ul><p>本项目可以自由设置地图的长宽，单元格有四种状态选择：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://picsur.xxfer.cn/i/c3a189bc-526d-4f70-9222-9bebd2e25146.gif"/></div></div><ul><li><strong>优化Astar算法演示 &amp; 绘制贝塞尔曲线</strong></li></ul><p>下面是其中一种优化A星算法的演示，并且本项目采用<a href="https://blog.csdn.net/sinat_35676815/article/details/120884682">贝塞尔曲线</a>作为无人机最后的路径轨迹：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://d.kstore.space/download/7746/A星﹠贝塞尔.gif"/></div></div><ul><li><strong>生成随机地图 &amp; 重置地图数据</strong></li></ul><p>本项目还支持生成随机地图（生成逻辑比较简单，利用伪随机数生成，大家可以优化一下这里的生成逻辑）和一键重置地图参数：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://picsur.xxfer.cn/i/fe25fc09-01e1-4074-875b-d402ed68fe74.gif"/></div></div><ul><li><strong>保存地图</strong></li></ul><p>考虑到项目的展示环节，不可能现场画地图，所以本项目支持将地图保存到本地：</p><!-- <div class="img-wrap"><div class="img-bg"><img class="img" src="https://picsur.xxfer.cn/i/70dff376-2d17-4ed9-b7a7-9e5b432abc57.gif"/></div></div> --><div class="img-wrap"><div class="img-bg"><img class="img" src="https://d.kstore.space/download/7746/保存地图.gif"/></div></div><ul><li><strong>打开地图 &amp; 深度优先演示</strong></li></ul><p>支持打开保存的.Amap文件，下面还演示了深度优先算法，视频中忘记录<code>深搜最短</code>，实际按下<code>深搜最短</code>可以获得所有深搜路径中的最短路径（深搜实现没有问题，只是操作时需要注意，一步步来，否则容易出bug）：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://picsur.xxfer.cn/i/5f630723-86b5-48d0-b750-989a6ff79598.gif"/></div></div><ul><li><strong>打开和清除背景图片</strong></li></ul><p>本来还想要开发实际地图栅格化的功能，但是太麻烦了，时间不太够，就直接开发了这个导入图片作为背景，然后描绘出地图（提供一种思路：利用百度或者高德等第三方API获取地图数据）：</p><!-- <div class="img-wrap"><div class="img-bg"><img class="img" src="https://picsur.xxfer.cn/i/4854a2e8-79da-4d9a-a974-14db2487354c.gif"/></div></div> --><div class="img-wrap"><div class="img-bg"><img class="img" src="https://d.kstore.space/download/7746/打开﹠清除背景.gif"/></div></div><ul><li><strong>其他功能</strong></li></ul><p>上面只是演示了部分算法和功能，本项目还有不少小细节（关于页、可视化性能分析、操作提示框、页脚状态栏、进入的淡入淡出…）：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://picsur.xxfer.cn/i/943232fc-8901-429a-8e00-c2a66cd8c233.gif"/></div></div><h2 id="其他说明"><a href="#其他说明" class="headerlink" title="其他说明"></a>其他说明</h2><p>由于项目用于学校的课设，所以一些 ico 图标都与 NWPU 相关。如果有同学需要比较原始的版本，可以通过QQ：2565474095 联系我，免费提供代码。当然，如果有什么问题，我会尽我所能回答。另外，项目开发时有很多不规范的地方，小细节有不少但是bug也不少，bug改着改着代码有点史山…大家多多包涵。</p><p>还有一件重要的事，下载源码的同学千万别忘了给个免费的star哦，感谢大家~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;项目说明&quot;&gt;&lt;a href=&quot;#项目说明&quot; class=&quot;headerlink&quot; title=&quot;项目说明&quot;&gt;&lt;/a&gt;项目说明&lt;/h2&gt;&lt;p&gt;这是我自主研发的小软件，用于《算法设计与优化》的课设作业：无人机路径搜索和优化算法。这篇文章早在2023年底的时候已经发布了</summary>
      
    
    
    
    <category term="技术分享" scheme="https://blog.xxfer.cn/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="A星算法" scheme="https://blog.xxfer.cn/tags/A%E6%98%9F%E7%AE%97%E6%B3%95/"/>
    
    <category term="C++" scheme="https://blog.xxfer.cn/tags/C/"/>
    
    <category term="QT" scheme="https://blog.xxfer.cn/tags/QT/"/>
    
  </entry>
  
  <entry>
    <title>爬虫复习记录</title>
    <link href="https://blog.xxfer.cn/posts/1d3d26fe.html"/>
    <id>https://blog.xxfer.cn/posts/1d3d26fe.html</id>
    <published>2024-03-15T00:00:00.000Z</published>
    <updated>2024-03-15T22:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>本文只作为知识点总结，无不良引导。使用爬虫有一定的法律风险，请大家合理利用爬虫工具。</strong></p></blockquote><p>前段时间复习了一下爬虫的相关使用方式，又有了一些新的收获，来博客做一个记录。各位大佬如果有更好用的技巧，请务必指点我🙏</p><h3 id="源代码地址"><a href="#源代码地址" class="headerlink" title="源代码地址"></a>源代码地址</h3><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://github.com/JJLibra/scrapySpider">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://www.freeimg.cn/i/2023/12/17/657ee6859efc1.jpg)">          <i class="anzhiyufont anzhiyu-icon-link" style="display: none"></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">练习爬虫合集</div>            <div class="tag-link-sitename">小李同学</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><h3 id="爬取-Packet-storm-上的-POC"><a href="#爬取-Packet-storm-上的-POC" class="headerlink" title="爬取 Packet storm 上的 POC"></a>爬取 Packet storm 上的 POC</h3><blockquote><p>注意：GitHub上本案例的代码使用了selenium，之前测试用，但是代码还是能正常跑的，不用担心。scrapy调用driver需要一些时间，运行时如果遇到这样的提示信息，不用着急，等一会儿会跑起来，前提是selenium和driver配置正确。</p></blockquote><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/14/65f3119e19d0f.png"/></div></div><ul><li>目标网站：<a href="https://packetstormsecurity.com/files/tags/exploit/page1/">Packet storm</a></li><li>使用工具：Scrapy、Xpath</li><li>语言：Python</li></ul><p>分析：<br>因为目标网站属于静态网站，所以爬取该网站的信息还是比较容易的，按照常规流程来就行。</p><p>思路：<br>使用Xpath工具定位元素，先抓取需要的详情页锚点链接，然后进入详情页进一步爬取所需数据。</p><p>主要代码简析：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取当前页漏洞网址链接</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_vul_list</span>(<span class="params">self, response</span>):</span><br><span class="line">    counter = <span class="number">0</span></span><br><span class="line">    vul_list = response.xpath(<span class="string">&#x27;//a[@class=&quot;ico text-plain&quot;]/@href&#x27;</span>).extract()</span><br><span class="line">    <span class="keyword">for</span> vul <span class="keyword">in</span> vul_list:</span><br><span class="line">        counter += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> counter &gt;= <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        vul_url = <span class="string">&#x27;https://packetstormsecurity.com&#x27;</span> + vul</span><br><span class="line">        request = scrapy.Request(url=vul_url, callback=self.parse_vul_inf)</span><br><span class="line">        <span class="keyword">yield</span> request</span><br><span class="line"><span class="comment"># 详情页数据分析</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_vul_inf</span>(<span class="params">self, response</span>):</span><br><span class="line">    item = &#123;&#125;</span><br><span class="line">    item[<span class="string">&#x27;title&#x27;</span>] = response.xpath(<span class="string">&#x27;//strong/text()&#x27;</span>).extract_first() <span class="keyword">if</span> response.xpath(</span><br><span class="line">        <span class="string">&#x27;//strong/text()&#x27;</span>).extract_first() <span class="keyword">else</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    authors = response.xpath(<span class="string">&#x27;//a[@class=&quot;person&quot;]/text()&#x27;</span>).extract() <span class="keyword">if</span> response.xpath(</span><br><span class="line">        <span class="string">&#x27;//a[@class=&quot;person&quot;]/text()&#x27;</span>).extract() <span class="keyword">else</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    item[<span class="string">&#x27;author&#x27;</span>] = <span class="string">&#x27;,&#x27;</span>.join(authors)</span><br><span class="line">    date = response.xpath(<span class="string">&#x27;//dd[@class=&quot;datetime&quot;]/a/@href&#x27;</span>).extract_first() <span class="keyword">if</span> response.xpath(</span><br><span class="line">        <span class="string">&#x27;//dd[@class=&quot;datetime&quot;]/a/@href&#x27;</span>).extract_first() <span class="keyword">else</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    pattern = re.<span class="built_in">compile</span>(<span class="string">r&#x27;/files/date/(.*?)&#x27;</span>)</span><br><span class="line">    item[<span class="string">&#x27;date&#x27;</span>] = pattern.findall(date)[<span class="number">0</span>]</span><br><span class="line">    item[<span class="string">&#x27;des&#x27;</span>] = response.xpath(<span class="string">&#x27;//dd[@class=&quot;detail&quot;]/p/text()&#x27;</span>).extract_first() <span class="keyword">if</span> response.xpath(</span><br><span class="line">        <span class="string">&#x27;//dd[@class=&quot;detail&quot;]/p/text()&#x27;</span>).extract_first() <span class="keyword">else</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    item[<span class="string">&#x27;vul_type&#x27;</span>] = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    cveid = response.xpath(<span class="string">&#x27;//dd[@class=&quot;cve&quot;]/a/text()&#x27;</span>).extract() <span class="keyword">if</span> response.xpath(</span><br><span class="line">        <span class="string">&#x27;//dd[@class=&quot;cve&quot;]/a/text()&#x27;</span>).extract() <span class="keyword">else</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    item[<span class="string">&#x27;CVE-ID&#x27;</span>] = <span class="string">&#x27;,&#x27;</span>.join(cveid)</span><br><span class="line">    test = response.xpath(<span class="string">&#x27;//div[@class=&quot;src&quot;]/pre/code/text()&#x27;</span>).extract_first() <span class="keyword">if</span> response.xpath(</span><br><span class="line">        <span class="string">&#x27;//div[@class=&quot;src&quot;]/pre/code/text()&#x27;</span>).extract_first() <span class="keyword">else</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    s_replace = test.replace(<span class="string">&#x27;&lt;br&gt;&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    s_replace = s_replace.replace(<span class="string">&#x27;&lt;code&gt;&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    s_replace = s_replace.replace(<span class="string">&#x27;&lt;/code&gt;&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    item[<span class="string">&#x27;poc&#x27;</span>] = s_replace</span><br><span class="line">    <span class="keyword">yield</span> item</span><br></pre></td></tr></table></figure><p>这个案例还对<strong>请求头</strong>做了处理，这样不容易被发现。<br>该案例还是比较简单的，又找了一个案例加深印象。</p><h3 id="爬取豆瓣top250电影信息"><a href="#爬取豆瓣top250电影信息" class="headerlink" title="爬取豆瓣top250电影信息"></a>爬取豆瓣top250电影信息</h3><p>该案例的爬取数据会用于之后的NLP练习。</p><ul><li>目标网站：<a href="https://movie.douban.com/top250">豆瓣电影top250</a></li><li>使用工具：Scrapy、Xpath</li><li>语言：Python</li></ul><p>思路：<br>同 Packet storm，对于静态网页的爬取只需要注意避免检测就行了。爬取数据不会受到太多限制。</p><p>主要代码简析：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基础数据分析</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse</span>(<span class="params">self, response</span>):</span><br><span class="line">    <span class="comment"># 提取当前页电影基础信息</span></span><br><span class="line">    node_list = response.xpath(<span class="string">&#x27;//div[@class=&quot;info&quot;]&#x27;</span>)</span><br><span class="line">    <span class="comment"># 提取基础信息</span></span><br><span class="line">    <span class="keyword">for</span> msg <span class="keyword">in</span> node_list:</span><br><span class="line">        <span class="comment"># 注意：上面已经定位到div[@class=&quot;info&quot;]，所以这里应该使用&#x27;./...&#x27;</span></span><br><span class="line">        <span class="comment"># 详情链接</span></span><br><span class="line">        details_url = msg.xpath(<span class="string">&#x27;./div[@class=&quot;hd&quot;]/a/@href&#x27;</span>).extract()</span><br><span class="line">        <span class="comment"># 中文名称</span></span><br><span class="line">        name_chinese = msg.xpath(<span class="string">&#x27;./div[@class=&quot;hd&quot;]/a/span[1]/text()&#x27;</span>).extract()</span><br><span class="line">        <span class="comment"># 原名</span></span><br><span class="line">        name = msg.xpath(<span class="string">&#x27;./div[@class=&quot;hd&quot;]/a/span[2]/text()&#x27;</span>).extract()</span><br><span class="line">        name = <span class="built_in">str</span>(name).replace(<span class="string">&quot;\\xa0&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="comment"># 别名列表</span></span><br><span class="line">        name_other_list = msg.xpath(<span class="string">&#x27;./div[@class=&quot;hd&quot;]/a/span[3]/text()&#x27;</span>).extract()</span><br><span class="line">        name_other_list = <span class="built_in">str</span>(name_other_list).replace(<span class="string">&quot;\\xa0&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="comment"># 播放状态</span></span><br><span class="line">        player_type = msg.xpath(<span class="string">&#x27;./div[@class=&quot;hd&quot;]/span[@class=&quot;playable&quot;]/text()&#x27;</span>).extract()</span><br><span class="line">        player_type = <span class="built_in">str</span>(player_type)[<span class="number">3</span>:-<span class="number">3</span>]</span><br><span class="line">        <span class="comment"># 评价人数</span></span><br><span class="line">        number_evaluate = msg.xpath(<span class="string">&#x27;./div[@class=&quot;bd&quot;]/div[@class=&quot;star&quot;]/span[4]/text()&#x27;</span>).extract()</span><br><span class="line">        number_evaluate = <span class="built_in">str</span>(number_evaluate)[<span class="number">2</span>:-<span class="number">5</span>]</span><br><span class="line">        <span class="comment"># 评分</span></span><br><span class="line">        score = msg.xpath(<span class="string">&#x27;./div[@class=&quot;bd&quot;]/div[@class=&quot;star&quot;]/span[@property=&quot;v:average&quot;]/text()&#x27;</span>).extract()</span><br><span class="line">        <span class="comment"># 中心主题</span></span><br><span class="line">        purpose = msg.xpath(<span class="string">&#x27;./div[@class=&quot;bd&quot;]/p[@class=&quot;quote&quot;]/span[@class=&quot;inq&quot;]/text()&#x27;</span>).extract()</span><br><span class="line">        <span class="comment"># 使用管道保存，管道可以对键值自动去重</span></span><br><span class="line">        item_pipe = DoubanspiderItem()</span><br><span class="line">        item_pipe[<span class="string">&quot;details_url&quot;</span>] = details_url</span><br><span class="line">        item_pipe[<span class="string">&quot;name_chinese&quot;</span>] = name_chinese</span><br><span class="line">        item_pipe[<span class="string">&quot;name&quot;</span>] = name</span><br><span class="line">        item_pipe[<span class="string">&quot;name_other_list&quot;</span>] = name_other_list</span><br><span class="line">        item_pipe[<span class="string">&quot;player_type&quot;</span>] = player_type</span><br><span class="line">        item_pipe[<span class="string">&quot;number_evaluate&quot;</span>] = number_evaluate</span><br><span class="line">        item_pipe[<span class="string">&quot;score&quot;</span>] = score</span><br><span class="line">        item_pipe[<span class="string">&quot;purpose&quot;</span>] = purpose</span><br><span class="line">        time.sleep(self.step_time)</span><br><span class="line">        <span class="comment"># 转交控制权（scrapy基于Twisted开发，感兴趣的自行了解），继续提取详情数据</span></span><br><span class="line">        <span class="keyword">yield</span> Request(details_url[<span class="number">0</span>], callback=self.get_details, meta=&#123;<span class="string">&quot;info&quot;</span>: item_pipe&#125;)</span><br><span class="line">    <span class="comment"># 控制页号，利用每一页25部电影进行换页</span></span><br><span class="line">    self.page_number += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(self.page_number)</span><br><span class="line">    <span class="comment"># 爬取其他页面</span></span><br><span class="line">    <span class="keyword">if</span> self.page_number &lt; <span class="number">10</span>:</span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line">        page_url = <span class="string">&#x27;https://movie.douban.com/top250?start=&#123;&#125;&amp;filter=&#x27;</span>.<span class="built_in">format</span>(self.page_number * <span class="number">25</span>)</span><br><span class="line">        <span class="keyword">yield</span> scrapy.Request(page_url, callback=self.parse)</span><br><span class="line"><span class="comment"># 获取详情页数据</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_details</span>(<span class="params">self, response</span>):</span><br><span class="line">    <span class="comment"># 以支持在item_pipe继续补充数据</span></span><br><span class="line">    item_pipe = DoubanspiderItem()</span><br><span class="line">    info = response.meta[<span class="string">&quot;info&quot;</span>]</span><br><span class="line">    item_pipe.update(info)</span><br><span class="line">    <span class="comment"># 详情页基础信息</span></span><br><span class="line">    response = response.xpath(<span class="string">&#x27;//div[@id=&quot;info&quot;]&#x27;</span>)</span><br><span class="line">    <span class="comment"># 编剧列表</span></span><br><span class="line">    writer_list = response.xpath(<span class="string">&#x27;./span[2]/span[@class=&quot;attrs&quot;]/a/text()&#x27;</span>).extract() <span class="keyword">if</span> response.xpath(</span><br><span class="line">        <span class="string">&#x27;./span[2]/span[@class=&quot;attrs&quot;]/a/text()&#x27;</span>).extract() <span class="keyword">else</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 导演列表</span></span><br><span class="line">    director_list = response.xpath(<span class="string">&#x27;./span[1]/span[@class=&quot;attrs&quot;]/a/text()&#x27;</span>).extract() <span class="keyword">if</span> response.xpath(</span><br><span class="line">        <span class="string">&#x27;./span[1]/span[@class=&quot;attrs&quot;]/a/text()&#x27;</span>).extract() <span class="keyword">else</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 主演列表</span></span><br><span class="line">    star_list = response.xpath(<span class="string">&#x27;string(./span[@class=&quot;actor&quot;]/span[@class=&quot;attrs&quot;])&#x27;</span>).extract() <span class="keyword">if</span> response.xpath(</span><br><span class="line">        <span class="string">&#x27;string(./span[@class=&quot;actor&quot;]/span[@class=&quot;attrs&quot;])&#x27;</span>).extract() <span class="keyword">else</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 官方网站</span></span><br><span class="line">    official_url = response.xpath(<span class="string">&#x27;./a[@rel=&quot;nofollow&quot; and @target=&quot;_blank&quot;]/@href&#x27;</span>).extract() <span class="keyword">if</span> response.xpath(</span><br><span class="line">        <span class="string">&#x27;./a[@rel=&quot;nofollow&quot; and @target=&quot;_blank&quot;]/@href&#x27;</span>).extract() <span class="keyword">else</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 上映时间</span></span><br><span class="line">    release_data = response.xpath(<span class="string">&#x27;./span[@property=&quot;v:initialReleaseDate&quot;]/text()&#x27;</span>).extract() <span class="keyword">if</span> response.xpath(</span><br><span class="line">        <span class="string">&#x27;./span[@property=&quot;v:initialReleaseDate&quot;]/text()&#x27;</span>).extract() <span class="keyword">else</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 制片国，发现制片地区无法直接使用xpath直接定位，下面这样处理</span></span><br><span class="line">    area = <span class="built_in">str</span>(response.extract())</span><br><span class="line">    area = area[area.index(<span class="string">&quot;制片国&quot;</span>):area.index(<span class="string">&quot;语言&quot;</span>)].strip()</span><br><span class="line">    area = area[area.index(<span class="string">&quot;&lt;/span&gt;&quot;</span>) + <span class="number">7</span>:area.index(<span class="string">&quot;&lt;br&gt;&quot;</span>)].strip() <span class="keyword">if</span> area[area.index(<span class="string">&quot;&lt;/span&gt;&quot;</span>) + <span class="number">7</span>:area.index(</span><br><span class="line">        <span class="string">&quot;&lt;br&gt;&quot;</span>)].strip() <span class="keyword">else</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 语言，同上处理</span></span><br><span class="line">    languages = <span class="built_in">str</span>(response.extract())</span><br><span class="line">    languages = languages[languages.index(<span class="string">&quot;语言&quot;</span>):languages.index(<span class="string">&quot;上映&quot;</span>)].strip()</span><br><span class="line">    languages = languages[languages.index(<span class="string">&quot;&lt;/span&gt;&quot;</span>) + <span class="number">7</span>:languages.index(<span class="string">&quot;&lt;br&gt;&quot;</span>)].strip()</span><br><span class="line">    <span class="comment"># 片长</span></span><br><span class="line">    times = response.xpath(<span class="string">&#x27;./span[@property=&quot;v:runtime&quot;]/text()&#x27;</span>).extract()</span><br><span class="line">    <span class="comment"># 类型</span></span><br><span class="line">    film_type = response.xpath(<span class="string">&#x27;./span[@property=&quot;v:genre&quot;]/text()&#x27;</span>).extract()</span><br><span class="line">    item_pipe[<span class="string">&quot;writer_list&quot;</span>] = writer_list</span><br><span class="line">    item_pipe[<span class="string">&quot;director_list&quot;</span>] = director_list</span><br><span class="line">    item_pipe[<span class="string">&quot;star_list&quot;</span>] = star_list</span><br><span class="line">    item_pipe[<span class="string">&quot;official_url&quot;</span>] = official_url</span><br><span class="line">    item_pipe[<span class="string">&quot;release_data&quot;</span>] = release_data</span><br><span class="line">    item_pipe[<span class="string">&quot;area&quot;</span>] = area</span><br><span class="line">    item_pipe[<span class="string">&quot;languages&quot;</span>] = languages</span><br><span class="line">    item_pipe[<span class="string">&quot;times&quot;</span>] = times</span><br><span class="line">    item_pipe[<span class="string">&quot;film_type&quot;</span>] = film_type</span><br><span class="line">    <span class="keyword">yield</span> item_pipe</span><br></pre></td></tr></table></figure><h3 id="爬取安居客二手房数据"><a href="#爬取安居客二手房数据" class="headerlink" title="爬取安居客二手房数据"></a>爬取安居客二手房数据</h3><ul><li>使用工具同上</li></ul><p>两年前写的，不能保证现在是否还有效，前段时间看的时候好像不行了，但逻辑应该还能使用，应该只需要修改修改就能跑，自行了解。</p><h3 id="爬取-Exploit-db-上的-POC"><a href="#爬取-Exploit-db-上的-POC" class="headerlink" title="爬取 Exploit-db 上的 POC"></a>爬取 Exploit-db 上的 POC</h3><ul><li>目标网站：<a href="https://www.exploit-db.com/">Exploit-db</a></li></ul><p>本案例我们需要爬取的内容就是动态加载的资源。关于网站的静态和动态资源，可以参考我写的这篇<a href="https://blog.xxfer.cn/posts/d98373ae.html">网站资源类型及其加速原理</a>。简单来说，静态网页是在服务器端生成并发送给客户端的<strong>固定内容</strong>，内容在客户端展示时并不会发生变化。而动态网页则是在客户端加载和渲染过程中，通过<strong>JavaScript等脚本技术</strong>动态生成和更新内容。这使得动态网页的内容无法通过简单地下载HTML源码来获取，而需要模拟浏览器行为来执行脚本并获取最终呈现的内容。</p><p>我一开始还是想通过<strong>Scrapy</strong>来爬取的，但是会发现这个网站存在异步加载，那么Scrapy提供的下载器就不是那么好用了，或者可以说失效了。因为这部分数据需要在客户端加载，而下载器无法渲染这部分数据，所以直接使用<strong>Scrapy</strong>，是得不到我们想要的POC数据的。</p><p>然后就想着使用<strong>Scrapy+Selenium</strong>，通过编写中间件，用<strong>selenium</strong>去模拟浏览器的行为，从而得到那一部分数据的<strong>response</strong>。很遗憾，我并没有成功，理论上应该是可行的，应该是代码写的有点问题，运行结果有返回的response，但里面还是没有需要的数据。这种思路应该是正确的，之后可以继续研究一下。</p><p>观察响应：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/14/65f3099373d19.png"/></div></div><p>既然这条路走不通，我就直接上<strong>selenium</strong>，不仅成功了，代码也挺简洁的。<strong>开始的两个案例当然也能使用selenium爬取，但一般不会这么做，因为效率会降低。selenium主要还是用在动态网站的数据爬取上。</strong></p><p>思路：<br>因为目标网站使用了<strong>异步加载</strong>，所以需要借助<strong>selenium</strong>等自动工具模拟浏览器的行为，从而渲染得到所需数据。只要渲染成功，爬取步骤与静态网页的爬取类似。</p><details class="folding-tag" green><summary> 关于本案例网站的异步加载 </summary>              <div class='content'>              <p>本案例中目标网站使用了<code>Ajax</code>，依据：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/14/65f307a6cf329.png"/></div></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/14/65f307b40293d.png"/></div></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/14/65f307be943fa.png"/></div></div><p>关于<code>Ajax</code>，大家可以学习这个视频，简单了解什么是<code>Ajax</code>：</p><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://www.bilibili.com/video/BV1jv411P7Hp/?spm_id_from=333.337.search-card.all.click&vd_source=91a233ea2e45cea087336c119461d12b">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://www.freeimg.cn/i/2023/12/30/658fb2cbc152c.png)">          <i class="anzhiyufont anzhiyu-icon-link" style="display: none"></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">Ajax 是什么?</div>            <div class="tag-link-sitename">技术蛋老师</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><p>简单来说，Ajax 并不算是一种新的技术，而是已有技术的组合，主要用来实现客户端与服务器端的异步通信效果，实现页面的局部刷新。Ajax的目的是提高用户体验，较少网络数据的传输量，所以它<strong>不是一种反爬技术</strong>，只是它的<strong>异步加载</strong>使得不能像爬取静态网页那样制作爬虫。</p>              </div>            </details><p>主要代码简析：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建Chrome WebDriver对象</span></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line"><span class="comment"># 目标动态网页的URL</span></span><br><span class="line">url = <span class="string">&quot;https://www.exploit-db.com/&quot;</span></span><br><span class="line">driver.get(url)</span><br><span class="line"><span class="comment"># 延时，直到想要获取的数据渲染完成</span></span><br><span class="line">wait = WebDriverWait(driver, <span class="number">10</span>)</span><br><span class="line">element = wait.until(EC.visibility_of_element_located((By.XPATH, <span class="string">&#x27;//tbody/tr[@role=&quot;row&quot;]/td[5]/a&#x27;</span>)))</span><br><span class="line"><span class="comment"># 提取详情页链接</span></span><br><span class="line">links = driver.find_elements(By.XPATH, <span class="string">&quot;//tbody/tr[@role=&#x27;row&#x27;]/td[5]/a&quot;</span>)</span><br><span class="line">url_list = [url.get_attribute(<span class="string">&#x27;href&#x27;</span>) <span class="keyword">for</span> url <span class="keyword">in</span> links]</span><br><span class="line"></span><br><span class="line">json_data = []</span><br><span class="line"><span class="comment"># 信息列表</span></span><br><span class="line">titles = []</span><br><span class="line">edb_id_list = []</span><br><span class="line">authors = []</span><br><span class="line">dates = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入详情页进一步爬取</span></span><br><span class="line"><span class="keyword">for</span> url <span class="keyword">in</span> url_list:</span><br><span class="line">    driver.get(url)</span><br><span class="line">    title = driver.find_element(By.XPATH, <span class="string">&quot;//h1&quot;</span>).text</span><br><span class="line">    edb_id = driver.find_element(By.XPATH, <span class="string">&quot;//div[@class=&#x27;col-sm-12 col-md-6 col-lg-3 d-flex align-items-stretch&#x27;][&quot;</span></span><br><span class="line">                                           <span class="string">&quot;1]//div[@class=&#x27;col-6 text-center&#x27;][1]/h6&quot;</span>).text</span><br><span class="line">    date = driver.find_element(By.XPATH, <span class="string">&quot;//div[@class=&#x27;col-sm-12 col-md-6 col-lg-3 d-flex align-items-stretch&#x27;][&quot;</span></span><br><span class="line">                                         <span class="string">&quot;3]//div[@class=&#x27;col-6 text-center&#x27;][2]/h6&quot;</span>).text</span><br><span class="line">    author = driver.find_element(By.XPATH, <span class="string">&quot;//div[@class=&#x27;col-sm-12 col-md-6 col-lg-3 d-flex align-items-stretch&#x27;][&quot;</span></span><br><span class="line">                                           <span class="string">&quot;2]//div[@class=&#x27;col-6 text-center&#x27;][1]/h6&quot;</span>).text</span><br><span class="line">    titles.append(title)</span><br><span class="line">    edb_id_list.append(edb_id)</span><br><span class="line">    authors.append(author)</span><br><span class="line">    dates.append(date)</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;title&#x27;</span>: title,</span><br><span class="line">        <span class="string">&#x27;edb_id&#x27;</span>: edb_id,</span><br><span class="line">        <span class="string">&#x27;authors&#x27;</span>: author,</span><br><span class="line">        <span class="string">&#x27;created&#x27;</span>: date,</span><br><span class="line">    &#125;</span><br><span class="line">    json_data.append(data)</span><br><span class="line"><span class="comment"># 写入JSON文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./test.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> json_file:</span><br><span class="line">    json.dump(json_data, json_file, ensure_ascii=<span class="literal">False</span>, indent=<span class="number">4</span>)</span><br><span class="line"><span class="comment"># 结束关闭WebDriver</span></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><p>需要注意<strong>selenium</strong>的使用语法，建议一步一步来，不要一下子把代码写到底，当然遇到问题解决问题就行。我遇到的一个报错：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">element = driver.find_element(By.XPATH, <span class="string">&#x27;//tbody/tr[@role=&quot;row&quot;][1]/td[5]/a/@href&#x27;</span>).text</span><br><span class="line"><span class="comment"># 报错信息：</span></span><br><span class="line"><span class="comment"># no such element: Unable to locate element: &#123;&quot;method&quot;:&quot;xpath&quot;,&quot;selector&quot;:&quot;//tbody/tr[@role=&quot;row&quot;][1]/td[5]/a/@href&quot;&#125;</span></span><br></pre></td></tr></table></figure><p>在XPath中，如果想获取一个元素的属性值，通常需要使用@符号，但是不能直接在find_element_by_xpath方法中返回属性，不过对于获取文本是没有关系的。解决方法是先定位到元素，然后再获取其属性值。<br><strong>正确用法</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">element = driver.find_element(By.XPATH, <span class="string">&quot;//tbody/tr[@role=&#x27;row&#x27;][1]/td[5]/a&quot;</span>)</span><br><span class="line">href_value = element.get_attribute(<span class="string">&#x27;href&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>报错不可怕，可怕的是没有报错又找不出问题所在。</strong></p><p>运行结果：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/15/65f3aa8af3abf.gif"/></div></div><p>关于<strong>selenium</strong>的使用，在网上看到一篇总结得比较好的，一并推荐给大家：</p><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://cloud.tencent.com/developer/article/2392281">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="">          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">使用Selenium和API爬取动态网页的最佳方法</div>            <div class="tag-link-sitename">全栈若城</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><p>另外，爬虫的写法还有很多，也有很多现成的库供我们使用。这里只是给自己前段时间这方面的复习做个记录。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;本文只作为知识点总结，无不良引导。使用爬虫有一定的法律风险，请大家合理利用爬虫工具。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;前段时间复习了一下爬虫的相关使用方式，又有了一些新的收获，来博客做一个记录。各位大佬如</summary>
      
    
    
    
    <category term="大学生涯" scheme="https://blog.xxfer.cn/categories/%E5%A4%A7%E5%AD%A6%E7%94%9F%E6%B6%AF/"/>
    
    
    <category term="网络安全" scheme="https://blog.xxfer.cn/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    <category term="爬虫" scheme="https://blog.xxfer.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>自用：Scrapy简单爬些漏洞POC</title>
    <link href="https://blog.xxfer.cn/posts/e59dce9.html"/>
    <id>https://blog.xxfer.cn/posts/e59dce9.html</id>
    <published>2024-03-08T00:00:00.000Z</published>
    <updated>2024-03-08T22:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="项目说明"><a href="#项目说明" class="headerlink" title="项目说明"></a>项目说明</h2><p>目标网站是静态的，爬取过程比较简单，用于相关报告的撰写。</p><h2 id="漏洞POC"><a href="#漏洞POC" class="headerlink" title="漏洞POC"></a>漏洞POC</h2><p>漏洞证明，漏洞报告中，通过一段描述或一个样例来证明漏洞确实存在。</p><h2 id="Scrapy爬取"><a href="#Scrapy爬取" class="headerlink" title="Scrapy爬取"></a>Scrapy爬取</h2><ul><li>目标网站：<a href="https://packetstormsecurity.com/files/tags/exploit/">packet storm</a></li><li>语言：python</li><li>工具：Xpath</li></ul><h2 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h2><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://github.com/JJLibra/scrapySpider">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://www.freeimg.cn/i/2023/12/17/657ee6859efc1.jpg)">          <i class="anzhiyufont anzhiyu-icon-link" style="display: none"></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">pksSpider</div>            <div class="tag-link-sitename">小李同学</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;项目说明&quot;&gt;&lt;a href=&quot;#项目说明&quot; class=&quot;headerlink&quot; title=&quot;项目说明&quot;&gt;&lt;/a&gt;项目说明&lt;/h2&gt;&lt;p&gt;目标网站是静态的，爬取过程比较简单，用于相关报告的撰写。&lt;/p&gt;
&lt;h2 id=&quot;漏洞POC&quot;&gt;&lt;a href=&quot;#漏洞PO</summary>
      
    
    
    
    <category term="大学生涯" scheme="https://blog.xxfer.cn/categories/%E5%A4%A7%E5%AD%A6%E7%94%9F%E6%B6%AF/"/>
    
    
    <category term="网络安全" scheme="https://blog.xxfer.cn/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    <category term="Scrapy" scheme="https://blog.xxfer.cn/tags/Scrapy/"/>
    
  </entry>
  
  <entry>
    <title>排查Docker容器内存占用问题记录</title>
    <link href="https://blog.xxfer.cn/posts/ce251794.html"/>
    <id>https://blog.xxfer.cn/posts/ce251794.html</id>
    <published>2024-03-07T16:12:08.000Z</published>
    <updated>2024-03-07T18:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="情况说明"><a href="#情况说明" class="headerlink" title="情况说明"></a>情况说明</h2><p>前段时间，服务器总是莫名宕机，部署在上面一些站点当然也就不行了。然后我就去后台看了一下，发现应该是<code>内存占用过高</code>引起的：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/07/65e967d2dcbbe.jpg"/></div></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/07/65e967e10fcb6.jpg"/></div></div><p>一开始也没太当回事，因为每次宕机一般间隔几天，想着宕机以后去重启一下就好了。于是就先安了一个监控，监控部署在上面的站点，一旦站点无法访问，就会通知我去重启，问题暂时从表面解决了。<br>但是接下来几天，情况愈演愈烈，一天就要宕机好几次。博客上的一些图片也是放在上面的，影响了博客的加载速度，没办法了，只好着手解决。<br>查看了上一周的使用状况：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/07/65e967ee09875.png"/></div></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/07/65e967f81ded7.png"/></div></div><p>初步判断应该是<code>Docker容器占用了太多的内存</code>，主要服务器上也就部署了几个容器，第一时间想到的肯定是容器的锅，结果也确实是。</p><h2 id="排查过程"><a href="#排查过程" class="headerlink" title="排查过程"></a>排查过程</h2><p>部署在服务器上的项目：兰空图床、Picsur图床、一个支持端到端连接的聊天工具、Nginx Proxy Manager和长亭雷池。</p><ul><li>首先排除一下磁盘占用的问题<div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/07/65e96c244b77d.png"/></div></div>挂载的磁盘占用还是非常健康的，可以暂时排除这个原因。</li><li>观察CPU和内存资源<div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/07/65e96ce3c743e.png"/></div></div>发现内存占用很高。尝试清除缓存：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">To free pagecache:仅清除页面缓存（PageCache）</span><br><span class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/vm/drop_caches</span><br><span class="line"></span><br><span class="line">To free dentries and inodes:清除目录项和inode</span><br><span class="line"><span class="built_in">echo</span> 2 &gt; /proc/sys/vm/drop_caches</span><br><span class="line"></span><br><span class="line">To free pagecache, dentries and inodes:清除页面缓存，目录项和inode</span><br><span class="line"><span class="built_in">echo</span> 3 &gt; /proc/sys/vm/drop_caches</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/07/65e96dc36dfca.png"/></div></div>发现内存使用还是居高不下，问题多半是出在docker容器上了。</li><li>应该不会是内存泄露的问题，当然也应该不会是日志文件的大量读写，因为内存占用并没有一直膨胀，io使用率也是正常的。</li><li>使用<code>docker stop $(docker ps -a -q)</code>命令结束所有容器</li><li>逐个开启容器，然后使用<code>docker stats</code>查看资源占用情况<br>最后发现<code>长亭雷池</code>和<code>兰空图床</code>的占用过高，一般有下面的解决方式：</li></ul><ol><li>限制容器的内存占用</li><li>开辟swap交换空间</li><li>关闭部分高占用容器（简单粗暴）<br>开始的两种方式好像并不能无脑使用，需要结合自身使用情况进行合理的配置。</li></ol><h2 id="最终解决方式"><a href="#最终解决方式" class="headerlink" title="最终解决方式"></a>最终解决方式</h2><p>其实我挺纳闷的，我明明已经早早地设置了交换空间，为什么还会出现这种情况呢？感觉还存在知识盲区吧，一开始部署的时候其实就考虑了内存占用的问题，并提前设置了两倍内存的交换空间，但是内存占用过高的问题还是出现了。</p><p>至于设置了交换空间，却没有起到显著的效果，还需要研究一下，有可能很复杂，也有可能很简单……</p><p>最后，还是把兰空图床给停用了，并限制了雷池的内存占用，观察了几天，发现没有再出现之前的问题了，是能说暂时安全了，可能这台服务器经不起这样造(doge)。</p><p>关于Docker内存限制管理，网上有不少优秀案例，推荐一篇：</p><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://zhuanlan.zhihu.com/p/417472115">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="">          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">Docker资源（CPU/内存/磁盘IO/GPU）限制与分配指南</div>            <div class="tag-link-sitename"></div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;情况说明&quot;&gt;&lt;a href=&quot;#情况说明&quot; class=&quot;headerlink&quot; title=&quot;情况说明&quot;&gt;&lt;/a&gt;情况说明&lt;/h2&gt;&lt;p&gt;前段时间，服务器总是莫名宕机，部署在上面一些站点当然也就不行了。然后我就去后台看了一下，发现应该是&lt;code&gt;内存占用过高&lt;</summary>
      
    
    
    
    <category term="技术分享" scheme="https://blog.xxfer.cn/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="Docker" scheme="https://blog.xxfer.cn/tags/Docker/"/>
    
    <category term="ECS" scheme="https://blog.xxfer.cn/tags/ECS/"/>
    
  </entry>
  
  <entry>
    <title>免费WAF：长亭雷池社区版，给站点再加道防护！</title>
    <link href="https://blog.xxfer.cn/posts/a450d722.html"/>
    <id>https://blog.xxfer.cn/posts/a450d722.html</id>
    <published>2024-03-01T00:05:00.000Z</published>
    <updated>2024-03-01T22:33:00.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note orange anzhiyufont anzhiyu-icon-dengpao simple"><p>去年其实就看到这个项目了，最早是在GitHub上看到的，当时只是star了，后来就给忘了。最近整理GitHub的时候又看到了，想想刚好可以用在服务器的那些站点，顺便来这里做个记录。<strong>由于我的博客资源放在GitHub上，所以难以使用<code>ip:port</code>的形式直接访问，也就不能添加雷池。但对于博客部署在自己服务器上的小伙伴，可以正常配置长亭雷池。</strong>如果有好的方法了，我会再来更新。</p></div><h2 id="什么是雷池？"><a href="#什么是雷池？" class="headerlink" title="什么是雷池？"></a>什么是雷池？</h2><p>雷池（SafeLine）是长亭科技耗时近 10 年倾情打造的 WAF，核心检测能力由智能语义分析算法驱动。</p><p>Slogan: 不让黑客越雷池一步。</p><h2 id="什么是-WAF？"><a href="#什么是-WAF？" class="headerlink" title="什么是 WAF？"></a>什么是 WAF？</h2><p>WAF 是 Web Application Firewall 的缩写，也被称为 Web 应用防火墙。区别于传统防火墙，WAF 工作在应用层，对基于 HTTP&#x2F;HTTPS 协议的 Web 系统有着更好的防护效果，使其免于收到黑客的攻击。</p><h2 id="WAF-部署架构"><a href="#WAF-部署架构" class="headerlink" title="WAF 部署架构"></a>WAF 部署架构</h2><p>下图是一个简单的网站流量拓扑，外部用户发出请求，经过网络最终传递到网站服务器。<br>此时，若外部用户中存在恶意用户，那么由恶意用户发出的攻击请求也会经过网络最终传递到网站服务器。</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://d.kstore.space/download/7746/waf架构1.svg"/></div></div><p>社区版雷池以反向代理方式接入，优先于网站服务器接收流量，对流量中的攻击行为进行检测和清洗，将清洗过后的流量转发给网站服务器。<br>通过以上行为，最终确保外部攻击流量无法触达网站服务器。</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://d.kstore.space/download/7746/waf架构2.svg"/></div></div><h2 id="部署效果"><a href="#部署效果" class="headerlink" title="部署效果"></a>部署效果</h2><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/01/65e135cd19322.jpeg"/></div></div><h2 id="如何加到自己的网站？"><a href="#如何加到自己的网站？" class="headerlink" title="如何加到自己的网站？"></a>如何加到自己的网站？</h2><details class="folding-tag" green><summary> 正式部署前的准备工作 </summary>              <div class='content'>              <p>参考<a href="https://waf-ce.chaitin.cn/docs/guide/install">官方文档</a></p><h3 id="部署前环境检测"><a href="#部署前环境检测" class="headerlink" title="部署前环境检测"></a>部署前环境检测</h3><p><strong>最低配置需求</strong></p><ul><li>操作系统：Linux</li><li>指令架构：x86_64</li><li>软件依赖：Docker 20.10.14 版本以上</li><li>软件依赖：Docker Compose 2.0.0 版本以上</li><li>最小化环境：1 核 CPU &#x2F; 1 GB 内存 &#x2F; 5 GB 磁盘</li></ul><p>可以逐行执行以下命令来确认服务器配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">uname</span> -m                                    <span class="comment"># 查看指令架构</span></span><br><span class="line">docker version                              <span class="comment"># 查看 Docker 版本</span></span><br><span class="line">docker compose version                      <span class="comment"># 查看 Docker Compose 版本</span></span><br><span class="line">docker-compose version                      <span class="comment"># 老版本查看Compose 版本</span></span><br><span class="line"><span class="built_in">cat</span> /proc/cpuinfo| grep <span class="string">&quot;processor&quot;</span>         <span class="comment"># 查看 CPU 信息</span></span><br><span class="line">free -h                                     <span class="comment"># 查看内存信息</span></span><br><span class="line"><span class="built_in">df</span> -h                                       <span class="comment"># 查看磁盘信息</span></span><br><span class="line">lscpu | grep ssse3                          <span class="comment"># 确认CPU是否支持 ssse3 指令集</span></span><br></pre></td></tr></table></figure><p>关于docker环境的安装建议参考这篇<a href="https://u.sb/debian-install-docker/">博客</a></p><p><strong>我的部署环境</strong><br>服务器：阿里云服务器（2核2G）<br>操作系统：Debian 11</p><h3 id="安装雷池"><a href="#安装雷池" class="headerlink" title="安装雷池"></a>安装雷池</h3><p>官方提供的三种<strong>安装方式</strong>：</p><ul><li>在线安装 : 推荐方式，一行命令完成安装</li><li>离线安装 : 下载离线安装包，轻松完成安装</li><li>其他方式安装 : 使用牧云助手，点击即可完安装</li></ul><p>我采用<strong>在线安装</strong>，这也是官方推荐的安装方式，并使用华为云加速：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CDN=1 bash -c <span class="string">&quot;<span class="subst">$(curl -fsSLk https://waf-ce.chaitin.cn/release/latest/setup.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure><p>一行命令一键式安装，非常方便，最后有一连串<code>Started</code>，说明安装成功。<br>其他安装方式自行参考<a href="https://waf-ce.chaitin.cn/docs/guide/install">官方文档</a></p><h3 id="登录雷池"><a href="#登录雷池" class="headerlink" title="登录雷池"></a>登录雷池</h3><p>安装完成以后，理论上即可使用<code>https://&lt;waf-ip&gt;:9443</code>访问雷池。<br><strong>如果无法正常访问网址，请检查9443端口是否被占用和服务器安全组规则。</strong><br>需要使用<strong>支持 TOTP 的认证软件或者小程序</strong>扫描二维码获取动态口令登录：</p><ul><li>服务器和 totp 应用的时间必须保持一致，否则无法验证通过</li><li>完成首次登录后，无法回退查看二维码，使用页面提供的方法重置</li></ul><p>支持TOTP的认证软件在手机应用商店不容易搜到，可以在PC端下载<code>.apk</code>文件发送到手机端。我使用的是微软的<code>Authenticator</code>获取的口令，获取口令登录即可：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/01/65e14bca6af17.gif"/></div></div><p>接下来就可以开始配置防护站点了。</p>              </div>            </details><div class="tabs" id="配置防护站点"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="配置防护站点-1">无CDN进行部署</button><button type="button" class="tab " data-href="配置防护站点-2">存在CDN进行部署</button></ul><div class="tab-contents"><div class="tab-item-content active" id="配置防护站点-1"><p><strong>下面演示的是网站和WAF部署在同一服务器上。</strong>一般不建议这样做，因为这样单机的负载更高、设备宕机的概率更大。非纯净的环境还会提高升级失败的概率，故障排查更困难。但是由于我目前只有一台服务器，无法演示多台服务器。</p><p>以我服务器上的一些使用docker部署的站点为例，先讲讲无其他中间件（CDN）的站点配置。</p><p><a href="https://lsky.xxfer.cn/">小李图床</a><br>这是之前兴起用兰空图床搭建的，没套CDN。<br>具体步骤如下：</p><ol><li><code>域名解析到反向代理服务器</code>，即添加A记录指向反向代理服务器的ip。<div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/01/65e1bd753d88c.png"/></div></div></li><li>（非必须）反向代理，我用<code>Nginx Proxy Manager</code>做反代，并且让<code>反代指向雷池WAF</code>。<br>需要说明的是，雷池WAF的默认端口为9443，因此我们通过访问<code>http://雷池WAF所在服务器ip:9443</code>配置防护站点。使用docker部署的站点也有自己对应的端口，比如<code>小李图床</code>这个站点就是使用docker部署的，该容器映射出的端口假设为<code>a</code>，使用<code>http://小李图床所在服务器ip:a</code>就能访问小李图床。做了反向代理，<code>ip:port</code>就可以变成域名来访问。但是反代和站点部署在同一服务器，站点又是docker部署的，ip需要变为<code>172.17.0.1</code>，这是虚拟网卡docker0的ip，可以使用下面命令查看：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip addr show docker0</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/01/65e1bd8436713.png"/></div></div></li><li>雷池<code>防护站点</code>配置<br>配置时<code>注意两处端口a保持一致</code>，具体用哪一个端口，自定义，只要没有进程占用即可，<code>端口b为站点实际访问时所用端口</code>。上面也提到过，如果你的情况和我一样，使用docker部署的站点，且站点和反代为同一服务器，就按照上图使用<code>172.17.0.1</code>应该不会有问题。如果这些（反代、WAF、站点）部署于不同服务器上，就不应该是<code>172.17.0.1</code>了，项目部署在哪一个服务器上，就要使用对应服务器的ip。<div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/01/65e1bdb03a254.png"/></div></div></li></ol><p><strong>效果测试：</strong><br>尝试插入后门，输入下面url</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://lsky.xxfer.cn/webshell.php</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/01/65e1c2b410edf.png"/></div></div>进入雷池WAF后台，查看拦截信息<div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/01/65e1c2b128f20.png"/></div></div></div><div class="tab-item-content" id="配置防护站点-2"><p><a href="https://picsur.xxfer.cn/">Picsur图床</a><br>这个站点套了层CDN。其实配置原理和上面类似，总结为一句话就是：<br><strong>域名指向CDN，CDN指向雷池WAF映射出的端口，雷池WAF指向服务原始端口也就是上游服务器端口。</strong><br>很多同学大概率和我的情况不太一样，但是只要理解了WAF的架构模式，再看上面这句话应该可以结合自己的情况配置成功了。<br><strong>建议CDN回源协议选择SSL。</strong><br>具体步骤：</p><ol><li>域名解析到CDN<div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/01/65e1c92e9ddd3.png"/></div></div></li><li>CDN回源到雷池WAF<div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/01/65e1c9a89028c.png"/></div></div></li><li>再从WAF指向站点所在服务器和端口<div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/01/65e1c9bd87f1f.png"/></div></div></li></ol><p><strong>理解以后配置起来也挺快的。</strong></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="测试防护效果"><a href="#测试防护效果" class="headerlink" title="测试防护效果"></a>测试防护效果</h2><ul><li>确认网站可以正常访问</li><li>尝试手动模拟攻击：<br>模拟 SQL 注入，请访问<code>http://&lt;IP或域名&gt;:&lt;端口&gt;/?id=1%20AND%201=1</code><br>模拟 XSS，请访问<code>http://&lt;IP或域名&gt;:&lt;端口&gt;/?html=&lt;script&gt;alert(1)&lt;/script&gt;</code><br>通过浏览器，你将会看到雷池已经发现并阻断了攻击请求：<div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/01/65e1c2b410edf.png"/></div></div></li><li>还有自动化测试防护：<div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2023/12/26/658a8a208cbe9.jpg" alt="等待更新......" style="width:360px;"/></div></div></li></ul><h2 id="关于长亭雷池"><a href="#关于长亭雷池" class="headerlink" title="关于长亭雷池"></a>关于长亭雷池</h2><p>以上展示的只是雷池社区版（免费）的部分使用，当然也有付费的，有需要的同学自行了解。具体事宜请参考<a href="https://waf-ce.chaitin.cn/docs/guide/install">官方文档</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note orange anzhiyufont anzhiyu-icon-dengpao simple&quot;&gt;&lt;p&gt;去年其实就看到这个项目了，最早是在GitHub上看到的，当时只是star了，后来就给忘了。最近整理GitHub的时候又看到了，想想刚好可以用在服</summary>
      
    
    
    
    <category term="技术分享" scheme="https://blog.xxfer.cn/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="Docker" scheme="https://blog.xxfer.cn/tags/Docker/"/>
    
    <category term="网络安全" scheme="https://blog.xxfer.cn/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>利用Docker部署宝塔面板</title>
    <link href="https://blog.xxfer.cn/posts/b10237dc.html"/>
    <id>https://blog.xxfer.cn/posts/b10237dc.html</id>
    <published>2024-02-25T15:05:00.000Z</published>
    <updated>2024-02-28T12:33:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么使用Docker部署宝塔？"><a href="#为什么使用Docker部署宝塔？" class="headerlink" title="为什么使用Docker部署宝塔？"></a>为什么使用Docker部署宝塔？</h2><ul><li>环境隔离，一个主机可以部署多套服务</li><li>宝塔对主机控制度较高，依赖关系复杂，而 Docker 可以保证宝塔服务不影响到宿主机其他服务。</li><li>由于和宿主机环境隔离，不容易被木马攻击。</li><li>宝塔面板的兼容性顺序为 Centos7.x &gt; Debian10 &gt; Ubuntu 20.04 &gt; Cenots8.x &gt; Ubuntu 18.04 &gt; 其它系统，而用户的主机五花八门，为了获取最佳的兼容性，使用 Docker 部署是不二选择。</li><li>Docker 管理成本低，方便迁移。</li><li>可随时管理容器，无需重置服务器。</li></ul><h2 id="部署环境"><a href="#部署环境" class="headerlink" title="部署环境"></a>部署环境</h2><p>服务器：阿里云服务器<br>操作系统：Debian 11</p><div class="note orange anzhiyufont anzhiyu-icon-dengpao simple"><p>部署之前，请确保服务器已安装Docker和Docker-compose环境，没有安装的请参考这篇<a href="https://u.sb/debian-install-docker/">博客</a></p></div><h2 id="开始部署——参考文档"><a href="#开始部署——参考文档" class="headerlink" title="开始部署——参考文档"></a>开始部署——<a href="https://developer.aliyun.com/article/1355064">参考文档</a></h2><h3 id="安装宝塔面板"><a href="#安装宝塔面板" class="headerlink" title="安装宝塔面板"></a>安装宝塔面板</h3><ul><li><p>创建一下安装的目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo -i</span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> -p /root/data/docker_data/bt-data</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /root/data/docker_data/bt-data</span><br></pre></td></tr></table></figure></li><li><p>编写yaml文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim docker-compose.yml</span><br></pre></td></tr></table></figure><p>英文输入法下，按 <code>i</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">bt:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">btpanel/baota:lnmp</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">bt</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;8888:8888&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;888:888&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;80:80&#x27;</span>  <span class="comment"># 保持默认即可，不建议修改左侧的80</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;443:443&#x27;</span>  <span class="comment"># 保持默认即可，不建议修改左侧的443</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PUID=1000</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PGID=1000</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_ROOT_PASSWORD=bt</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_DATABASE=bt</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_USER=bt</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_PASSWORD=bt</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">BTPANEL_KEY=your_key</span>  <span class="comment"># 替换为你的宝塔面板密钥。</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./database:/root/mysql/</span>  <span class="comment"># 冒号左边可以改路径，现在是表示把数据存放在在当前文件夹下的 database 文件夹中，以此类推</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./www:/www/wwwroot/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./config:/www/server/panel/data/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./ssl:/www/server/panel/vhost/cert/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./logs:/www/server/panel/logs/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./backup:/www/backup/</span></span><br></pre></td></tr></table></figure><p>按一下 <code>esc</code>，然后 <code>:wq</code> 保存退出。</p></li><li><p>打开服务器防火墙并访问网页<strong>（非必需但很重要）</strong></p></li></ul><p><strong>确保自己使用的服务器已经将上面的yaml文件中的端口都开启了</strong>，否则后面网页会访问不了。</p><p>有的服务器厂商默认关闭不常用的端口，所以需要手动打开。阿里云服务器是在安全组中添加规则开放端口，可以参考<a href="https://developer.aliyun.com/article/1209367">这里</a>，最好是参考所使用服务商提供的官方文档。</p><h3 id="运行并访问宝塔面板"><a href="#运行并访问宝塔面板" class="headerlink" title="运行并访问宝塔面板"></a>运行并访问宝塔面板</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/data/docker_data/bt-data   <span class="comment"># 来到 dockercompose 文件所在的文件夹下</span></span><br><span class="line"></span><br><span class="line">docker-compose up -d </span><br></pre></td></tr></table></figure><p>开启成功以后，理论上就可以输入 <code>http:// + 服务器ip:8888</code> 访问了。</p><p>默认登陆名和密码：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Username: admin</span><br><span class="line">Password: bt.cn</span><br></pre></td></tr></table></figure><div class="note red anzhiyufont anshiyu-icon-dengpao simple"><ol><li>不知道服务器 IP，可以直接在命令行输入：curl ip.sb，会显示当前服务器的 IP。</li><li>遇到访问不了的情况，请再次检查在服务商的后台防火墙<strong>是否打开对应了端口</strong>。</li></ol></div><h2 id="今后更新宝塔面板"><a href="#今后更新宝塔面板" class="headerlink" title="今后更新宝塔面板"></a>今后更新宝塔面板</h2><p>Docker部署的应用更新都很方便</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/data/docker_data/bt-data</span><br><span class="line"></span><br><span class="line">docker-compose down </span><br><span class="line"></span><br><span class="line"><span class="built_in">cp</span> -r /root/data/docker_data/bt-data /root/data/docker_data/bt.archive  <span class="comment"># 万事先备份，以防万一</span></span><br><span class="line"></span><br><span class="line">docker-compose pull</span><br><span class="line"></span><br><span class="line">docker-compose up -d    <span class="comment"># 请不要使用 docker-compose stop 来停止容器，因为这么做需要额外的时间等待容器停止；docker-compose up -d 直接升级容器时会自动停止并立刻重建新的容器，完全没有必要浪费那些时间。</span></span><br><span class="line"></span><br><span class="line">docker image prune  <span class="comment"># prune 命令用来删除不再使用的 docker 对象。删除所有未被 tag 标记和未被容器使用的镜像</span></span><br></pre></td></tr></table></figure><p>提示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">WARNING! This will remove all dangling images.</span><br><span class="line">Are you sure you want to <span class="built_in">continue</span>? [y/N] </span><br></pre></td></tr></table></figure><p>输入 <code>y</code></p><h2 id="卸载宝塔面板"><a href="#卸载宝塔面板" class="headerlink" title="卸载宝塔面板"></a>卸载宝塔面板</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/data/docker_data/bt-data</span><br><span class="line"></span><br><span class="line">docker-compose down </span><br><span class="line"></span><br><span class="line"><span class="built_in">rm</span> -rf /root/data/docker_data/bt-data  <span class="comment"># 完全删除映射到本地的数据</span></span><br></pre></td></tr></table></figure><p>可以卸载得很干净。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;为什么使用Docker部署宝塔？&quot;&gt;&lt;a href=&quot;#为什么使用Docker部署宝塔？&quot; class=&quot;headerlink&quot; title=&quot;为什么使用Docker部署宝塔？&quot;&gt;&lt;/a&gt;为什么使用Docker部署宝塔？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;环境隔离，一个主</summary>
      
    
    
    
    <category term="技术分享" scheme="https://blog.xxfer.cn/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="Docker" scheme="https://blog.xxfer.cn/tags/Docker/"/>
    
    <category term="ECS" scheme="https://blog.xxfer.cn/tags/ECS/"/>
    
    <category term="自建应用项目" scheme="https://blog.xxfer.cn/tags/%E8%87%AA%E5%BB%BA%E5%BA%94%E7%94%A8%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>GitHub首页DIY：花里胡哨指数++</title>
    <link href="https://blog.xxfer.cn/posts/86bbdefa.html"/>
    <id>https://blog.xxfer.cn/posts/86bbdefa.html</id>
    <published>2024-01-20T00:00:00.000Z</published>
    <updated>2024-03-18T21:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note blue anzhiyufont anzhiyu-icon-fan simple"><p>终于算是把之前挖的坑填了，上学期只是把首页CV过来，有好些内容都不是自己的，而且也不是很熟悉，现在放假回家又可以好好折腾了😋。也算是花了一点时间，把GitHub首页搞好了，第一时间分享给大家，顺便做个记录。相信很多童靴也像我一样，在敲代码之余，都致力于美化自身所处的环境。比如对IDE的美化，对电脑壁纸的精挑细选等等。</p></div><p><strong>终于知道为什么网上关于GitHub Profile的详细教程那么少了，真的不好写。所以如果本篇文章对你有帮助，能在GitHub给个免费star吗？</strong></p><h2 id="话不多说，先上成果！"><a href="#话不多说，先上成果！" class="headerlink" title="话不多说，先上成果！"></a>话不多说，先上成果！</h2><p>奉上源库地址和截图：</p><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://github.com/JJLibra">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://www.freeimg.cn/i/2023/12/23/6586e75c86de7.png)">          <i class="anzhiyufont anzhiyu-icon-link" style="display: none"></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">GitHub Profile</div>            <div class="tag-link-sitename">xxfer</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><details class="folding-tag" yellow><summary> 完整截图（建议点击图片放大看） </summary>              <div class='content'>              <div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/18/65f83b98c6bcc.jpg"/></div></div>              </div>            </details><p>如果喜欢，欢迎 CV 昂哈哈哈，能给我一个star就更好了。其实我的主页搞得有点过于花哨了，没必要，大家各取所需即可。</p><h2 id="开始花里胡哨"><a href="#开始花里胡哨" class="headerlink" title="开始花里胡哨"></a>开始花里胡哨</h2><details class="folding-tag" yellow><summary> 准备工作 </summary>              <div class='content'>              <p>其实GitHub首页DIY也很简单</p><ul><li>只需要新建一个仓库名和自己 Github 用户名相同的仓库并且添加一个<code>README.md</code>自述文件即可<div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/01/6592ad6165b65.png"/></div></div></li><li>GitHub默认为此文件添加了demo，我们编辑此文件，即可开启自己的DIY之路了！<div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/01/6592ad5470a5d.png"/></div></div></li><li>添加以后<div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/01/6592ad70d3030.png"/></div></div></li></ul><p><strong>所以说，GitHub的首页DIY实际上就是对<code>README.md</code>文件进行DIY</strong></p>              </div>            </details><div class="note orange anzhiyufont anzhiyu-icon-dengpao simple"><p>Github提供了这样一个特殊的markdown文件以供我们DIY主页，扩展性很高，如果熟悉HTML，CSS以及MarkDown 语法的话。资源的调用与布局不一一解释，相信看本篇博客的同学已有HTML的基础。</p></div><details class="folding-tag" yellow><summary> 无需配置Token即可使用 </summary>              <div class='content'>              <div class="note orange anzhiyufont anzhiyu-icon-dengpao simple"><p>这一部分不使用GitHub Actions，也就不需要使用Token，复制链接调整参数即可使用。</p></div><p><strong>注意下面的例子使用的一般是我的username，大家更换成自己的即可</strong></p><h3 id="开头打字特效"><a href="#开头打字特效" class="headerlink" title="开头打字特效"></a>开头打字特效</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/20/65aaab2744ed0.png"/></div></div><p>emmmm…对，就是这样的循环打字特效，很炫酷 –&gt; <a href="https://github.com/DenverCoder1/readme-typing-svg">源码传送门</a><br>可以使用官方给的<a href="https://readme-typing-svg.demolab.com/demo/">Demo site</a>，预览效果，然后直接复制代码即可。<br>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://blog.xxfer.cn/&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://readme-typing-svg.demolab.com?font=Fira+Code&amp;pause=1000&amp;width=435&amp;lines=console.log(%22Hello%2C%20World%22);小李今天又在努力变强鸭~&amp;center=true&amp;size=27&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="GitHub-Stats-Card"><a href="#GitHub-Stats-Card" class="headerlink" title="GitHub Stats Card"></a>GitHub Stats Card</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/20/65aaab9ac49ae.png"/></div></div><p>在<code>README.md</code>文件中获取动态生成的 GitHub 统计信息 –&gt; <a href="https://github.com/anuraghazra/github-readme-stats">源码传送门</a><br>这里建议看官方的README介绍，并不难，觉得看英文累，用浏览器的翻译就行。<br>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">height</span>=<span class="string">&quot;190px&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://github-readme-stats.vercel.app/api?username=JJLibra&amp;theme=radical&amp;show_icons=true&amp;count_private=true&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Most-used-languages"><a href="#Most-used-languages" class="headerlink" title="Most used languages"></a>Most used languages</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/20/65aaae64f06cf.png"/></div></div><p>在<code>README.md</code>文件中添加使用编程语言对比统计图 –&gt; <a href="https://github.com/anuraghazra/github-readme-stats">源码传送门</a><br>和上面的是同一个网址，还是建议直接看官方文档。<br>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">height</span>=<span class="string">&quot;190px&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://github-readme-stats-git-masterrstaa-rickstaa.vercel.app/api/top-langs/?username=JJLibra&amp;theme=radical&amp;show_icons=true&amp;count_private=true&amp;layout=compact&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="GitHub-streak"><a href="#GitHub-streak" class="headerlink" title="GitHub streak"></a>GitHub streak</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/20/65aab077e84f9.png"/></div></div><p>在<code>README.md</code>文件中展示连续提交代码的次数 –&gt; <a href="https://github.com/DenverCoder1/github-readme-streak-stats">源码传送门</a><br>可以使用官方给的<a href="https://streak-stats.demolab.com/">Demo site</a>，预览效果，复制代码即可。<br>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://github-readme-streak-stats.herokuapp.com/?user=JJLibra&amp;theme=default&amp;hide_border=true&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Github-Profile-Trophy"><a href="#Github-Profile-Trophy" class="headerlink" title="Github Profile Trophy"></a>Github Profile Trophy</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/20/65aaaf1e2d84c.png"/></div></div><p>添加奖杯信息 –&gt; <a href="https://github.com/ryo-ma/github-profile-trophy/">源码传送门</a><br>官方给出了很多主题配色，可以都试一下，喜欢哪一种就用哪一种。<br>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">alig</span> <span class="attr">src</span>=<span class="string">&quot;https://github-profile-trophy.vercel.app/?username=JJLibra&amp;theme=juicyfresh&amp;column=9&amp;rank=-U&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="GitHub-Readme-Activity-Graph"><a href="#GitHub-Readme-Activity-Graph" class="headerlink" title="GitHub Readme Activity Graph"></a>GitHub Readme Activity Graph</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/20/65aab6397a3ff.png"/></div></div><p>动态生成的活动图，用于显示过去 31 天的 GitHub 活动 –&gt; <a href="https://github.com/Ashutosh00710/github-readme-activity-graph/">源码传送门</a></p><p>同样，可以选择主题配色和自定义元素颜色，详情参考官方文档。<br>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://github-readme-activity-graph.vercel.app/graph?username=JJLibra&amp;custom_title=Xxfer&#x27;s%20GitHub%20Activity%20Graph&amp;bg_color=141321&amp;color=A9FEF7&amp;line=626069&amp;point=F8D847&amp;area_color=FE428E&amp;title_color=FE428E&amp;area=true&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Spotify"><a href="#Spotify" class="headerlink" title="Spotify"></a>Spotify</h3><p><strong>我没有使用，因为不常用spotify</strong></p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/20/65ab6ae05b4ff.png"/></div></div><p>可以在 GitHub 首页中展示最近在 spotify 中听过的音乐 –&gt; <a href="https://github.com/kittinan/spotify-github-profile">源码传送门</a><br>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://spotify-github-profile.vercel.app/api/view?uid=31k53kp6hgkbovg72427dya5av44&amp;cover_image=true&amp;theme=default&amp;show_offline=false&amp;background_color=121212&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Joke"><a href="#Joke" class="headerlink" title="Joke"></a>Joke</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/20/65ab6cd12137e.png"/></div></div><p>可以在 GitHub 首页中展示一些关于 IT 行业的笑话 –&gt; <a href="https://github.com/ABSphreak/readme-jokes">源码传送门</a><br>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://readme-jokes.vercel.app/api?hideBorder&amp;bgColor=%23121212&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Jokes Card&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Quotes"><a href="#Quotes" class="headerlink" title="Quotes"></a>Quotes</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/20/65ab6cd127827.png"/></div></div><p>可以在 GitHub 首页中随机展示一段名人名言 –&gt; <a href="https://github.com/ABSphreak/readme-jokes">源码传送门</a><br>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://quotes-github-readme.vercel.app/api?type=horizontal&amp;theme=dark&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Shields-徽章"><a href="#Shields-徽章" class="headerlink" title="Shields 徽章"></a>Shields 徽章</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/20/65aab76e4ce05.png"/></div></div><p>为开源项目生成高质量小徽章图标，直接复制链接使用 –&gt; <a href="https://shields.io/">传送门</a><br>例：<br>HTML5</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://img.shields.io/badge/-HTML5-E34F26?style=flat-square&amp;logo=html5&amp;logoColor=white&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>CSS3</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://img.shields.io/badge/-CSS3-1572B6?style=flat-square&amp;logo=css3&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>JS</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://img.shields.io/badge/-JavaScript-oringe?style=flat-square&amp;logo=javascript&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>相信聪明的同学对比一下就能领会使用方法，其实就是通过<strong>改变参数</strong>制作徽标。可以参考这篇<a href="https://sspai.com/post/59593">文章</a><br>其中，logo参数和颜色都可以在这个<a href="https://simpleicons.org/">网站</a>搜索到，还支持下载svg和pgf，一并安利给大家。建议把<code>style</code>设为<code>flat</code>。</p><p>另外，制作徽标的网站不止Shields，推荐以下几个比较好用的：</p><ul><li><a href="https://badgen.net/">Badgen</a></li><li><a href="https://forthebadge.com/">Forthebadge</a></li><li><a href="https://badge.fury.io/">Version Badge</a></li></ul><h3 id="Visitor-Badge"><a href="#Visitor-Badge" class="headerlink" title="Visitor Badge"></a>Visitor Badge</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/20/65aabcfa488e4.png"/></div></div><p>这个徽章会实时改变，记录此页面被访问的次数 –&gt; <a href="https://visitor-badge.glitch.me/">传送门</a><br>修改一下<code>username</code>就能使用。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://komarev.com/ghpvc/?username=JJLibra&amp;label=Views&amp;color=0e75b6&amp;style=flat&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;访问量统计&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="社交统计"><a href="#社交统计" class="headerlink" title="社交统计"></a>社交统计</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/20/65aac0b5c9d39.png"/></div></div><p>在<code>README.md</code>文件中展示你在一些流行的网站的数据 –&gt; <a href="https://github.com/songquanpeng/stats-cards">传送门</a><br>目前API只支持一部分网站，不过可以把项目部署到自己的服务器，来监控自己服务器上部署的网站，具体参考官方文档。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://stats.justsong.cn/api/leetcode/?username=quanpeng&amp;theme=dark&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" yellow><summary> 需要配置Token配合GitHub Actions才能使用 </summary>              <div class='content'>              <div class="note orange anzhiyufont anzhiyu-icon-dengpao simple"><p>这一部分需要用到GitHub Actions来更新动态数据，部分GitHub Actions需要配置Token。</p></div><h3 id="3D-Contribution"><a href="#3D-Contribution" class="headerlink" title="3D Contribution"></a>3D Contribution</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/20/65ab72bf37cc4.png"/></div></div><p>在<code>README.md</code>文件中展示3D的贡献日历 –&gt; <a href="https://github.com/yoshi389111/github-profile-3d-contrib">源码传送门</a></p><p><strong>原理：利用GitHub Actions定时更新仓库中对应的svg，README文件中引用的svg也会跟着变化。</strong></p><ol><li>在项目根目录下创建<code>/.github/workflows/3D-contrib.yml</code>文件，将以下代码复制到该文件中：<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">3D</span> <span class="string">Contrib</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">schedule:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">cron:</span> <span class="string">&quot;0 21 * * *&quot;</span> <span class="comment">#更新时间</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">permissions:</span></span><br><span class="line">  <span class="attr">contents:</span> <span class="string">write</span></span><br><span class="line">  <span class="attr">pages:</span> <span class="string">write</span></span><br><span class="line">    </span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">generate-github-profile-3d-contrib</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">yoshi389111/github-profile-3d-contrib@0.7.0</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">GITHUB_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">USERNAME:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.repository_owner</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Commit</span> <span class="string">&amp;</span> <span class="string">Push</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          git config user.name github-actions</span></span><br><span class="line"><span class="string">          git config user.email github-actions@github.com</span></span><br><span class="line"><span class="string">          git add -A .</span></span><br><span class="line"><span class="string">          git commit -m &quot;generated&quot;</span></span><br><span class="line"><span class="string">          git push</span></span><br></pre></td></tr></table></figure></li><li>不需要额外的Token，文件中的<code>GITHUB_TOKEN</code>是工作流自动创建的令牌。</li><li>创建完提交代码到仓库，并尝试运行，看看是否配置成功</li></ol><ul><li>进入Setting旁边的<code>Action</code><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/20/65ab88b30456b.png"/></div></div></li><li>选择<code>3D Contrib</code>，然后<code>Run workflow</code>。</li></ul><ol start="4"><li>在<code>README.md</code>文件中引用<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/gh/JJLibra/JJLibra/profile-3d-contrib/profile-night-rainbow.svg&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="Snake-Contribution"><a href="#Snake-Contribution" class="headerlink" title="Snake Contribution"></a>Snake Contribution</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/20/65ab7608f3fc9.png"/></div></div><p>在<code>README.md</code>文件中展示贪吃蛇贡献日历 –&gt; <a href="https://github.com/marketplace/actions/generate-snake-game-from-github-contribution-grid">源码传送门</a></p><p><strong>原理：利用GitHub Actions定时更新仓库中对应的svg，README文件中引用的svg也会跟着变化。</strong></p><ol><li>在项目根目录下创建<code>/.github/workflows/Snake-contrib.yml</code>文件，将以下代码复制到该文件中：<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Snake</span> <span class="string">Contrib</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">schedule:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">cron:</span> <span class="string">&quot;0 20 * * *&quot;</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">generate:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">environment:</span> </span><br><span class="line">        <span class="attr">name:</span> <span class="string">GH_TOKEN</span></span><br><span class="line">    <span class="attr">timeout-minutes:</span> <span class="number">10</span></span><br><span class="line">    </span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">generate</span> <span class="string">github-contribution-grid-snake.svg</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">aelassas/snk/svg-only@main</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">github_user_name:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.repository_owner</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">outputs:</span> <span class="string">|</span></span><br><span class="line"><span class="string">            dist/profile-snake-contrib/github-contribution-grid-snake.svg</span></span><br><span class="line"><span class="string">            dist/profile-snake-contrib/github-contribution-grid-snake-dark.svg?palette=github-dark</span></span><br><span class="line"><span class="string"></span>            </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">push</span> <span class="string">github-contribution-grid-snake.svg</span> <span class="string">to</span> <span class="string">the</span> <span class="string">output</span> <span class="string">branch</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">crazy-max/ghaction-github-pages@v3.1.0</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">target_branch:</span> <span class="string">main</span></span><br><span class="line">          <span class="attr">build_dir:</span> <span class="string">dist</span></span><br><span class="line">          <span class="attr">keep_history:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">GITHUB_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GH_TOKEN</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure></li><li>我采用的是environment里的secret，可能和其他教程不太一样，不过是可行的</li></ol><details class="folding-tag" yellow><summary> 生成一个Token令牌 </summary>              <div class='content'>              <ul><li>右上角头像，进入setting<div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/13/65a25240c1608.png" style="width:800px;"/></div></div></li><li>进入左侧栏底部的Deployer settings<div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/13/65a2523fd5dd3.png" style="width:800px;"/></div></div></li><li>新建Token<div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/13/65a25240cb6b6.png" style="width:800px;"/></div></div></li><li>选择参数后点击下面的创建，<strong>然后会生成一串字符，就是你的Token，只会出现一次，建议暂时不要关闭这个页面</strong><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/13/65a25240cd411.png" style="width:800px;"/></div></div>注意上图的第三步建议前三个都勾选，如果不清楚含义，可以全部勾选</li></ul>              </div>            </details><details class="folding-tag" yellow><summary> 将Token添加到Environment secrets </summary>              <div class='content'>              <ul><li>进入仓库的<code>Setting</code><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/20/65ab88b30456b.png"/></div></div></li><li>打开<code>Action</code><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/20/65ab890150fee.png"/></div></div></li><li>把刚才生成的<code>Token</code>添加到<code>Environment secrets</code>，注意<code>Secret</code>的名字要和上面的yml文件中的<code>name</code>一致，为<code>GH_TOKEN</code>，否则会报错。<div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/20/65ab89a17a5d2.png"/></div></div></li></ul>              </div>            </details><ol start="3"><li>创建完提交代码到仓库，并尝试运行，看看是否配置成功。如果报错了，多半是因为<code>Secret</code>没有配置正确，检查一下。<strong>也可以在评论区交流。</strong><br>可能遇到的问题：</li></ol><ul><li>设置的<code>Environment secrets</code>的<code>name</code>与yml文件中的<code>environment name</code>不一致，重新设置一下，最后的样子就是下面框框内<div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/20/65ab89a17a5d2.png"/></div></div></li><li>运行成功以后可能git提交会报错，是因为Action生成了新的svg文件，导致远程仓库与本地内容不一致，使用下面代码应该可以解决<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;update&quot;</span></span><br><span class="line">git fetch</span><br><span class="line">git merge origin FETCH_HEAD</span><br><span class="line">git push</span><br></pre></td></tr></table></figure></li><li><strong>权限问题：</strong>本篇博客中的部分GitHub Actions需要修改（读+写）权限<br>解决方法：点击仓库的<code>setting</code>–&gt;<code>Actions</code>–&gt;<code>General</code>–&gt;勾选<code>Read and write permissions</code>–&gt;<code>Save</code><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/22/65ad4e82dfff2.png"/></div></div></li></ul><ol start="4"><li>在<code>README.md</code>文件中引用，这里只是一个例子，大家举一反三玩出新花样。<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;github-snake&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/gh/JJLibra/JJLibra/profile-snake-contrib/github-contribution-grid-snake-dark.svg&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="Fork-Star"><a href="#Fork-Star" class="headerlink" title="Fork&amp;Star"></a>Fork&amp;Star</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/20/65ab7be633b5f.png"/></div></div><p>在仓库介绍显示fork数和star数</p><ol><li>在项目根目录下创建<code>/.github/workflows/fork&amp;star.yml</code>文件，将以下代码复制到该文件中：<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Update</span> <span class="string">Fork</span> <span class="string">Star</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">fork:</span></span><br><span class="line">  <span class="attr">watch:</span></span><br><span class="line">    <span class="attr">types:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">started</span></span><br><span class="line">  <span class="attr">schedule:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">cron:</span> <span class="string">&#x27;0 0 * * *&#x27;</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">update:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">environment:</span> </span><br><span class="line">        <span class="attr">name:</span> <span class="string">ACCESS_TOKEN</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">This</span> <span class="string">repo</span> <span class="string">has</span> <span class="string">x</span> <span class="string">stars</span> <span class="string">y</span> <span class="string">forks</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">ouuan/This-repo-has-x-stars-y-forks-action@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.ACCESS_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">template:</span> <span class="string">&quot;Xxfer&#x27;s profile with &lt;starCount&gt; stars and &lt;forkCount&gt; forks 🎉&quot;</span></span><br></pre></td></tr></table></figure></li><li>按照上文的方法再生成一个新的Token</li><li>按上文步骤在仓库的Setting-&gt;Secrets-&gt;Actions-&gt;Environment secrets中添加<code>ACCESS_TOKEN</code><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/20/65ab91b97e2aa.png"/></div></div></li><li>创建完提交代码到仓库，并尝试运行，看看是否配置成功。</li><li>这个不显示在<code>README.md</code>文件中，不需要引用。</li></ol><h3 id="Metrics"><a href="#Metrics" class="headerlink" title="Metrics"></a>Metrics</h3><p>生成的东西有点多，建议看我的源码<code>github-metrics</code>文件夹，里面有很多的svg文件。<br>在 GitHub首页展示比较具体的使用信息 –&gt; <a href="https://github.com/lowlighter/metrics">源码传送门</a><br><a href="https://metrics.lecoq.io/">Demo site</a></p><p><strong>原理：利用GitHub Actions定时更新仓库中对应的svg，README文件中引用的svg也会跟着变化。</strong></p><ol><li>在项目根目录下创建<code>/.github/workflows/metrics.yml</code>文件，将以下代码复制到该文件中：<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Metrics</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">schedule:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">cron:</span> <span class="string">&quot;0 0 * * *&quot;</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line">  <span class="comment"># push: &#123;branches: [&quot;master&quot;, &quot;main&quot;]&#125;</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">github-metrics:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">environment:</span> </span><br><span class="line">      <span class="attr">name:</span> <span class="string">METRICS_TOKEN</span></span><br><span class="line">    <span class="attr">permissions:</span></span><br><span class="line">      <span class="attr">contents:</span> <span class="string">write</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="comment"># 基础信息（顺带了几个小插件）</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">base</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">lowlighter/metrics@latest</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">filename:</span> <span class="string">github-metrics/base.svg</span></span><br><span class="line">          <span class="comment"># Your GitHub token</span></span><br><span class="line">          <span class="attr">token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.METRICS_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="comment"># Options</span></span><br><span class="line">          <span class="attr">user:</span> <span class="string">JJLibra</span></span><br><span class="line">          <span class="attr">template:</span> <span class="string">classic</span></span><br><span class="line">          <span class="attr">config_timezone:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line">          <span class="attr">base:</span> <span class="string">&quot;header, activity, community, repositories&quot;</span></span><br><span class="line">          <span class="comment"># 此插件为文档中的 🧮 Repositories traffic</span></span><br><span class="line">          <span class="attr">plugin_traffic:</span> <span class="literal">yes</span></span><br><span class="line">          <span class="comment"># 此插件为文档中的 👨‍💻 Lines of code changed</span></span><br><span class="line">          <span class="attr">plugin_lines:</span> <span class="literal">yes</span></span><br><span class="line">          <span class="comment"># 此插件为文档中的 🙋 Introduction</span></span><br><span class="line">          <span class="attr">plugin_introduction:</span> <span class="literal">yes</span></span><br><span class="line">          <span class="comment"># 此插件为文档中的 🎫 Gists</span></span><br><span class="line">          <span class="attr">plugin_gists:</span> <span class="literal">yes</span></span><br><span class="line">          <span class="comment"># 此插件为文档中的 💫 Star lists</span></span><br><span class="line">          <span class="attr">plugin_starlists:</span> <span class="literal">yes</span></span><br><span class="line">          <span class="attr">plugin_starlists_limit_repositories:</span> <span class="number">2</span></span><br><span class="line">          <span class="attr">plugin_starlists_languages:</span> <span class="literal">yes</span></span><br><span class="line">          <span class="attr">plugin_starlists_limit_languages:</span> <span class="number">8</span></span><br><span class="line">          <span class="attr">plugin_starlists_only:</span> <span class="string">Awesome</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 📅 Isometric commit calendar</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Full-year</span> <span class="string">calendar</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">lowlighter/metrics@latest</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">filename:</span> <span class="string">github-metrics/isocalendar.fullyear.svg</span></span><br><span class="line">          <span class="attr">token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.METRICS_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="comment"># 不添加基础信息</span></span><br><span class="line">          <span class="attr">base:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">          <span class="comment"># 使用此插件</span></span><br><span class="line">          <span class="attr">plugin_isocalendar:</span> <span class="literal">yes</span></span><br><span class="line">          <span class="comment"># 设置成显示整年</span></span><br><span class="line">          <span class="attr">plugin_isocalendar_duration:</span> <span class="string">full-year</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 🈷️ Languages activity</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Indepth</span> <span class="string">analysis</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">lowlighter/metrics@latest</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">filename:</span> <span class="string">github-metrics/languages.indepth.svg</span></span><br><span class="line">          <span class="attr">token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.METRICS_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">base:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">          <span class="attr">plugin_languages:</span> <span class="literal">yes</span></span><br><span class="line">          <span class="attr">plugin_languages_ignored:</span> <span class="string">&gt;-</span></span><br><span class="line"><span class="string">            html, css, tex, less, dockerfile, makefile, qmake, lex, cmake, shell,</span></span><br><span class="line"><span class="string">            gnuplot</span></span><br><span class="line"><span class="string"></span>          <span class="attr">plugin_languages_indepth:</span> <span class="literal">yes</span></span><br><span class="line">          <span class="attr">plugin_languages_details:</span> <span class="string">lines,</span> <span class="string">bytes-size</span></span><br><span class="line">          <span class="attr">plugin_languages_limit:</span> <span class="number">4</span></span><br><span class="line">          <span class="attr">plugin_languages_analysis_timeout:</span> <span class="number">15</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># ✨ Stargazers   </span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Using</span> <span class="string">chartist</span> <span class="string">charts</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">lowlighter/metrics@latest</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">filename:</span> <span class="string">github-metrics/stargazers.chartist.svg</span></span><br><span class="line">          <span class="attr">token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.METRICS_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">base:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">          <span class="attr">plugin_stargazers:</span> <span class="literal">yes</span></span><br><span class="line">          <span class="attr">plugin_stargazers_charts_type:</span> <span class="string">chartist</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 🌟 Recently starred repositories</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Recently</span> <span class="string">starred</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">lowlighter/metrics@latest</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">filename:</span> <span class="string">github-metrics/stars.svg</span></span><br><span class="line">          <span class="attr">token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.METRICS_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">base:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">          <span class="attr">plugin_stars:</span> <span class="literal">yes</span></span><br><span class="line">          <span class="attr">plugin_stars_limit:</span> <span class="number">10</span></span><br><span class="line">          </span><br><span class="line">      <span class="comment"># 💡 Coding habits and activity</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Recent</span> <span class="string">activity</span> <span class="string">charts</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">lowlighter/metrics@latest</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">filename:</span> <span class="string">github-metrics/habits.charts.svg</span></span><br><span class="line">          <span class="attr">token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.METRICS_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">base:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">          <span class="attr">plugin_habits:</span> <span class="literal">yes</span></span><br><span class="line">          <span class="attr">plugin_habits_facts:</span> <span class="literal">no</span></span><br><span class="line">          <span class="attr">plugin_habits_charts:</span> <span class="literal">yes</span></span><br><span class="line">          <span class="attr">config_timezone:</span> <span class="string">Europe/Paris</span></span><br><span class="line">          </span><br><span class="line">      <span class="comment"># 🎟️ Follow-up of issues and pull requests </span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Indepth</span> <span class="string">analysis</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">lowlighter/metrics@latest</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">filename:</span> <span class="string">github-metrics/followup.indepth.svg</span></span><br><span class="line">          <span class="attr">token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.METRICS_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">base:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">          <span class="attr">plugin_followup:</span> <span class="literal">yes</span></span><br><span class="line">          <span class="attr">plugin_followup_indepth:</span> <span class="literal">yes</span></span><br><span class="line">          </span><br><span class="line">      <span class="comment"># 🎭 Comment reactions</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Comment</span> <span class="string">reactions</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">lowlighter/metrics@latest</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">filename:</span> <span class="string">github-metrics/reactions.svg</span></span><br><span class="line">          <span class="attr">token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.METRICS_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">base:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">          <span class="attr">plugin_reactions:</span> <span class="literal">yes</span></span><br><span class="line">          <span class="attr">plugin_reactions_limit:</span> <span class="number">100</span></span><br><span class="line">          <span class="attr">plugin_reactions_details:</span> <span class="string">percentage</span></span><br><span class="line">          </span><br><span class="line">      <span class="comment"># 📓 Featured repositories</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Pinned</span> <span class="string">repositories</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">lowlighter/metrics@latest</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">filename:</span> <span class="string">github-metrics/repositories.pinned.svg</span></span><br><span class="line">          <span class="attr">token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.METRICS_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">base:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">          <span class="attr">plugin_repositories:</span> <span class="literal">yes</span></span><br><span class="line">          <span class="attr">plugin_repositories_pinned:</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 💬 Discussions</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">GitHub</span> <span class="string">Discussions</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">lowlighter/metrics@latest</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">filename:</span> <span class="string">github-metrics/discussions.svg</span></span><br><span class="line">          <span class="attr">token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.METRICS_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">base:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">          <span class="attr">plugin_discussions:</span> <span class="literal">yes</span></span><br><span class="line">          <span class="attr">plugin_discussions_categories_limit:</span> <span class="number">8</span>       </span><br><span class="line">  </span><br><span class="line">      <span class="comment"># 📆 Commit calendar</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Full</span> <span class="string">history</span> <span class="string">calendar</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">lowlighter/metrics@latest</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">filename:</span> <span class="string">github-metrics/calendar.full.svg</span></span><br><span class="line">          <span class="attr">token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.METRICS_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">base:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">          <span class="attr">plugin_calendar:</span> <span class="literal">yes</span></span><br><span class="line">          <span class="attr">plugin_calendar_limit:</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 🏆 Achievements</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Compact</span> <span class="string">display</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">lowlighter/metrics@latest</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">filename:</span> <span class="string">github-metrics/achievements.compact.svg</span></span><br><span class="line">          <span class="attr">token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.METRICS_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">base:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">          <span class="attr">plugin_achievements:</span> <span class="literal">yes</span></span><br><span class="line">          <span class="attr">plugin_achievements_only:</span> <span class="string">&gt;-</span></span><br><span class="line"><span class="string">            polyglot, stargazer, sponsor, deployer, member, maintainer, developer,</span></span><br><span class="line"><span class="string">            scripter, packager, explorer, infographile, manager</span></span><br><span class="line"><span class="string"></span>          <span class="attr">plugin_achievements_display:</span> <span class="string">compact</span></span><br><span class="line">          <span class="attr">plugin_achievements_threshold:</span> <span class="string">X</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 📰 Recent activity</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Recent</span> <span class="string">activity</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">lowlighter/metrics@latest</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">filename:</span> <span class="string">github-metrics/activity.svg</span></span><br><span class="line">          <span class="attr">token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.METRICS_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">base:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">          <span class="attr">plugin_activity:</span> <span class="literal">yes</span></span><br><span class="line">          <span class="attr">plugin_activity_limit:</span> <span class="number">5</span></span><br><span class="line">          <span class="attr">plugin_activity_days:</span> <span class="number">0</span></span><br><span class="line">          <span class="attr">plugin_activity_filter:</span> <span class="string">issue,</span> <span class="string">pr,</span> <span class="string">release,</span> <span class="string">fork,</span> <span class="string">review,</span> <span class="string">ref/create</span></span><br><span class="line">  </span><br><span class="line">      <span class="comment"># 🗨️ Stack Overflow</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Top</span> <span class="string">answers</span> <span class="string">from</span> <span class="string">stackoverflow</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">lowlighter/metrics@latest</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">filename:</span> <span class="string">github-metrics/stackoverflow.svg</span></span><br><span class="line">          <span class="attr">token:</span> <span class="string">NOT_NEEDED</span></span><br><span class="line">          <span class="attr">base:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">          <span class="attr">plugin_stackoverflow:</span> <span class="literal">yes</span></span><br><span class="line">          <span class="attr">plugin_stackoverflow_user:</span> <span class="number">1</span></span><br><span class="line">          <span class="attr">plugin_stackoverflow_sections:</span> <span class="string">answers-top</span></span><br><span class="line">          <span class="attr">plugin_stackoverflow_limit:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure></li><li>按照上文的方法再生成一个新的Token</li><li>按上文步骤在仓库的Setting-&gt;Secrets-&gt;Actions-&gt;Environment secrets中添加<code>METRICS_TOKEN</code><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/20/65ab93c44e8fc.png"/></div></div></li><li>创建完提交代码到仓库，并尝试运行，看看是否配置成功。</li><li>在<code>README.md</code>文件引用<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/gh/JJLibra/JJLibra/github-metrics/base.svg&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="Wakatime"><a href="#Wakatime" class="headerlink" title="Wakatime"></a>Wakatime</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/20/65ab80495370f.png"/></div></div><p>在GitHub首页展示日常编程情况 –&gt; <a href="https://wakatime.com/dashboard">官网传送门</a><br>先在官网注册账号，进入wakatime官网的<code>Setting</code>，里面的<code>Secret API Key</code>一会儿会用到。</p><ol><li>在项目根目录下创建<code>/.github/workflows/waka.yml</code>文件，将以下代码复制到该文件中：<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Waka</span> <span class="string">Readme</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">schedule:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">cron:</span> <span class="string">&#x27;30 18 * * *&#x27;</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">update-readme:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Update</span> <span class="string">Readme</span> <span class="string">with</span> <span class="string">Metrics</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">environment:</span> </span><br><span class="line">      <span class="attr">name:</span> <span class="string">GH_TOKEN</span></span><br><span class="line">    <span class="attr">permissions:</span></span><br><span class="line">      <span class="attr">contents:</span> <span class="string">write</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">anmol098/waka-readme-stats@master</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">WAKATIME_API_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.WAKATIME_API_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">GH_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GH_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">SHOW_LINES_OF_CODE :</span> <span class="string">&quot;False&quot;</span></span><br><span class="line">          <span class="attr">SHOW_PROFILE_VIEWS :</span> <span class="string">&quot;False&quot;</span></span><br><span class="line">          <span class="attr">SHOW_LANGUAGE_PER_REPO :</span> <span class="string">&quot;False&quot;</span></span><br><span class="line">          <span class="attr">SHOW_LOC_CHART :</span> <span class="string">&quot;False&quot;</span></span><br><span class="line">          <span class="attr">SHOW_SHORT_INFO :</span> <span class="string">&quot;False&quot;</span></span><br><span class="line">          <span class="attr">SHOW_PROJECTS :</span> <span class="string">&quot;False&quot;</span></span><br><span class="line">          <span class="attr">SHOW_TOTAL_CODE_TIME :</span> <span class="string">&quot;False&quot;</span></span><br></pre></td></tr></table></figure></li><li>这里的<code>GH_TOKEN</code>直接使用之前创建的，所以不需要再生成新的Token了</li><li>按上文步骤在仓库的Setting-&gt;Secrets-&gt;Actions-&gt;<strong>Repository secrets</strong>中添加<code>WAKATIME_API_KEY</code>，值就是wakatime官网<code>Setting</code>里面的<code>Secret API Key</code><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/20/65ab94251ce6b.png"/></div></div></li><li>创建完提交代码到仓库，并尝试运行，看看是否配置成功。</li><li>在<code>README.md</code>文件引用，<strong>这里的引用方式不太一样</strong>，在想要添加内容的地方插入下面代码，内容最终会添加到两个注释之间<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--START_SECTION:waka--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--END_SECTION:waka--&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="Social-Readme"><a href="#Social-Readme" class="headerlink" title="Social Readme"></a>Social Readme</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/20/65ab8221232d4.png"/></div></div><p>在GitHub首页展示博客等个人网站的最新动态信息 –&gt; <a href="https://github.com/zylele/social-readme">源码传送门</a></p><ol><li>在项目根目录下创建<code>/.github/workflows/social.yml</code>文件，将以下代码复制到该文件中：<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Social</span> <span class="string">Readme</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">schedule:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">cron:</span> <span class="string">&#x27;0 16 * * *&#x27;</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">permissions:</span></span><br><span class="line">  <span class="attr">contents:</span> <span class="string">write</span> <span class="comment"># To write the generated contents to the readme</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">update-readme:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">zylele/social-readme@master</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">blog_rss_link:</span> <span class="string">https://blog.xxfer.cn/rss.xml</span></span><br><span class="line">          <span class="attr">blog_limit:</span> <span class="number">6</span> <span class="comment"># blog数量</span></span><br><span class="line">          <span class="attr">douban_name:</span> <span class="string">xxferyyds</span></span><br><span class="line">          <span class="attr">douban_limit:</span> <span class="number">5</span> <span class="comment"># 豆瓣最新动态数量</span></span><br><span class="line">          <span class="attr">commit_message:</span> <span class="string">Updated</span> <span class="string">douban</span> <span class="comment"># commit说明</span></span><br></pre></td></tr></table></figure></li><li>这一步不需要生成Token</li><li>需要提供网站的rss文件，比如上面是我的博客rss链接。豆瓣只需要提供username即可。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://blog.xxfer.cn/rss.xml</span><br></pre></td></tr></table></figure></li><li>在<code>README.md</code>文件中引用，引用方式和wakatime类似<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- START_SECTION:blog --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- END_SECTION:blog --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- START_SECTION:douban --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- END_SECTION:douban --&gt;</span></span><br></pre></td></tr></table></figure></li><li>创建完提交代码到仓库，并尝试运行，看看是否配置成功。</li></ol>              </div>            </details><h2 id="API的使用"><a href="#API的使用" class="headerlink" title="API的使用"></a>API的使用</h2><p>由于DIY过程中有很多的API使用，这些需要用到Token和工作流，如果又不理解的同学可以参考<a href="https://blog.xxfer.cn/posts/9a2a157c.html">利用Github_Token玩转仓库API</a>和<a href="https://blog.xxfer.cn/posts/3c96c005.html">如何使用Github Actions提高独立开发效率？</a></p><h2 id="案例仓库"><a href="#案例仓库" class="headerlink" title="案例仓库"></a>案例仓库</h2><ul><li><a href="https://github.com/abhisheknaiidu/awesome-github-profile-readme">https://github.com/abhisheknaiidu/awesome-github-profile-readme</a></li><li><a href="https://github.com/eryajf/awesome-github-profile-readme-chinese">https://github.com/eryajf/awesome-github-profile-readme-chinese</a></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://blog.sunguoqi.com/posts/f3b61b38/">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="">          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">打造个性化的GitHub首页</div>            <div class="tag-link-sitename">小孙同学</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note blue anzhiyufont anzhiyu-icon-fan simple&quot;&gt;&lt;p&gt;终于算是把之前挖的坑填了，上学期只是把首页CV过来，有好些内容都不是自己的，而且也不是很熟悉，现在放假回家又可以好好折腾了😋。也算是花了一点时间，把Git</summary>
      
    
    
    
    <category term="技术分享" scheme="https://blog.xxfer.cn/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="DIY" scheme="https://blog.xxfer.cn/tags/DIY/"/>
    
    <category term="GitHub" scheme="https://blog.xxfer.cn/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>反向代理神器：Nginx Proxy Manager</title>
    <link href="https://blog.xxfer.cn/posts/79f9b780.html"/>
    <id>https://blog.xxfer.cn/posts/79f9b780.html</id>
    <published>2024-01-17T15:00:00.000Z</published>
    <updated>2024-01-17T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>怎么样才能把 IP + 端口变成域名来访问？<br>答案是用反向代理。</p><p>代理就是第三方，一般分为正向代理和反向代理两种。<br><strong>正向代理面向客户端，而反向代理面向的是服务器。</strong>可以学习下面这个视频：</p><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://www.bilibili.com/video/BV1SM411X7ye/?spm_id_from=333.337.search-card.all.click&vd_source=91a233ea2e45cea087336c119461d12b">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="">          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">什么是正向代理？什么是反向代理？</div>            <div class="tag-link-sitename">猪猫FatCat</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><h2 id="Nginx-Proxy-Manager"><a href="#Nginx-Proxy-Manager" class="headerlink" title="Nginx Proxy Manager"></a>Nginx Proxy Manager</h2><p>官网：<a href="https://nginxproxymanager.com/">https://nginxproxymanager.com/</a><br>门槛极低，操作简单，不需要你掌握很复杂的 Nginx 配置知识，只需要几步就能很轻松完成反向代理的设置和 SSL 证书的部署。</p><h2 id="部署环境"><a href="#部署环境" class="headerlink" title="部署环境"></a>部署环境</h2><p>服务器：阿里云服务器<br>操作系统：Debian 11</p><h2 id="开始部署"><a href="#开始部署" class="headerlink" title="开始部署"></a>开始部署</h2><h3 id="添加-SWAP-虚拟内存"><a href="#添加-SWAP-虚拟内存" class="headerlink" title="添加 SWAP 虚拟内存"></a>添加 SWAP 虚拟内存</h3><div class="note orange anzhiyufont anzhiyu-icon-dengpao simple"><p><strong>如果服务器内存比较小，建议配置这一步。</strong>否则，可以忽略此步。</p></div><p>设置 SWAP 可以用脚本:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O box.sh https://raw.githubusercontent.com/BlueSkyXN/SKY-BOX/main/box.sh &amp;&amp; <span class="built_in">chmod</span> +x box.sh &amp;&amp; clear &amp;&amp; ./box.sh</span><br></pre></td></tr></table></figure><p>选择 18，然后输入你想要扩容的数值即可。<strong>输入的数值单位为MB，即输入1024，就是扩容1GB</strong></p><h3 id="升级-packages"><a href="#升级-packages" class="headerlink" title="升级 packages"></a>升级 packages</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo -i <span class="comment"># 切换到 root 用户</span></span><br><span class="line"></span><br><span class="line">apt update -y  <span class="comment"># 升级 packages</span></span><br><span class="line"></span><br><span class="line">apt install wget curl sudo vim git -y  <span class="comment"># Debian 系统比较干净，安装常用的软件</span></span><br></pre></td></tr></table></figure><h3 id="安装-Docker和Docker-compose-环境"><a href="#安装-Docker和Docker-compose-环境" class="headerlink" title="安装 Docker和Docker-compose 环境"></a>安装 Docker和Docker-compose 环境</h3><p>参考这篇<a href="https://u.sb/debian-install-docker/">博客</a></p><h3 id="安装-Nginx-Proxy-Manager"><a href="#安装-Nginx-Proxy-Manager" class="headerlink" title="安装 Nginx Proxy Manager"></a>安装 Nginx Proxy Manager</h3><ul><li><p>创建一下安装的目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo -i</span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> -p /root/data/docker_data/npm</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /root/data/docker_data/npm</span><br></pre></td></tr></table></figure></li><li><p>编写yaml文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim docker-compose.yml</span><br></pre></td></tr></table></figure><p>英文输入法下，按 <code>i</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">app:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&#x27;jc21/nginx-proxy-manager:latest&#x27;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;80:80&#x27;</span>  <span class="comment"># 保持默认即可，不建议修改左侧的80</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;81:81&#x27;</span>  <span class="comment"># 冒号左边可以改成自己服务器未被占用的端口</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;443:443&#x27;</span> <span class="comment"># 保持默认即可，不建议修改左侧的443</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/data</span> <span class="comment"># 冒号左边可以改路径，现在是表示把数据存放在在当前文件夹下的 data 文件夹中</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./letsencrypt:/etc/letsencrypt</span>  <span class="comment"># 冒号左边可以改路径，现在是表示把数据存放在在当前文件夹下的 letsencrypt 文件夹中</span></span><br></pre></td></tr></table></figure><p>按一下 <code>esc</code>，然后 <code>:wq</code> 保存退出。</p></li><li><p>打开服务器防火墙并访问网页（非必需但很重要）</p></li></ul><p><strong>确保自己使用的服务器已经将上面的yaml文件中的端口都开启了</strong>，否则后面网页会访问不了。</p><p>有的服务器厂商默认关闭不常用的端口，所以需要手动打开。阿里云服务器是在安全组中添加规则开放端口，可以参考<a href="https://developer.aliyun.com/article/1209367">这里</a>，最好是参考所使用服务商提供的官方文档。</p><h3 id="运行并访问-Nginx-Proxy-Manager"><a href="#运行并访问-Nginx-Proxy-Manager" class="headerlink" title="运行并访问 Nginx Proxy Manager"></a>运行并访问 Nginx Proxy Manager</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/data/docker_data/npm   <span class="comment"># 来到 dockercompose 文件所在的文件夹下</span></span><br><span class="line"></span><br><span class="line">docker-compose up -d </span><br></pre></td></tr></table></figure><p>开启成功以后，理论上就可以输入 <code>http:// + 服务器ip:81</code> 访问了。</p><p>默认登陆名和密码：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Email:    admin@example.com</span><br><span class="line">Password: changeme</span><br></pre></td></tr></table></figure><div class="note red anzhiyufont anshiyu-icon-dengpao simple"><ol><li>不知道服务器 IP，可以直接在命令行输入：curl ip.sb，会显示当前服务器的 IP。</li><li>遇到访问不了的情况，请再次检查在宝塔面板的防火墙或服务商的后台防火墙<strong>是否打开对应了端口</strong>。</li></ol></div><h2 id="今后更新-Nginx-Proxy-Manager"><a href="#今后更新-Nginx-Proxy-Manager" class="headerlink" title="今后更新 Nginx Proxy Manager"></a>今后更新 Nginx Proxy Manager</h2><p>Docker部署的应用更新都很方便</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/data/docker_data/npm</span><br><span class="line"></span><br><span class="line">docker-compose down </span><br><span class="line"></span><br><span class="line"><span class="built_in">cp</span> -r /root/data/docker_data/npm /root/data/docker_data/npm.archive  <span class="comment"># 万事先备份，以防万一</span></span><br><span class="line"></span><br><span class="line">docker-compose pull</span><br><span class="line"></span><br><span class="line">docker-compose up -d    <span class="comment"># 请不要使用 docker-compose stop 来停止容器，因为这么做需要额外的时间等待容器停止；docker-compose up -d 直接升级容器时会自动停止并立刻重建新的容器，完全没有必要浪费那些时间。</span></span><br><span class="line"></span><br><span class="line">docker image prune  <span class="comment"># prune 命令用来删除不再使用的 docker 对象。删除所有未被 tag 标记和未被容器使用的镜像</span></span><br></pre></td></tr></table></figure><p>提示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">WARNING! This will remove all dangling images.</span><br><span class="line">Are you sure you want to <span class="built_in">continue</span>? [y/N] </span><br></pre></td></tr></table></figure><p>输入 <code>y</code></p><h2 id="卸载-Nginx-Proxy-Manager"><a href="#卸载-Nginx-Proxy-Manager" class="headerlink" title="卸载 Nginx Proxy Manager"></a>卸载 Nginx Proxy Manager</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/data/docker_data/npm</span><br><span class="line"></span><br><span class="line">docker-compose down </span><br><span class="line"></span><br><span class="line"><span class="built_in">rm</span> -rf /root/data/docker_data/npm  <span class="comment"># 完全删除映射到本地的数据</span></span><br></pre></td></tr></table></figure><p>可以卸载得很干净。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>本篇博客只是简单搭建一下Nginx Proxy Manager，已经能够使用它来做反向代理了。关于它的具体使用可能后面会更，大家也可以自己研究一下。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;怎么样才能把 IP + 端口变成域名来访问？&lt;br&gt;答案是用反向代理。&lt;/p&gt;
&lt;p&gt;代理就是第三方，一般分为正向代理和反向代理两种。&lt;br</summary>
      
    
    
    
    <category term="技术分享" scheme="https://blog.xxfer.cn/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="Docker" scheme="https://blog.xxfer.cn/tags/Docker/"/>
    
    <category term="ECS" scheme="https://blog.xxfer.cn/tags/ECS/"/>
    
    <category term="网络安全" scheme="https://blog.xxfer.cn/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Picsur imgur：docker部署简单易管理的图床项目</title>
    <link href="https://blog.xxfer.cn/posts/4c41eeca.html"/>
    <id>https://blog.xxfer.cn/posts/4c41eeca.html</id>
    <published>2024-01-15T20:00:00.000Z</published>
    <updated>2024-02-20T18:43:00.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note blue anzhiyufont anzhiyu-icon-fan simple"><p>本篇博客所有图片均存放在picsur图床上，目前感觉良好。另外，由于我的服务器硬盘容量有限，所以目前只是自用。如果想要体验几天，试试好不好用，可以QQ联系我，可以开几个小号供大家体验。</p></div><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>前段时间推荐了两种图床方案：<a href="https://blog.xxfer.cn/posts/a008ab16.html">npm图床</a>和<a href="https://blog.xxfer.cn/posts/92211228.html">jsDelivr图床</a><br>可是使用的感受并不好，如果配合CDN进行缓存可能效果还行，但是没有缓存策略的话图片有时候都难以加载。所以就像我之前所说，稳定的方案肯定是要结合云存储的，当然也可以是免费图床也可以是值得信赖的低价图床。对于没有服务器的同学，我目前比较推荐使用的是：</p><ul><li>免费图床：<a href="https://www.freeimg.cn/">Freeimg图床</a></li><li>付费图床：<a href="https://image.anheyu.com/">安知鱼图床</a>和杜老师的<a href="https://7bu.top/">去不图床</a></li></ul><p>这些图床其实都是基于国人开发的<a href="https://www.lsky.pro/">兰空图床</a>项目搭建的，有服务器的同学可以试试。不过它比较适合多人使用，自用的话也可以，但是感觉有点大材小用了。</p><p>所以，今天想要分享的就是一个适合自用的开源图床项目——<a href="https://github.com/CaramelFur/Picsur">Picsur</a>，这是国外某位大佬开发的，目前还没有汉化版，不过词汇量不大，实在不习惯的话，可以使用浏览器自带的翻译功能。另外，这个项目本就是这位大佬找遍了GitHub，但是没有找到好用的图床项目，才用PHP写了这个项目。所以，我感觉外国程序员还是比较纯粹的，大家不必担心挂马什么的，可以放心使用。</p><p>我使用它的原因：</p><ul><li>Freeimg图床暂时不支持webp格式的图片上传，picsur支持</li><li>界面比兰空简单，适合个人搭建使用</li><li>部署在国内服务器上，访问速度当然不慢</li></ul><div class="note orange anzhiyufont anzhiyu-icon-dengpao simple"><p>Freeimg图床现已支持webp格式的图片上传</p></div><h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h2><ul><li><p>上传界面，提交后直接上传</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/07/65e95b2558e14.webp"/></div></div></li><li><p>可以自由设置图片格式，尤其支持webp，至于其他格式，下文会具体介绍</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/07/65e95b1b2788c.webp"/></div></div></li><li><p>已上传的图片</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/07/65e95b105561c.webp"/></div></div></li><li><p>支持多种图片操作，还可以设置图片有效期</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/07/65e95b05a43dc.webp"/></div></div></li><li><p>可以自定义用户组</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/07/65e95af77d1a9.webp"/></div></div></li></ul><p><strong>还有一些其他功能</strong></p><div class="note orange anzhiyufont anzhiyu-icon-dengpao simple"><p>我主要是看重webp格式和它足够轻量简洁这两个优点，比兰空要简约。</p></div><h2 id="功能简介"><a href="#功能简介" class="headerlink" title="功能简介"></a>功能简介</h2><ul><li>支持 docker 一键部署</li><li>匿名上传</li><li>支持多账户</li><li>适当的 CORS 限制：防止恶意的网站通过跨域请求获取或修改用户的信息</li><li>Exif 信息剥离</li><li>支持保留原始图像的能力</li><li>支持多种格式：<ol><li>QOI</li><li>JPG</li><li>PNG</li><li>WEBP（支持动画）</li><li>TIFF</li><li>BMP</li><li>GIF（支持动画）</li><li>支持转换图像</li></ol></li><li>支持编辑图像<ol><li>调整大小</li><li>旋转</li><li>翻转</li><li>去除透明度</li><li>负片效果</li><li>灰度化处理</li><li>可删除图片</li></ol></li><li>正确的数据库迁移</li><li>支持在列表中显示自己的图片</li><li>支持聊天窗口上正确显示预览图</li><li>支持设置图片有效期</li><li>支持 ShareX API</li><li>支持 ARM64 和 AMD64 Docker 镜像</li><li>白色模式（WIP）</li><li>公共画廊（WIP）</li><li>相册（WIP）</li></ul><h3 id="EXIF-是什么？"><a href="#EXIF-是什么？" class="headerlink" title="EXIF 是什么？"></a>EXIF 是什么？</h3><p>EXIF 数据，全称”Exchangeable Image File Format”，是一种包含各种关于照片的信息的数据格式。它可以包含很多有关照片的信息，比如相机制造商、相机型号、照片拍摄日期、ISO 设置、快门速度、焦距，是否使用了闪光灯等等。一些相机还会添加地理位置的 gps 信息。</p><p>正因为 EXIF 数据可能包含这种敏感信息，例如地理位置，所以在分享照片的时候需要小心。如果不希望自己的这些信息被公开，应该在发布照片之前去除这些 EXIF 数据。</p><h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><ul><li>服务器：我使用的是阿里云的ECS云服务器，其他的VPS都行</li><li>操作系统：Debian 11</li><li>安装好 Docker、Docker-compose（相关脚本），参考这篇<a href="https://u.sb/debian-install-docker/">博客</a></li></ul><p>【非必需但建议】域名一枚，并做好解析到服务器上<br>【非必需】提前安装好宝塔面板海外版本 aapanel，并安装好 Nginx<br>【非必需但建议】安装好 Nginx Proxy Manager（我也是使用docker部署的，有时间写篇博客记录一下）</p><div class="note orange anzhiyufont anzhiyu-icon-dengpao simple"><p>既然用作图床，服务器的硬盘当然越大越好，不过自己用的话已经足够使用了。</p></div><h2 id="使用docker部署"><a href="#使用docker部署" class="headerlink" title="使用docker部署"></a>使用docker部署</h2><div class="note orange anzhiyufont anzhiyu-icon-dengpao simple"><p>需要事先安装 Docker和Docker compose环境，参考这篇<a href="https://u.sb/debian-install-docker/">博客</a></p></div><h3 id="创建一下安装的目录"><a href="#创建一下安装的目录" class="headerlink" title="创建一下安装的目录"></a>创建一下安装的目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo -i                                 <span class="comment">#进入root模式</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /root/data/docker_data/picsur  <span class="comment">#创建文件所在的文件夹</span></span><br><span class="line"><span class="built_in">cd</span> /root/data/docker_data/picsur        <span class="comment">#进入文件夹</span></span><br></pre></td></tr></table></figure><p>创建yaml文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim docker-compose.yml</span><br></pre></td></tr></table></figure><p>按一下键盘<code>i</code>，将以下代码复制到文件中，根据自己需要修改（基本不用修改）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">picsur:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">ghcr.io/caramelfur/picsur:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">picsur</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;8003:8080&#x27;</span> <span class="comment">#8003可以改成服务器上没有用过的端口</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">PICSUR_HOST:</span> <span class="string">&#x27;0.0.0.0&#x27;</span></span><br><span class="line">      <span class="attr">PICSUR_PORT:</span> <span class="number">8080</span></span><br><span class="line">      <span class="attr">PICSUR_DB_HOST:</span> <span class="string">picsur_postgres</span></span><br><span class="line">      <span class="attr">PICSUR_DB_PORT:</span> <span class="number">5432</span></span><br><span class="line">      <span class="attr">PICSUR_DB_USERNAME:</span> <span class="string">picsur</span></span><br><span class="line">      <span class="attr">PICSUR_DB_PASSWORD:</span> <span class="string">nice-long-strong-passw0rd-here</span>  <span class="comment"># 确保和picsur_postgres:部分的 POSTGRES_PASSWORD 匹配</span></span><br><span class="line">      <span class="attr">PICSUR_DB_DATABASE:</span> <span class="string">picsur</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">## 默认管理员账户是 admin, 这个没法改，密码就是下面这个你设置的</span></span><br><span class="line">      <span class="attr">PICSUR_ADMIN_PASSWORD:</span> <span class="string">different-nice-long-str0n6-passw0rd-here</span>       </span><br><span class="line"></span><br><span class="line">      <span class="comment">## 可选的，如果没有设置会默认生产随机字符</span></span><br><span class="line">      <span class="comment"># PICSUR_JWT_SECRET: CHANGE_ME</span></span><br><span class="line">      <span class="comment"># PICSUR_JWT_EXPIRY: 7d</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">## 最大可以上传的字节数</span></span><br><span class="line">      <span class="attr">PICSUR_MAX_FILE_SIZE:</span> <span class="number">128000000</span>  <span class="comment"># 128 MB</span></span><br><span class="line">      <span class="comment">## No need to touch this, unless you use a custom frontend</span></span><br><span class="line">      <span class="comment"># PICSUR_STATIC_FRONTEND_ROOT: &quot;/picsur/frontend/dist&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">## Warning: Verbose mode might log sensitive data</span></span><br><span class="line">      <span class="comment"># PICSUR_VERBOSE: &quot;true&quot;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    </span><br><span class="line">  <span class="attr">picsur_postgres:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres:14-alpine</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">picsur_postgres</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">POSTGRES_DB:</span> <span class="string">picsur</span></span><br><span class="line">      <span class="attr">POSTGRES_PASSWORD:</span> <span class="string">nice-long-strong-passw0rd-here</span></span><br><span class="line">      <span class="attr">POSTGRES_USER:</span> <span class="string">picsur</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./picsur-data:/var/lib/postgresql/data</span>  <span class="comment"># 默认数据存放在当前文件夹下的picsur-data目录中，可以自行修改</span></span><br></pre></td></tr></table></figure><p>修改好之后，<strong>注意切换成英文输入法</strong>，然后按一下<code>esc</code>，然后<code>:wq</code>保存退出。</p><p>一行命令自动部署，docker真的太方便了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose up -d  </span><br></pre></td></tr></table></figure><p><strong>有些操作系统是docker-compose up -d，注意区别</strong></p><h3 id="打开服务器防火墙（非必需）并访问网页"><a href="#打开服务器防火墙（非必需）并访问网页" class="headerlink" title="打开服务器防火墙（非必需）并访问网页"></a>打开服务器防火墙（非必需）并访问网页</h3><p>有些服务器可能不需要，阿里云的服务器需要在安全组开启上面代码中我们使用的8003端口，才能使用8003端口访问服务器。</p><p><strong>开启8003端口以后最好重启一下实例</strong></p><p>查看端口是否被占用（以 8003 为例），输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof -i:8003  <span class="comment">#查看 8003 端口是否被占用，如果被占用，重新自定义一个端口</span></span><br></pre></td></tr></table></figure><p>如果啥也没出现，表示端口未被占用，可以继续下面的操作了～</p><p>如果出现：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-bash: lsof: <span class="built_in">command</span> not found</span><br></pre></td></tr></table></figure><p>运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install lsof  <span class="comment">#安装 lsof</span></span><br></pre></td></tr></table></figure><p>如果端口没有被占用，理论上已经可以输入 <code>http:// + 服务器ip:8003</code> 访问到picsur了。<br><strong>端口被占用了就修改一下端口，比如改成 8081，注意 docker-compose.yml 文件里和防火墙都要改</strong></p><div class="note green anzhiyufont anzhiyu-icon-fan simple"><p>到这里，其实已经能够使用picsur了。但是，访问的网址直接暴露了ip，而且不方便记忆，所以下面做一下反向代理。由于我现在只有一台服务器，一般反向代理需要两台以上，以后再做迁移吧。</p></div><h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><p>我这里使用的是Nginx Proxy Manager，Nginx Proxy Manager也是使用Docker部署的，参考这篇<a href="https://blog.xxfer.cn/posts/79f9b780.html">博客</a>。熟悉宝塔的同学当然也可以使用宝塔做反向代理。</p><h4 id="如果picsur和Nginx-Proxy-Manager部署在不同服务器上"><a href="#如果picsur和Nginx-Proxy-Manager部署在不同服务器上" class="headerlink" title="如果picsur和Nginx Proxy Manager部署在不同服务器上"></a>如果picsur和Nginx Proxy Manager部署在不同服务器上</h4><ol><li>在添加反向代理之前，需要确保已经完成域名解析：域名解析添加<code>A</code>记录，<code>主机名</code>自定义（这里以picsur为例），<code>记录值</code>为Nginx Proxy Manager所在服务器的IP地址<div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/07/65e95bf501b67.webp"/></div></div></li><li>在Nginx Proxy Manager中添加<code>Proxy Host</code>：<div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/07/65e95c0110bd5.webp"/></div></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/07/65e95c0c03a56.webp"/></div></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/07/65e95c1acb320.webp"/></div></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/07/65e95c259d1bc.webp"/></div></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/07/65e95c2fe5797.webp"/></div></div></li></ol><h4 id="如果picsur和Nginx-Proxy-Manager部署在同一服务器上"><a href="#如果picsur和Nginx-Proxy-Manager部署在同一服务器上" class="headerlink" title="如果picsur和Nginx Proxy Manager部署在同一服务器上"></a>如果picsur和Nginx Proxy Manager部署在同一服务器上</h4><p>与上面有一点点变化，就是在下面的这一步：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/07/65e95c0c03a56.webp"/></div></div><p><strong>原本图中标注3的位置需要改为Docker容器内部IP</strong><br>通过下面命令可以查看对应的 Docker 容器内部 IP</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip addr show docker0</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/03/07/65e95c494ab33.webp"/></div></div><p>这里涉及到的是Docker的网络模式，感兴趣的同学可以学习一下这个视频：</p><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://www.bilibili.com/video/BV1Aj411r71b/?spm_id_from=333.337.search-card.all.click&vd_source=91a233ea2e45cea087336c119461d12b">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://www.freeimg.cn/i/2023/12/30/658fb2cbc152c.png)">          <i class="anzhiyufont anzhiyu-icon-link" style="display: none"></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">Docker网络模式</div>            <div class="tag-link-sitename">技术蛋老师</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><p>配置完毕，理论上已经大家可以通过域名访问picsur了。</p><div class="note orange anzhiyufont anzhiyu-icon-dengpao simple"><p>可能会遇到无法访问，可能的原因：<br>Nginx Proxy Manager会用到 80、443 端口，所以服务器不能占用这些端口，或者服务器防火墙不能禁止这些端口。<br>关闭服务器占用80、443端口的进程，并在服务器安全组里添加80、443端口（有些服务器需要，像阿里云服务器就需要手动添加）</p></div><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>其实也不难，大家自己攻略。因为这个项目还在开发中，所以讲一下版本更新方法，其实也不难。</p><h3 id="更新picsur"><a href="#更新picsur" class="headerlink" title="更新picsur"></a>更新picsur</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/data/docker_data/picsur</span><br><span class="line"></span><br><span class="line">docker compose down </span><br><span class="line"></span><br><span class="line"><span class="built_in">cp</span> -r /root/data/docker_data/picsur /root/data/docker_data/picsur.archive  <span class="comment"># 万事先备份，以防万一</span></span><br><span class="line"></span><br><span class="line">docker compose pull</span><br><span class="line"></span><br><span class="line">docker compose up -d    <span class="comment"># 请不要使用 docker-compose stop 来停止容器，因为这么做需要额外的时间等待容器停止；docker-compose up -d 直接升级容器时会自动停止并立刻重建新的容器，完全没有必要浪费那些时间。</span></span><br><span class="line"></span><br><span class="line">docker image prune  <span class="comment"># prune 命令用来删除不再使用的 docker 对象。删除所有未被 tag 标记和未被容器使用的镜像</span></span><br></pre></td></tr></table></figure><p>提示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">WARNING! This will remove all dangling images.</span><br><span class="line">Are you sure you want to <span class="built_in">continue</span>? [y/N] </span><br></pre></td></tr></table></figure><p>输入<code>y</code><br>利用 Docker 搭建的应用，更新非常容易嘿嘿</p><h3 id="卸载picsur"><a href="#卸载picsur" class="headerlink" title="卸载picsur"></a>卸载picsur</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/data/docker_data/picsur</span><br><span class="line"></span><br><span class="line">docker-compose down</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"></span><br><span class="line"><span class="built_in">rm</span> -rf /root/data/docker_data/picsur  <span class="comment"># 完全删除映射到本地的数据</span></span><br></pre></td></tr></table></figure><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>感觉图床也就这样告一段落了，博客封面啥的就放在Freeimg图床上，毕竟有2个GB，够我造好长时间了。博客内部的图片就放在picsur上面，然后npm和jsDelivr图床就当作备用方案。这样已经足够我使用的了，大家如果有什么推荐，欢迎在评论区留言。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note blue anzhiyufont anzhiyu-icon-fan simple&quot;&gt;&lt;p&gt;本篇博客所有图片均存放在picsur图床上，目前感觉良好。另外，由于我的服务器硬盘容量有限，所以目前只是自用。如果想要体验几天，试试好不好用，可以QQ联系我</summary>
      
    
    
    
    <category term="技术分享" scheme="https://blog.xxfer.cn/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="Docker" scheme="https://blog.xxfer.cn/tags/Docker/"/>
    
    <category term="ECS" scheme="https://blog.xxfer.cn/tags/ECS/"/>
    
    <category term="图床" scheme="https://blog.xxfer.cn/tags/%E5%9B%BE%E5%BA%8A/"/>
    
  </entry>
  
  <entry>
    <title>npm自建免费图床方案</title>
    <link href="https://blog.xxfer.cn/posts/a008ab16.html"/>
    <id>https://blog.xxfer.cn/posts/a008ab16.html</id>
    <published>2024-01-09T15:05:00.000Z</published>
    <updated>2024-04-21T14:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note blue anzhiyufont anzhiyu-icon-fan simple"><p>使用感受：访问速度比较慢，如果自己配置了CDN缓存策略或者可以尝试多个镜像源，可能会好一点。<br>2024.01.16已将本篇博客图片转移至自建Picsur图床。<br>2024.03.13本文图片重新使用npm+免费cdn搭建的npm图床，加速节点为<a href="https://gcore.jsdelivr.net/">https://gcore.jsdelivr.net</a></p></div><p>最新图床方案请看<a href="https://blog.xxfer.cn/posts/6a3f672a.html">我的图床方案</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天摸鱼的时候搭了一个npm图床，也是免费的，访问速度至少目前挺快的，推荐给大家，顺便做个记录。</p><p>npm有大量的镜像站，且npm可以使用版本号增量更新。但是搭建起来还是有些麻烦的，而且和GitHub图床一样有可能被查，可以作为一种<code>备用方案</code>吧，大家自己考虑是否使用。</p><p><strong>同样，这篇博客中的图片就放在该图床上</strong></p><h2 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h2><h3 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h3><ol><li>登录<a href="https://npmjs.com/">npm官网</a>，没有账号的注册一个，点击右上角的头像，进入Access Token。</li></ol><div class="img-wrap"><div class="img-bg"><img class="img" src="https://gcore.jsdelivr.net/npm/xxfer-pic@1.0.2/a008ab16/npm1.png" style="width:650px;"/></div></div><ol start="2"><li>点击 Generate New Token，选择 Classic Token。</li></ol><div class="img-wrap"><div class="img-bg"><img class="img" src="https://gcore.jsdelivr.net/npm/xxfer-pic@1.0.2/a008ab16/npm2.png" style="width:800px;"/></div></div><ol start="3"><li>勾选 Automation，点击 Generate Token 生成令牌。</li></ol><div class="img-wrap"><div class="img-bg"><img class="img" src="https://gcore.jsdelivr.net/npm/xxfer-pic@1.0.2/a008ab16/npm3.png" style="width:800px;"/></div></div><p><strong>然后将生成的Token令牌保存好，只显示一次</strong></p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://gcore.jsdelivr.net/npm/xxfer-pic@1.0.2/a008ab16/npm4.png" style="width:800px;"/></div></div><h3 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h3><ul><li>需要一个 Github 账号，以及一个已经创建好的仓库，名称随意，权限私有或者公开都可以。参考<a href="https://blog.xxfer.cn/posts/92211228.html">jsDelivr自建免费图床方案</a></li></ul><ol><li><strong>进入仓库</strong>，选择 Settings，选择 Secrets 中的 Actions</li></ol><div class="img-wrap"><div class="img-bg"><img class="img" src="https://gcore.jsdelivr.net/npm/xxfer-pic@1.0.2/a008ab16/secret1.png" style="width:800px;"/></div></div><ol start="2"><li>点击 New repository secret 添加一个新的 Secret</li></ol><div class="img-wrap"><div class="img-bg"><img class="img" src="https://gcore.jsdelivr.net/npm/xxfer-pic@1.0.2/a008ab16/secret2.png" style="width:800px;"/></div></div><ol start="3"><li>Name 填写 NPM_TOKEN，Secret 填写前面获取的 npm 令牌</li></ol><div class="img-wrap"><div class="img-bg"><img class="img" src="https://gcore.jsdelivr.net/npm/xxfer-pic@1.0.2/a008ab16/secret3.png" style="width:800px;"/></div></div><ol start="4"><li>在仓库<code>根目录</code>中新建一个 package.json 文件，内容如下：</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">name 必须要小写</span><br><span class="line">version 随意</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;xxfer-pic&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;Somewhere to save the file from @xxfer&quot;,</span><br><span class="line">  &quot;author&quot;: &quot;LJJ(@xxfer)&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://gcore.jsdelivr.net/npm/xxfer-pic@1.0.2/a008ab16/packet.png"/></div></div><h3 id="本地文件夹"><a href="#本地文件夹" class="headerlink" title="本地文件夹"></a>本地文件夹</h3><ol><li>在本地创建一个空的文件夹，打开git终端将图床仓库clone下来：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:[username]/[AssetsRepo].git</span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/[username]/[AssetsRepo].git</span><br></pre></td></tr></table></figure><ol start="2"><li>在 clone 下来的[AssetsRepo]文件夹内打开终端，输入以下指令切换回原生源</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npmjs.org</span><br></pre></td></tr></table></figure><ol start="3"><li>添加本地 npm 用户设置</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 仅第一次使用需要添加用户，之后会提示你输入你的npm账号密码以及注册邮箱</span></span><br><span class="line">npm adduser</span><br><span class="line"><span class="comment"># 非第一次使用直接登录即可，之后会提示你输入你的npm账号密码以及注册邮箱</span></span><br><span class="line">npm login</span><br></pre></td></tr></table></figure><ol start="4"><li>运行 npm 初始化指令，把整个图床仓库打包，按照指示进行配置，注意需要事先确认你的包名没有和别人已发布的包重复，可以在 npm 官网搜索相应包名，搜不到就说明还没被占用。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://gcore.jsdelivr.net/npm/xxfer-pic@1.0.3/a008ab16/npminit.png"/></div></div><p>最后会输出一段 package.json，请求确认，输入 yes 即可。</p><ol start="5"><li>然后输入发布指令，我们就可以把包发布到 npm 上了。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm publish</span><br></pre></td></tr></table></figure><p>jsdelivr+npm 的图片引用和 jsdelivr+github 很相似，例如我在[AssetsRepo]仓库里存放的&#x2F;img&#x2F;index.png</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># jsDelivr+github链接</span></span><br><span class="line">https://gcore.jsdelivr.net/gh/[GithubUserName]/[AssetsRepo]/img/index.png</span><br><span class="line"><span class="comment"># jsDelivr+npm链接</span></span><br><span class="line">https://gcore.jsdelivr.net/npm/[NpmPackageName]/img/index.png</span><br></pre></td></tr></table></figure><div class="note orange anzhiyufont anzhiyu-icon-dengpao simple"><p>jsDelivr+Npm 依然有 100MB 的包大小限制，但是 NPM 有丰富的国内节点。可以挑选一个使用。个人推荐知乎的，没有大小限制，而且也很稳定。</p></div><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">【jsd出品，网宿国内节点】</span><br><span class="line">https://gcore.jsdelivr.net/npm/:package@:version/:file</span><br><span class="line">【unpkg 自建】</span><br><span class="line">https://cdn.cbd.int/:package@:version/:file</span><br></pre></td></tr></table></figure><p>当然也可以利用<a href="https://unpkg.com/">unpkg</a>自建。(UNPKG 是一个内容源自 npm 的全球快速 CDN。它部署在 cloudflare 上，在大陆地区访问到的是香港节点。所以速度也不错。)</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://unpkg.com/:package@:version/:file</span><br></pre></td></tr></table></figure><ol start="6"><li>如果每次都要在本地进行npm publish的话，npm 的提交是整个包一起上传的，不存在增量更新，耗时不说，而且还往往需要架梯子才能正常上传。所以我们可以把它交给 github action 来完成。</li></ol><ul><li><p>在本地的[AssetsRepo]文件夹下新建[AssetsRepo]&#x2F;.github&#x2F;workflows&#x2F;autopublish.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Node.js</span> <span class="string">Package</span></span><br><span class="line"><span class="comment"># 监测图床分支，2020年10月后github新建仓库默认分支改为main，记得更改</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">publish-npm:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">&quot;12.x&quot;</span></span><br><span class="line">          <span class="attr">registry-url:</span> <span class="string">https://registry.npmjs.org/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">npm</span> <span class="string">publish</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">NODE_AUTH_TOKEN:</span> <span class="string">$&#123;&#123;secrets.npm_token&#125;&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>在本地的[AssetsRepo]文件夹下添加想要上传的图片，然后打开git终端，运行以下指令，上传新增内容至 github，即可触发部署。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将更改提交</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;npm publish&quot;</span></span><br><span class="line"><span class="comment"># 更新package版本号</span></span><br><span class="line">npm version patch</span><br><span class="line"><span class="comment"># 推送至github触发action</span></span><br><span class="line">git push <span class="comment">#这里可能会遇到报错，大家可以使用git pull origin main然后git push</span></span><br></pre></td></tr></table></figure><div class="note orange anzhiyufont anzhiyu-icon-dengpao simple"><p>此处的四行指令顺序严格。<br>每次更新 npm 图床都需要先修改[AssetsRepo]\package.json里的version,也就是版本号。<br>而npm version patch即为更新 package.json 里的版本号的指令，效果是末尾版本号+1，例如0.0.1&#x3D;&gt;0.0.2、1.1.3&#x3D;&gt;1.1.4。免去了打开package.json再修改版本号的麻烦。（大版本更新还是需要手动改的）<br>更新 npm 图床务必要记得更新package.json里的版本号！</p></div></li></ul><h2 id="目前可访问的镜像源"><a href="#目前可访问的镜像源" class="headerlink" title="目前可访问的镜像源"></a>目前可访问的镜像源</h2><p>访问慢一般是因为：</p><ul><li>国内没有他们的CDN节点</li><li>CDN上没有同步你的npm包，有些镜像源都是从 CDNJS 上同步的数据，CDNJS 并不会把所有的 npm 包进行同步，所以当你需要的一些 npm 包没有在 CDNJS 上面，你就用不了这些国内 CDN 了。</li></ul><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">国外 CDN 节点：</span><br><span class="line">https://unpkg.com/:package@:version/:file</span><br><span class="line">https://gcore.jsdelivr.net/npm/:package@:version/:file</span><br><span class="line">https://fastly.jsdelivr.net/npm/:package@:version/:file</span><br><span class="line">https://cdn.cbd.int/:package@:version/:file</span><br><span class="line"></span><br><span class="line">国内公益 CDN 节点：</span><br><span class="line">Zkeq 的渺软 CDN</span><br><span class="line">https://jsd.onmicrosoft.cn/npm/:package@:version/:file           #回源jsd</span><br><span class="line">https://npm.onmicrosoft.cn/:package@:version/:file               #回源unpkg</span><br><span class="line">https://cdnjs.onmicrosoft.cn/ajax/libs/:package/:version/:file   #回源cdnjs 这个访问好像存在问题</span><br><span class="line">夏柔 CDN</span><br><span class="line">https://font.onmicrosoft.cn/:package/:version/:file              #目前只支持.css .woff2 .woff .ttf .otf后缀文件的加速</span><br><span class="line"></span><br><span class="line">有博主推荐，但我使用不了，大家试试：</span><br><span class="line">https://github.elemecdn.com/:package@:version/:file</span><br><span class="line">https://npm.elemecdn.com/:package@:version/:file</span><br><span class="line">https://unpkg.zhimg.com/:package@:version/:file</span><br></pre></td></tr></table></figure><p>建议都尝试一下，看看速度，有些镜像还是比较快的，同时欢迎大家在评论区分享自己觉得好用的镜像。所以npm图床还是建议作为一个应急备用的方案，不建议大量使用。</p><div class="note orange anzhiyufont anzhiyu-icon-fan simple"><p>2024年4月21日更新淘宝镜像源。</p><ul><li>淘宝镜像源<br>感谢匿名网友<code>务实的葡萄</code>的分享，镜像网址：<a href="https://registry.npmmirror.com/">https://registry.npmmirror.com</a><br>使用方式：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://registry.npmmirror.com/:package/:version/files/:file <span class="comment"># https://registry.npmmirror.com/xxfer-pic/1.0.3/files/a008ab16/npm1.png</span></span><br></pre></td></tr></table></figure></li></ul></div><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>可以看出npm图床创建起来还是有些麻烦的，但是不失为一种备用图床的方案。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note blue anzhiyufont anzhiyu-icon-fan simple&quot;&gt;&lt;p&gt;使用感受：访问速度比较慢，如果自己配置了CDN缓存策略或者可以尝试多个镜像源，可能会好一点。&lt;br&gt;2024.01.16已将本篇博客图片转移至自建Picsu</summary>
      
    
    
    
    <category term="技术分享" scheme="https://blog.xxfer.cn/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="图床" scheme="https://blog.xxfer.cn/tags/%E5%9B%BE%E5%BA%8A/"/>
    
    <category term="自建应用项目" scheme="https://blog.xxfer.cn/tags/%E8%87%AA%E5%BB%BA%E5%BA%94%E7%94%A8%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="npm" scheme="https://blog.xxfer.cn/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>jsDelivr自建免费图床方案</title>
    <link href="https://blog.xxfer.cn/posts/92211228.html"/>
    <id>https://blog.xxfer.cn/posts/92211228.html</id>
    <published>2024-01-08T21:14:00.000Z</published>
    <updated>2024-01-13T16:44:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>相信刚开始建站的同学都想要一个方便管理的图床，今天发现一个免费的图床搭建方案，访问挺快的，也方便管理。</p><p>最新图床方案请看<a href="https://blog.xxfer.cn/posts/6a3f672a.html">我的图床方案</a></p><p><strong>本篇博客中的图片就都放在该图床上</strong></p><div class="note orange anzhiyufont anzhiyu-icon-fan simple"><p>2024.01.13：不够稳定，访问时快时慢，自行斟酌是否使用。已将图片转移至Freeimg图床。</p></div><h2 id="视频推荐教程"><a href="#视频推荐教程" class="headerlink" title="视频推荐教程"></a>视频推荐教程</h2><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://www.bilibili.com/video/BV1P64y1H7eY/?spm_id_from=333.337.search-card.all.click&vd_source=91a233ea2e45cea087336c119461d12b">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="">          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">GitHub+PicGo+JsDelivr 打造高效免费图床视频教程</div>            <div class="tag-link-sitename">库源吧</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><h2 id="jsDelivr-GitHub-PicGo"><a href="#jsDelivr-GitHub-PicGo" class="headerlink" title="jsDelivr+GitHub+PicGo"></a>jsDelivr+GitHub+PicGo</h2><div class="note orange anzhiyufont anzhiyu-icon-dengpao simple"><p>GitHub图床访问国内速度慢，所以使用jsDelivr（CDN）加速访问。需要注意的是：</p><ol><li>GitHub容量为1GB，需要定时更换仓库，而且有可能会被官方删除，一般不会有事的，毕竟官方没那么闲</li><li>jsDelivr可能会因为DNS污染访问变慢，不过官方会定期修复，最好配备应急方案</li></ol></div><h3 id="创建一个新的GitHub库"><a href="#创建一个新的GitHub库" class="headerlink" title="创建一个新的GitHub库"></a>创建一个新的GitHub库</h3><p>如果没有GitHub账号的同学可以参考这篇<a href="https://blog.csdn.net/m0_67906358/article/details/128808210">博客</a></p><p><strong>GitHub国内访问比较慢，需要“科学”上网</strong></p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/13/65a2524139a3d.png" style="width:800px;"/></div></div><p>README文件可加可不加</p><h3 id="生成Token令牌"><a href="#生成Token令牌" class="headerlink" title="生成Token令牌"></a>生成Token令牌</h3><ul><li>右上角头像，进入setting</li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/13/65a25240c1608.png" style="width:800px;"/></div></div><ul><li>进入左侧栏底部的Deployer settings</li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/13/65a2523fd5dd3.png" style="width:800px;"/></div></div><ul><li>新建Token</li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/13/65a25240cb6b6.png" style="width:800px;"/></div></div><ul><li>选择参数后点击下面的创建，<strong>然后会生成一串字符，就是你的Token，只会出现一次，建议暂时不要关闭这个页面</strong></li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/13/65a25240cd411.png" style="width:800px;"/></div></div><h3 id="下载并安装PicGo工具并配置"><a href="#下载并安装PicGo工具并配置" class="headerlink" title="下载并安装PicGo工具并配置"></a>下载并安装PicGo工具并配置</h3><ul><li>下载</li></ul><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://github.com/Molunerfinn/PicGo">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://www.freeimg.cn/i/2024/01/09/659cb418d9cef.png)">          <i class="anzhiyufont anzhiyu-icon-link" style="display: none"></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">GitHub源码</div>            <div class="tag-link-sitename">PicGo</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><p>网盘提取码：xia2</p><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://pan.baidu.com/s/1oMzjI2BAh1T4lntcanwvUQ?pwd=xia2">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://www.freeimg.cn/i/2023/12/30/658f84e46d5ad.png)">          <i class="anzhiyufont anzhiyu-icon-link" style="display: none"></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">V2.3.1Windows安装包</div>            <div class="tag-link-sitename">PicGo</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><ul><li>安装好了以后，打开进行图床配置</li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/13/65a2524120395.png" style="width:800px;"/></div></div><p><strong>自定义域名一定是<a href="https://cdn.jsdelivr.net/gh/%E8%B4%A6%E6%88%B7%E5%90%8D/%E4%BB%93%E5%BA%93%E5%90%8D">https://cdn.jsdelivr.net/gh/账户名/仓库名</a></strong></p><ul><li>PicGo设置</li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/13/65a25240c4094.png" style="width:800px;"/></div></div><ul><li>选择GitHub图床</li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/13/65a25240e826f.png" style="width:800px;"/></div></div><p>至此，图床创建完成，在上传之前最好重启一下PicGo，我一开始配置好后好像不能立马生效。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>PicGo其实还支持其他的图床，大家有兴趣自行了解。OSS是需要付费的，七牛云和又拍云有免费额度。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;相信刚开始建站的同学都想要一个方便管理的图床，今天发现一个免费的图床搭建方案，访问挺快的，也方便管理。&lt;/p&gt;
&lt;p&gt;最新图床方案请看&lt;a </summary>
      
    
    
    
    <category term="技术分享" scheme="https://blog.xxfer.cn/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="图床" scheme="https://blog.xxfer.cn/tags/%E5%9B%BE%E5%BA%8A/"/>
    
    <category term="自建应用项目" scheme="https://blog.xxfer.cn/tags/%E8%87%AA%E5%BB%BA%E5%BA%94%E7%94%A8%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="jsDelivr" scheme="https://blog.xxfer.cn/tags/jsDelivr/"/>
    
  </entry>
  
</feed>
