<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小李同学 Coding</title>
  
  <subtitle>要努力变强鸭</subtitle>
  <link href="https://blog.xxfer.cn/rss.xml" rel="self"/>
  
  <link href="https://blog.xxfer.cn/"/>
  <updated>2024-01-20T02:00:00.000Z</updated>
  <id>https://blog.xxfer.cn/</id>
  
  <author>
    <name>xxfer</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>GitHub首页DIY：花里胡哨指数++</title>
    <link href="https://blog.xxfer.cn/posts/86bbdefa.html"/>
    <id>https://blog.xxfer.cn/posts/86bbdefa.html</id>
    <published>2024-01-20T00:00:00.000Z</published>
    <updated>2024-01-20T02:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note blue anzhiyufont anzhiyu-icon-fan simple"><p>终于算是把之前挖的坑填了，上学期只是把首页CV过来，有好些内容都不是自己的，而且也不是很熟悉，现在放假回家又可以好好折腾了😋。也算是花了一点时间，把GitHub首页搞好了，第一时间分享给大家，顺便做个记录。相信很多童靴也像我一样，在敲代码之余，都致力于美化自身所处的环境。比如对IDE的美化，对电脑壁纸的精挑细选等等。</p></div><p><strong>终于知道为什么网上关于GitHub Profile的详细教程那么少了，真的不好写。所以如果本篇文章对你有帮助，能在GitHub给个免费star吗？</strong></p><h2 id="话不多说，先上成果！"><a href="#话不多说，先上成果！" class="headerlink" title="话不多说，先上成果！"></a>话不多说，先上成果！</h2><p>奉上源库地址和截图：</p><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://github.com/LJJbyZJU">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://www.freeimg.cn/i/2023/12/23/6586e75c86de7.png)">          <i class="anzhiyufont anzhiyu-icon-link" style="display: none"></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">GitHub Profile</div>            <div class="tag-link-sitename">xxfer</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><details class="folding-tag" yellow><summary> 完整截图（建议点击图片放大看） </summary>              <div class='content'>              <div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/19/65aa983b1a483.jpg"/></div></div>              </div>            </details><p>如果喜欢，欢迎 CV 昂哈哈哈，能给我一个star就更好了。其实我的主页搞得有点过于花哨了，没必要，大家各取所需即可。</p><h2 id="开始花里胡哨"><a href="#开始花里胡哨" class="headerlink" title="开始花里胡哨"></a>开始花里胡哨</h2><details class="folding-tag" yellow><summary> 准备工作 </summary>              <div class='content'>              <p>其实GitHub首页DIY也很简单</p><ul><li>只需要新建一个仓库名和自己 Github 用户名相同的仓库并且添加一个<code>README.md</code>自述文件即可<div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/01/6592ad6165b65.png"/></div></div></li><li>GitHub默认为此文件添加了demo，我们编辑此文件，即可开启自己的DIY之路了！<div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/01/6592ad5470a5d.png"/></div></div></li><li>添加以后<div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/01/6592ad70d3030.png"/></div></div></li></ul><p><strong>所以说，GitHub的首页DIY实际上就是对<code>README.md</code>文件进行DIY</strong></p>              </div>            </details><div class="note orange anzhiyufont anzhiyu-icon-dengpao simple"><p>Github提供了这样一个特殊的markdown文件以供我们DIY主页，扩展性很高，如果熟悉HTML，CSS以及MarkDown 语法的话。资源的调用与布局不一一解释，相信看本篇博客的同学已有HTML的基础。</p></div><details class="folding-tag" yellow><summary> 无需配置Token即可使用 </summary>              <div class='content'>              <div class="note orange anzhiyufont anzhiyu-icon-dengpao simple"><p>这一部分不使用GitHub Actions，也就不需要使用Token，复制链接调整参数即可使用。</p></div><p><strong>注意下面的例子使用的一般是我的username，大家更换成自己的即可</strong></p><h3 id="开头打字特效"><a href="#开头打字特效" class="headerlink" title="开头打字特效"></a>开头打字特效</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/20/65aaab2744ed0.png"/></div></div><p>emmmm…对，就是这样的循环打字特效，很炫酷 –&gt; <a href="https://github.com/DenverCoder1/readme-typing-svg">源码传送门</a><br>可以使用官方给的<a href="https://readme-typing-svg.demolab.com/demo/">Demo site</a>，预览效果，然后直接复制代码即可。<br>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://blog.xxfer.cn/&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://readme-typing-svg.demolab.com?font=Fira+Code&amp;pause=1000&amp;width=435&amp;lines=console.log(%22Hello%2C%20World%22);小李今天又在努力变强鸭~&amp;center=true&amp;size=27&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="GitHub-Stats-Card"><a href="#GitHub-Stats-Card" class="headerlink" title="GitHub Stats Card"></a>GitHub Stats Card</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/20/65aaab9ac49ae.png"/></div></div><p>在<code>README.md</code>文件中获取动态生成的 GitHub 统计信息 –&gt; <a href="https://github.com/anuraghazra/github-readme-stats">源码传送门</a><br>这里建议看官方的README介绍，并不难，觉得看英文累，用浏览器的翻译就行。<br>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">height</span>=<span class="string">&quot;190px&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://github-readme-stats.vercel.app/api?username=ljjbyzju&amp;theme=radical&amp;show_icons=true&amp;count_private=true&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Most-used-languages"><a href="#Most-used-languages" class="headerlink" title="Most used languages"></a>Most used languages</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/20/65aaae64f06cf.png"/></div></div><p>在<code>README.md</code>文件中添加使用编程语言对比统计图 –&gt; <a href="https://github.com/anuraghazra/github-readme-stats">源码传送门</a><br>和上面的是同一个网址，还是建议直接看官方文档。<br>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">height</span>=<span class="string">&quot;190px&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://github-readme-stats-git-masterrstaa-rickstaa.vercel.app/api/top-langs/?username=ljjbyzju&amp;theme=radical&amp;show_icons=true&amp;count_private=true&amp;layout=compact&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="GitHub-streak"><a href="#GitHub-streak" class="headerlink" title="GitHub streak"></a>GitHub streak</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/20/65aab077e84f9.png"/></div></div><p>在<code>README.md</code>文件中展示连续提交代码的次数 –&gt; <a href="https://github.com/DenverCoder1/github-readme-streak-stats">源码传送门</a><br>可以使用官方给的<a href="https://streak-stats.demolab.com/">Demo site</a>，预览效果，复制代码即可。<br>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://github-readme-streak-stats.herokuapp.com/?user=LJJbyZJU&amp;theme=default&amp;hide_border=true&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Github-Profile-Trophy"><a href="#Github-Profile-Trophy" class="headerlink" title="Github Profile Trophy"></a>Github Profile Trophy</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/20/65aaaf1e2d84c.png"/></div></div><p>添加奖杯信息 –&gt; <a href="https://github.com/ryo-ma/github-profile-trophy/">源码传送门</a><br>官方给出了很多主题配色，可以都试一下，喜欢哪一种就用哪一种。<br>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">alig</span> <span class="attr">src</span>=<span class="string">&quot;https://github-profile-trophy.vercel.app/?username=ljjbyzju&amp;theme=juicyfresh&amp;column=9&amp;rank=-U&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="GitHub-Readme-Activity-Graph"><a href="#GitHub-Readme-Activity-Graph" class="headerlink" title="GitHub Readme Activity Graph"></a>GitHub Readme Activity Graph</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/20/65aab6397a3ff.png"/></div></div><p>动态生成的活动图，用于显示过去 31 天的 GitHub 活动 –&gt; <a href="https://github.com/Ashutosh00710/github-readme-activity-graph/">源码传送门</a></p><p>同样，可以选择主题配色和自定义元素颜色，详情参考官方文档。<br>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://github-readme-activity-graph.vercel.app/graph?username=ljjbyzju&amp;custom_title=Xxfer&#x27;s%20GitHub%20Activity%20Graph&amp;bg_color=141321&amp;color=A9FEF7&amp;line=626069&amp;point=F8D847&amp;area_color=FE428E&amp;title_color=FE428E&amp;area=true&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Spotify"><a href="#Spotify" class="headerlink" title="Spotify"></a>Spotify</h3><p><strong>我没有使用，因为不常用spotify</strong></p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/20/65ab6ae05b4ff.png"/></div></div><p>可以在 GitHub 首页中展示最近在 spotify 中听过的音乐 –&gt; <a href="https://github.com/kittinan/spotify-github-profile">源码传送门</a><br>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://spotify-github-profile.vercel.app/api/view?uid=31k53kp6hgkbovg72427dya5av44&amp;cover_image=true&amp;theme=default&amp;show_offline=false&amp;background_color=121212&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Joke"><a href="#Joke" class="headerlink" title="Joke"></a>Joke</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/20/65ab6cd12137e.png"/></div></div><p>可以在 GitHub 首页中展示一些关于 IT 行业的笑话 –&gt; <a href="https://github.com/ABSphreak/readme-jokes">源码传送门</a><br>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://readme-jokes.vercel.app/api?hideBorder&amp;bgColor=%23121212&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Jokes Card&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Quotes"><a href="#Quotes" class="headerlink" title="Quotes"></a>Quotes</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/20/65ab6cd127827.png"/></div></div><p>可以在 GitHub 首页中随机展示一段名人名言 –&gt; <a href="https://github.com/ABSphreak/readme-jokes">源码传送门</a><br>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://quotes-github-readme.vercel.app/api?type=horizontal&amp;theme=dark&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Shields-徽章"><a href="#Shields-徽章" class="headerlink" title="Shields 徽章"></a>Shields 徽章</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/20/65aab76e4ce05.png"/></div></div><p>为开源项目生成高质量小徽章图标，直接复制链接使用 –&gt; <a href="https://shields.io/">传送门</a><br>例：<br>HTML5</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://img.shields.io/badge/-HTML5-E34F26?style=flat-square&amp;logo=html5&amp;logoColor=white&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>CSS3</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://img.shields.io/badge/-CSS3-1572B6?style=flat-square&amp;logo=css3&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>JS</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://img.shields.io/badge/-JavaScript-oringe?style=flat-square&amp;logo=javascript&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>相信聪明的同学对比一下就能领会使用方法，其实就是通过<strong>改变参数</strong>制作徽标。可以参考这篇<a href="https://sspai.com/post/59593">文章</a><br>其中，logo参数和颜色都可以在这个<a href="https://simpleicons.org/">网站</a>搜索到，还支持下载svg和pgf，一并安利给大家。建议把<code>style</code>设为<code>flat</code>。</p><p>另外，制作徽标的网站不止Shields，推荐以下几个比较好用的：</p><ul><li><a href="https://badgen.net/">Badgen</a></li><li><a href="https://forthebadge.com/">Forthebadge</a></li><li><a href="https://badge.fury.io/">Version Badge</a></li></ul><h3 id="Visitor-Badge"><a href="#Visitor-Badge" class="headerlink" title="Visitor Badge"></a>Visitor Badge</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/20/65aabcfa488e4.png"/></div></div><p>这个徽章会实时改变，记录此页面被访问的次数 –&gt; <a href="https://visitor-badge.glitch.me/">传送门</a><br>修改一下<code>username</code>就能使用。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://komarev.com/ghpvc/?username=ljjbyzju&amp;label=Views&amp;color=0e75b6&amp;style=flat&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;访问量统计&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="社交统计"><a href="#社交统计" class="headerlink" title="社交统计"></a>社交统计</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/20/65aac0b5c9d39.png"/></div></div><p>在<code>README.md</code>文件中展示你在一些流行的网站的数据 –&gt; <a href="https://github.com/songquanpeng/stats-cards">传送门</a><br>目前API只支持一部分网站，不过可以把项目部署到自己的服务器，来监控自己服务器上部署的网站，具体参考官方文档。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://stats.justsong.cn/api/leetcode/?username=quanpeng&amp;theme=dark&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" yellow><summary> 需要配置Token配合GitHub Actions才能使用 </summary>              <div class='content'>              <div class="note orange anzhiyufont anzhiyu-icon-dengpao simple"><p>这一部分需要用到GitHub Actions来更新动态数据，部分GitHub Actions需要配置Token。</p></div><h3 id="3D-Contribution"><a href="#3D-Contribution" class="headerlink" title="3D Contribution"></a>3D Contribution</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/20/65ab72bf37cc4.png"/></div></div><p>在<code>README.md</code>文件中展示3D的贡献日历 –&gt; <a href="https://github.com/yoshi389111/github-profile-3d-contrib">源码传送门</a></p><p><strong>原理：利用GitHub Actions定时更新仓库中对应的svg，README文件中引用的svg也会跟着变化。</strong></p><ol><li>在项目根目录下创建<code>/.github/workflows/3D-contrib.yml</code>文件，将以下代码复制到该文件中：<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">3D</span> <span class="string">Contrib</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">schedule:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">cron:</span> <span class="string">&quot;0 21 * * *&quot;</span> <span class="comment">#更新时间</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">permissions:</span></span><br><span class="line">  <span class="attr">contents:</span> <span class="string">write</span></span><br><span class="line">  <span class="attr">pages:</span> <span class="string">write</span></span><br><span class="line">    </span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">generate-github-profile-3d-contrib</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">yoshi389111/github-profile-3d-contrib@0.7.0</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">GITHUB_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">USERNAME:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.repository_owner</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Commit</span> <span class="string">&amp;</span> <span class="string">Push</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          git config user.name github-actions</span></span><br><span class="line"><span class="string">          git config user.email github-actions@github.com</span></span><br><span class="line"><span class="string">          git add -A .</span></span><br><span class="line"><span class="string">          git commit -m &quot;generated&quot;</span></span><br><span class="line"><span class="string">          git push</span></span><br></pre></td></tr></table></figure></li><li>不需要额外的Token，文件中的<code>GITHUB_TOKEN</code>是工作流自动创建的令牌。</li><li>创建完提交代码到仓库，并尝试运行，看看是否配置成功</li></ol><ul><li>进入Setting旁边的<code>Action</code><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/20/65ab88b30456b.png"/></div></div></li><li>选择<code>3D Contrib</code>，然后<code>Run workflow</code>。</li></ul><ol start="4"><li>在<code>README.md</code>文件中引用<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/gh/LJJbyZJU/LJJbyZJU/profile-3d-contrib/profile-night-rainbow.svg&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="Snake-Contribution"><a href="#Snake-Contribution" class="headerlink" title="Snake Contribution"></a>Snake Contribution</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/20/65ab7608f3fc9.png"/></div></div><p>在<code>README.md</code>文件中展示贪吃蛇贡献日历 –&gt; <a href="https://github.com/marketplace/actions/generate-snake-game-from-github-contribution-grid">源码传送门</a></p><p><strong>原理：利用GitHub Actions定时更新仓库中对应的svg，README文件中引用的svg也会跟着变化。</strong></p><ol><li>在项目根目录下创建<code>/.github/workflows/Snake-contrib.yml</code>文件，将以下代码复制到该文件中：<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Snake</span> <span class="string">Contrib</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">schedule:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">cron:</span> <span class="string">&quot;0 20 * * *&quot;</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">generate:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">environment:</span> </span><br><span class="line">        <span class="attr">name:</span> <span class="string">GH_TOKEN</span></span><br><span class="line">    <span class="attr">timeout-minutes:</span> <span class="number">10</span></span><br><span class="line">    </span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">generate</span> <span class="string">github-contribution-grid-snake.svg</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">aelassas/snk/svg-only@main</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">github_user_name:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.repository_owner</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">outputs:</span> <span class="string">|</span></span><br><span class="line"><span class="string">            dist/profile-snake-contrib/github-contribution-grid-snake.svg</span></span><br><span class="line"><span class="string">            dist/profile-snake-contrib/github-contribution-grid-snake-dark.svg?palette=github-dark</span></span><br><span class="line"><span class="string"></span>            </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">push</span> <span class="string">github-contribution-grid-snake.svg</span> <span class="string">to</span> <span class="string">the</span> <span class="string">output</span> <span class="string">branch</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">crazy-max/ghaction-github-pages@v3.1.0</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">target_branch:</span> <span class="string">main</span></span><br><span class="line">          <span class="attr">build_dir:</span> <span class="string">dist</span></span><br><span class="line">          <span class="attr">keep_history:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">GITHUB_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GH_TOKEN</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure></li><li>我采用的是environment里的secret，可能和其他教程不太一样，不过是可行的</li></ol><details class="folding-tag" yellow><summary> 生成一个Token令牌 </summary>              <div class='content'>              <ul><li>右上角头像，进入setting<div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/13/65a25240c1608.png" style="width:800px;"/></div></div></li><li>进入左侧栏底部的Deployer settings<div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/13/65a2523fd5dd3.png" style="width:800px;"/></div></div></li><li>新建Token<div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/13/65a25240cb6b6.png" style="width:800px;"/></div></div></li><li>选择参数后点击下面的创建，<strong>然后会生成一串字符，就是你的Token，只会出现一次，建议暂时不要关闭这个页面</strong><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/13/65a25240cd411.png" style="width:800px;"/></div></div>注意上图的第三步建议前三个都勾选，如果不清楚含义，可以全部勾选</li></ul>              </div>            </details><details class="folding-tag" yellow><summary> 将Token添加到Environment secrets </summary>              <div class='content'>              <ul><li>进入仓库的<code>Setting</code><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/20/65ab88b30456b.png"/></div></div></li><li>打开<code>Action</code><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/20/65ab890150fee.png"/></div></div></li><li>把刚才生成的<code>Token</code>添加到<code>Environment secrets</code>，注意<code>Secret</code>的名字要和上面的yml文件中的<code>name</code>一致，为<code>GH_TOKEN</code>，否则会报错。<div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/20/65ab89a17a5d2.png"/></div></div></li></ul>              </div>            </details><ol start="3"><li>创建完提交代码到仓库，并尝试运行，看看是否配置成功。如果报错了，多半是因为<code>Secret</code>没有配置正确，检查一下。<strong>也可以在评论区交流。</strong><br>可能遇到的问题：</li></ol><ul><li>设置的<code>Environment secrets</code>的<code>name</code>与yml文件中的<code>environment name</code>不一致，重新设置一下，最后的样子就是下面框框内<div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/20/65ab89a17a5d2.png"/></div></div></li><li>运行成功以后可能git提交会报错，是因为Action生成了新的svg文件，导致远程仓库与本地内容不一致，使用下面代码应该可以解决<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;update&quot;</span></span><br><span class="line">git fetch</span><br><span class="line">git merge origin FETCH_HEAD</span><br><span class="line">git push</span><br></pre></td></tr></table></figure></li><li><strong>权限问题：</strong>本篇博客中的部分GitHub Actions需要修改（读+写）权限<br>解决方法：点击仓库的<code>setting</code>–&gt;<code>Actions</code>–&gt;<code>General</code>–&gt;勾选<code>Read and write permissions</code>–&gt;<code>Save</code><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/22/65ad4e82dfff2.png"/></div></div></li></ul><ol start="4"><li>在<code>README.md</code>文件中引用，这里只是一个例子，大家举一反三玩出新花样。<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;github-snake&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/gh/LJJbyZJU/LJJbyZJU/profile-snake-contrib/github-contribution-grid-snake-dark.svg&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="Fork-Star"><a href="#Fork-Star" class="headerlink" title="Fork&amp;Star"></a>Fork&amp;Star</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/20/65ab7be633b5f.png"/></div></div><p>在仓库介绍显示fork数和star数</p><ol><li>在项目根目录下创建<code>/.github/workflows/fork&amp;star.yml</code>文件，将以下代码复制到该文件中：<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Update</span> <span class="string">Fork</span> <span class="string">Star</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">fork:</span></span><br><span class="line">  <span class="attr">watch:</span></span><br><span class="line">    <span class="attr">types:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">started</span></span><br><span class="line">  <span class="attr">schedule:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">cron:</span> <span class="string">&#x27;0 0 * * *&#x27;</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">update:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">environment:</span> </span><br><span class="line">        <span class="attr">name:</span> <span class="string">ACCESS_TOKEN</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">This</span> <span class="string">repo</span> <span class="string">has</span> <span class="string">x</span> <span class="string">stars</span> <span class="string">y</span> <span class="string">forks</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">ouuan/This-repo-has-x-stars-y-forks-action@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.ACCESS_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">template:</span> <span class="string">&quot;Xxfer&#x27;s profile with &lt;starCount&gt; stars and &lt;forkCount&gt; forks 🎉&quot;</span></span><br></pre></td></tr></table></figure></li><li>按照上文的方法再生成一个新的Token</li><li>按上文步骤在仓库的Setting-&gt;Secrets-&gt;Actions-&gt;Environment secrets中添加<code>ACCESS_TOKEN</code><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/20/65ab91b97e2aa.png"/></div></div></li><li>创建完提交代码到仓库，并尝试运行，看看是否配置成功。</li><li>这个不显示在<code>README.md</code>文件中，不需要引用。</li></ol><h3 id="Metrics"><a href="#Metrics" class="headerlink" title="Metrics"></a>Metrics</h3><p>生成的东西有点多，建议看我的源码<code>github-metrics</code>文件夹，里面有很多的svg文件。<br>在 GitHub首页展示比较具体的使用信息 –&gt; <a href="https://github.com/lowlighter/metrics">源码传送门</a><br><a href="https://metrics.lecoq.io/">Demo site</a></p><p><strong>原理：利用GitHub Actions定时更新仓库中对应的svg，README文件中引用的svg也会跟着变化。</strong></p><ol><li>在项目根目录下创建<code>/.github/workflows/metrics.yml</code>文件，将以下代码复制到该文件中：<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Metrics</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">schedule:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">cron:</span> <span class="string">&quot;0 0 * * *&quot;</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line">  <span class="comment"># push: &#123;branches: [&quot;master&quot;, &quot;main&quot;]&#125;</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">github-metrics:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">environment:</span> </span><br><span class="line">      <span class="attr">name:</span> <span class="string">METRICS_TOKEN</span></span><br><span class="line">    <span class="attr">permissions:</span></span><br><span class="line">      <span class="attr">contents:</span> <span class="string">write</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="comment"># 基础信息（顺带了几个小插件）</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">base</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">lowlighter/metrics@latest</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">filename:</span> <span class="string">github-metrics/base.svg</span></span><br><span class="line">          <span class="comment"># Your GitHub token</span></span><br><span class="line">          <span class="attr">token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.METRICS_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="comment"># Options</span></span><br><span class="line">          <span class="attr">user:</span> <span class="string">LJJbyZJU</span></span><br><span class="line">          <span class="attr">template:</span> <span class="string">classic</span></span><br><span class="line">          <span class="attr">config_timezone:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line">          <span class="attr">base:</span> <span class="string">&quot;header, activity, community, repositories&quot;</span></span><br><span class="line">          <span class="comment"># 此插件为文档中的 🧮 Repositories traffic</span></span><br><span class="line">          <span class="attr">plugin_traffic:</span> <span class="literal">yes</span></span><br><span class="line">          <span class="comment"># 此插件为文档中的 👨‍💻 Lines of code changed</span></span><br><span class="line">          <span class="attr">plugin_lines:</span> <span class="literal">yes</span></span><br><span class="line">          <span class="comment"># 此插件为文档中的 🙋 Introduction</span></span><br><span class="line">          <span class="attr">plugin_introduction:</span> <span class="literal">yes</span></span><br><span class="line">          <span class="comment"># 此插件为文档中的 🎫 Gists</span></span><br><span class="line">          <span class="attr">plugin_gists:</span> <span class="literal">yes</span></span><br><span class="line">          <span class="comment"># 此插件为文档中的 💫 Star lists</span></span><br><span class="line">          <span class="attr">plugin_starlists:</span> <span class="literal">yes</span></span><br><span class="line">          <span class="attr">plugin_starlists_limit_repositories:</span> <span class="number">2</span></span><br><span class="line">          <span class="attr">plugin_starlists_languages:</span> <span class="literal">yes</span></span><br><span class="line">          <span class="attr">plugin_starlists_limit_languages:</span> <span class="number">8</span></span><br><span class="line">          <span class="attr">plugin_starlists_only:</span> <span class="string">Awesome</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 📅 Isometric commit calendar</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Full-year</span> <span class="string">calendar</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">lowlighter/metrics@latest</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">filename:</span> <span class="string">github-metrics/isocalendar.fullyear.svg</span></span><br><span class="line">          <span class="attr">token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.METRICS_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="comment"># 不添加基础信息</span></span><br><span class="line">          <span class="attr">base:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">          <span class="comment"># 使用此插件</span></span><br><span class="line">          <span class="attr">plugin_isocalendar:</span> <span class="literal">yes</span></span><br><span class="line">          <span class="comment"># 设置成显示整年</span></span><br><span class="line">          <span class="attr">plugin_isocalendar_duration:</span> <span class="string">full-year</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 🈷️ Languages activity</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Indepth</span> <span class="string">analysis</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">lowlighter/metrics@latest</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">filename:</span> <span class="string">github-metrics/languages.indepth.svg</span></span><br><span class="line">          <span class="attr">token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.METRICS_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">base:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">          <span class="attr">plugin_languages:</span> <span class="literal">yes</span></span><br><span class="line">          <span class="attr">plugin_languages_ignored:</span> <span class="string">&gt;-</span></span><br><span class="line"><span class="string">            html, css, tex, less, dockerfile, makefile, qmake, lex, cmake, shell,</span></span><br><span class="line"><span class="string">            gnuplot</span></span><br><span class="line"><span class="string"></span>          <span class="attr">plugin_languages_indepth:</span> <span class="literal">yes</span></span><br><span class="line">          <span class="attr">plugin_languages_details:</span> <span class="string">lines,</span> <span class="string">bytes-size</span></span><br><span class="line">          <span class="attr">plugin_languages_limit:</span> <span class="number">4</span></span><br><span class="line">          <span class="attr">plugin_languages_analysis_timeout:</span> <span class="number">15</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># ✨ Stargazers   </span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Using</span> <span class="string">chartist</span> <span class="string">charts</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">lowlighter/metrics@latest</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">filename:</span> <span class="string">github-metrics/stargazers.chartist.svg</span></span><br><span class="line">          <span class="attr">token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.METRICS_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">base:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">          <span class="attr">plugin_stargazers:</span> <span class="literal">yes</span></span><br><span class="line">          <span class="attr">plugin_stargazers_charts_type:</span> <span class="string">chartist</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 🌟 Recently starred repositories</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Recently</span> <span class="string">starred</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">lowlighter/metrics@latest</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">filename:</span> <span class="string">github-metrics/stars.svg</span></span><br><span class="line">          <span class="attr">token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.METRICS_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">base:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">          <span class="attr">plugin_stars:</span> <span class="literal">yes</span></span><br><span class="line">          <span class="attr">plugin_stars_limit:</span> <span class="number">10</span></span><br><span class="line">          </span><br><span class="line">      <span class="comment"># 💡 Coding habits and activity</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Recent</span> <span class="string">activity</span> <span class="string">charts</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">lowlighter/metrics@latest</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">filename:</span> <span class="string">github-metrics/habits.charts.svg</span></span><br><span class="line">          <span class="attr">token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.METRICS_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">base:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">          <span class="attr">plugin_habits:</span> <span class="literal">yes</span></span><br><span class="line">          <span class="attr">plugin_habits_facts:</span> <span class="literal">no</span></span><br><span class="line">          <span class="attr">plugin_habits_charts:</span> <span class="literal">yes</span></span><br><span class="line">          <span class="attr">config_timezone:</span> <span class="string">Europe/Paris</span></span><br><span class="line">          </span><br><span class="line">      <span class="comment"># 🎟️ Follow-up of issues and pull requests </span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Indepth</span> <span class="string">analysis</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">lowlighter/metrics@latest</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">filename:</span> <span class="string">github-metrics/followup.indepth.svg</span></span><br><span class="line">          <span class="attr">token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.METRICS_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">base:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">          <span class="attr">plugin_followup:</span> <span class="literal">yes</span></span><br><span class="line">          <span class="attr">plugin_followup_indepth:</span> <span class="literal">yes</span></span><br><span class="line">          </span><br><span class="line">      <span class="comment"># 🎭 Comment reactions</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Comment</span> <span class="string">reactions</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">lowlighter/metrics@latest</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">filename:</span> <span class="string">github-metrics/reactions.svg</span></span><br><span class="line">          <span class="attr">token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.METRICS_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">base:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">          <span class="attr">plugin_reactions:</span> <span class="literal">yes</span></span><br><span class="line">          <span class="attr">plugin_reactions_limit:</span> <span class="number">100</span></span><br><span class="line">          <span class="attr">plugin_reactions_details:</span> <span class="string">percentage</span></span><br><span class="line">          </span><br><span class="line">      <span class="comment"># 📓 Featured repositories</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Pinned</span> <span class="string">repositories</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">lowlighter/metrics@latest</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">filename:</span> <span class="string">github-metrics/repositories.pinned.svg</span></span><br><span class="line">          <span class="attr">token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.METRICS_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">base:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">          <span class="attr">plugin_repositories:</span> <span class="literal">yes</span></span><br><span class="line">          <span class="attr">plugin_repositories_pinned:</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 💬 Discussions</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">GitHub</span> <span class="string">Discussions</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">lowlighter/metrics@latest</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">filename:</span> <span class="string">github-metrics/discussions.svg</span></span><br><span class="line">          <span class="attr">token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.METRICS_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">base:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">          <span class="attr">plugin_discussions:</span> <span class="literal">yes</span></span><br><span class="line">          <span class="attr">plugin_discussions_categories_limit:</span> <span class="number">8</span>       </span><br><span class="line">  </span><br><span class="line">      <span class="comment"># 📆 Commit calendar</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Full</span> <span class="string">history</span> <span class="string">calendar</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">lowlighter/metrics@latest</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">filename:</span> <span class="string">github-metrics/calendar.full.svg</span></span><br><span class="line">          <span class="attr">token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.METRICS_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">base:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">          <span class="attr">plugin_calendar:</span> <span class="literal">yes</span></span><br><span class="line">          <span class="attr">plugin_calendar_limit:</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 🏆 Achievements</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Compact</span> <span class="string">display</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">lowlighter/metrics@latest</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">filename:</span> <span class="string">github-metrics/achievements.compact.svg</span></span><br><span class="line">          <span class="attr">token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.METRICS_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">base:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">          <span class="attr">plugin_achievements:</span> <span class="literal">yes</span></span><br><span class="line">          <span class="attr">plugin_achievements_only:</span> <span class="string">&gt;-</span></span><br><span class="line"><span class="string">            polyglot, stargazer, sponsor, deployer, member, maintainer, developer,</span></span><br><span class="line"><span class="string">            scripter, packager, explorer, infographile, manager</span></span><br><span class="line"><span class="string"></span>          <span class="attr">plugin_achievements_display:</span> <span class="string">compact</span></span><br><span class="line">          <span class="attr">plugin_achievements_threshold:</span> <span class="string">X</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 📰 Recent activity</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Recent</span> <span class="string">activity</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">lowlighter/metrics@latest</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">filename:</span> <span class="string">github-metrics/activity.svg</span></span><br><span class="line">          <span class="attr">token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.METRICS_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">base:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">          <span class="attr">plugin_activity:</span> <span class="literal">yes</span></span><br><span class="line">          <span class="attr">plugin_activity_limit:</span> <span class="number">5</span></span><br><span class="line">          <span class="attr">plugin_activity_days:</span> <span class="number">0</span></span><br><span class="line">          <span class="attr">plugin_activity_filter:</span> <span class="string">issue,</span> <span class="string">pr,</span> <span class="string">release,</span> <span class="string">fork,</span> <span class="string">review,</span> <span class="string">ref/create</span></span><br><span class="line">  </span><br><span class="line">      <span class="comment"># 🗨️ Stack Overflow</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Top</span> <span class="string">answers</span> <span class="string">from</span> <span class="string">stackoverflow</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">lowlighter/metrics@latest</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">filename:</span> <span class="string">github-metrics/stackoverflow.svg</span></span><br><span class="line">          <span class="attr">token:</span> <span class="string">NOT_NEEDED</span></span><br><span class="line">          <span class="attr">base:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">          <span class="attr">plugin_stackoverflow:</span> <span class="literal">yes</span></span><br><span class="line">          <span class="attr">plugin_stackoverflow_user:</span> <span class="number">1</span></span><br><span class="line">          <span class="attr">plugin_stackoverflow_sections:</span> <span class="string">answers-top</span></span><br><span class="line">          <span class="attr">plugin_stackoverflow_limit:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure></li><li>按照上文的方法再生成一个新的Token</li><li>按上文步骤在仓库的Setting-&gt;Secrets-&gt;Actions-&gt;Environment secrets中添加<code>METRICS_TOKEN</code><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/20/65ab93c44e8fc.png"/></div></div></li><li>创建完提交代码到仓库，并尝试运行，看看是否配置成功。</li><li>在<code>README.md</code>文件引用<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/gh/LJJbyZJU/LJJbyZJU/github-metrics/base.svg&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="Wakatime"><a href="#Wakatime" class="headerlink" title="Wakatime"></a>Wakatime</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/20/65ab80495370f.png"/></div></div><p>在GitHub首页展示日常编程情况 –&gt; <a href="https://wakatime.com/dashboard">官网传送门</a><br>先在官网注册账号，进入wakatime官网的<code>Setting</code>，里面的<code>Secret API Key</code>一会儿会用到。</p><ol><li>在项目根目录下创建<code>/.github/workflows/waka.yml</code>文件，将以下代码复制到该文件中：<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Waka</span> <span class="string">Readme</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">schedule:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">cron:</span> <span class="string">&#x27;30 18 * * *&#x27;</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">update-readme:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Update</span> <span class="string">Readme</span> <span class="string">with</span> <span class="string">Metrics</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">environment:</span> </span><br><span class="line">      <span class="attr">name:</span> <span class="string">GH_TOKEN</span></span><br><span class="line">    <span class="attr">permissions:</span></span><br><span class="line">      <span class="attr">contents:</span> <span class="string">write</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">anmol098/waka-readme-stats@master</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">WAKATIME_API_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.WAKATIME_API_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">GH_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GH_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">SHOW_LINES_OF_CODE :</span> <span class="string">&quot;False&quot;</span></span><br><span class="line">          <span class="attr">SHOW_PROFILE_VIEWS :</span> <span class="string">&quot;False&quot;</span></span><br><span class="line">          <span class="attr">SHOW_LANGUAGE_PER_REPO :</span> <span class="string">&quot;False&quot;</span></span><br><span class="line">          <span class="attr">SHOW_LOC_CHART :</span> <span class="string">&quot;False&quot;</span></span><br><span class="line">          <span class="attr">SHOW_SHORT_INFO :</span> <span class="string">&quot;False&quot;</span></span><br><span class="line">          <span class="attr">SHOW_PROJECTS :</span> <span class="string">&quot;False&quot;</span></span><br><span class="line">          <span class="attr">SHOW_TOTAL_CODE_TIME :</span> <span class="string">&quot;False&quot;</span></span><br></pre></td></tr></table></figure></li><li>这里的<code>GH_TOKEN</code>直接使用之前创建的，所以不需要再生成新的Token了</li><li>按上文步骤在仓库的Setting-&gt;Secrets-&gt;Actions-&gt;<strong>Repository secrets</strong>中添加<code>WAKATIME_API_KEY</code>，值就是wakatime官网<code>Setting</code>里面的<code>Secret API Key</code><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/20/65ab94251ce6b.png"/></div></div></li><li>创建完提交代码到仓库，并尝试运行，看看是否配置成功。</li><li>在<code>README.md</code>文件引用，<strong>这里的引用方式不太一样</strong>，在想要添加内容的地方插入下面代码，内容最终会添加到两个注释之间<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--START_SECTION:waka--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--END_SECTION:waka--&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="Social-Readme"><a href="#Social-Readme" class="headerlink" title="Social Readme"></a>Social Readme</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/20/65ab8221232d4.png"/></div></div><p>在GitHub首页展示博客等个人网站的最新动态信息 –&gt; <a href="https://github.com/zylele/social-readme">源码传送门</a></p><ol><li>在项目根目录下创建<code>/.github/workflows/social.yml</code>文件，将以下代码复制到该文件中：<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Social</span> <span class="string">Readme</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">schedule:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">cron:</span> <span class="string">&#x27;0 16 * * *&#x27;</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">permissions:</span></span><br><span class="line">  <span class="attr">contents:</span> <span class="string">write</span> <span class="comment"># To write the generated contents to the readme</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">update-readme:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">zylele/social-readme@master</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">blog_rss_link:</span> <span class="string">https://blog.xxfer.cn/rss.xml</span></span><br><span class="line">          <span class="attr">blog_limit:</span> <span class="number">6</span> <span class="comment"># blog数量</span></span><br><span class="line">          <span class="attr">douban_name:</span> <span class="string">xxferyyds</span></span><br><span class="line">          <span class="attr">douban_limit:</span> <span class="number">5</span> <span class="comment"># 豆瓣最新动态数量</span></span><br><span class="line">          <span class="attr">commit_message:</span> <span class="string">Updated</span> <span class="string">douban</span> <span class="comment"># commit说明</span></span><br></pre></td></tr></table></figure></li><li>这一步不需要生成Token</li><li>需要提供网站的rss文件，比如上面是我的博客rss链接。豆瓣只需要提供username即可。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://blog.xxfer.cn/rss.xml</span><br></pre></td></tr></table></figure></li><li>在<code>README.md</code>文件中引用，引用方式和wakatime类似<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- START_SECTION:blog --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- END_SECTION:blog --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- START_SECTION:douban --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- END_SECTION:douban --&gt;</span></span><br></pre></td></tr></table></figure></li><li>创建完提交代码到仓库，并尝试运行，看看是否配置成功。</li></ol>              </div>            </details><h2 id="API的使用"><a href="#API的使用" class="headerlink" title="API的使用"></a>API的使用</h2><p>由于DIY过程中有很多的API使用，这些需要用到Token和工作流，如果又不理解的同学可以参考<a href="https://blog.xxfer.cn/posts/9a2a157c.html">利用Github_Token玩转仓库API</a>和<a href="https://blog.xxfer.cn/posts/3c96c005.html">如何使用Github Actions提高独立开发效率？</a></p><h2 id="案例仓库"><a href="#案例仓库" class="headerlink" title="案例仓库"></a>案例仓库</h2><ul><li><a href="https://github.com/abhisheknaiidu/awesome-github-profile-readme">https://github.com/abhisheknaiidu/awesome-github-profile-readme</a></li><li><a href="https://github.com/eryajf/awesome-github-profile-readme-chinese">https://github.com/eryajf/awesome-github-profile-readme-chinese</a></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://blog.sunguoqi.com/posts/f3b61b38/">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="">          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">打造个性化的GitHub首页</div>            <div class="tag-link-sitename">小孙同学</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note blue anzhiyufont anzhiyu-icon-fan simple&quot;&gt;&lt;p&gt;终于算是把之前挖的坑填了，上学期只是把首页CV过来，有好些内容都不是自己的，而且也不是很熟悉，现在放假回家又可以好好折腾了😋。也算是花了一点时间，把Git</summary>
      
    
    
    
    <category term="技术分享" scheme="https://blog.xxfer.cn/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="GitHub" scheme="https://blog.xxfer.cn/tags/GitHub/"/>
    
    <category term="DIY" scheme="https://blog.xxfer.cn/tags/DIY/"/>
    
  </entry>
  
  <entry>
    <title>反向代理神器：Nginx Proxy Manager</title>
    <link href="https://blog.xxfer.cn/posts/79f9b780.html"/>
    <id>https://blog.xxfer.cn/posts/79f9b780.html</id>
    <published>2024-01-17T15:00:00.000Z</published>
    <updated>2024-01-17T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>怎么样才能把 IP + 端口变成域名来访问？<br>答案是用反向代理。</p><p>代理就是第三方，一般分为正向代理和反向代理两种。<br><strong>正向代理面向客户端，而反向代理面向的是服务器。</strong>可以学习下面这个视频：</p><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://www.bilibili.com/video/BV1SM411X7ye/?spm_id_from=333.337.search-card.all.click&vd_source=91a233ea2e45cea087336c119461d12b">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="">          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">什么是正向代理？什么是反向代理？</div>            <div class="tag-link-sitename">猪猫FatCat</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><h2 id="Nginx-Proxy-Manager"><a href="#Nginx-Proxy-Manager" class="headerlink" title="Nginx Proxy Manager"></a>Nginx Proxy Manager</h2><p>官网：<a href="https://nginxproxymanager.com/">https://nginxproxymanager.com/</a><br>门槛极低，操作简单，不需要你掌握很复杂的 Nginx 配置知识，只需要几步就能很轻松完成反向代理的设置和 SSL 证书的部署。</p><h2 id="部署环境"><a href="#部署环境" class="headerlink" title="部署环境"></a>部署环境</h2><p>服务器：阿里云服务器<br>操作系统：Debian 11</p><h2 id="开始部署"><a href="#开始部署" class="headerlink" title="开始部署"></a>开始部署</h2><h3 id="添加-SWAP-虚拟内存"><a href="#添加-SWAP-虚拟内存" class="headerlink" title="添加 SWAP 虚拟内存"></a>添加 SWAP 虚拟内存</h3><div class="note orange anzhiyufont anzhiyu-icon-dengpao simple"><p><strong>如果服务器内存比较小，建议配置这一步。</strong>否则，可以忽略此步。</p></div><p>设置 SWAP 可以用脚本:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O box.sh https://raw.githubusercontent.com/BlueSkyXN/SKY-BOX/main/box.sh &amp;&amp; <span class="built_in">chmod</span> +x box.sh &amp;&amp; clear &amp;&amp; ./box.sh</span><br></pre></td></tr></table></figure><p>选择 18，然后输入你想要扩容的数值即可。<strong>输入的数值单位为MB，即输入1024，就是扩容1GB</strong></p><h3 id="升级-packages"><a href="#升级-packages" class="headerlink" title="升级 packages"></a>升级 packages</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo -i <span class="comment"># 切换到 root 用户</span></span><br><span class="line"></span><br><span class="line">apt update -y  <span class="comment"># 升级 packages</span></span><br><span class="line"></span><br><span class="line">apt install wget curl sudo vim git -y  <span class="comment"># Debian 系统比较干净，安装常用的软件</span></span><br></pre></td></tr></table></figure><h3 id="安装-Docker和Docker-compose-环境"><a href="#安装-Docker和Docker-compose-环境" class="headerlink" title="安装 Docker和Docker-compose 环境"></a>安装 Docker和Docker-compose 环境</h3><p>参考这篇<a href="https://u.sb/debian-install-docker/">博客</a></p><h3 id="安装-Nginx-Proxy-Manager"><a href="#安装-Nginx-Proxy-Manager" class="headerlink" title="安装 Nginx Proxy Manager"></a>安装 Nginx Proxy Manager</h3><ul><li><p>创建一下安装的目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo -i</span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> -p /root/data/docker_data/npm</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /root/data/docker_data/npm</span><br></pre></td></tr></table></figure></li><li><p>编写yaml文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim docker-compose.yml</span><br></pre></td></tr></table></figure><p>英文输入法下，按 <code>i</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">app:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&#x27;jc21/nginx-proxy-manager:latest&#x27;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;80:80&#x27;</span>  <span class="comment"># 保持默认即可，不建议修改左侧的80</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;81:81&#x27;</span>  <span class="comment"># 冒号左边可以改成自己服务器未被占用的端口</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;443:443&#x27;</span> <span class="comment"># 保持默认即可，不建议修改左侧的443</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/data</span> <span class="comment"># 冒号左边可以改路径，现在是表示把数据存放在在当前文件夹下的 data 文件夹中</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./letsencrypt:/etc/letsencrypt</span>  <span class="comment"># 冒号左边可以改路径，现在是表示把数据存放在在当前文件夹下的 letsencrypt 文件夹中</span></span><br></pre></td></tr></table></figure><p>按一下 <code>esc</code>，然后 <code>:wq</code> 保存退出。</p></li><li><p>打开服务器防火墙并访问网页（非必需但很重要）</p></li></ul><p><strong>确保自己使用的服务器已经将上面的yaml文件中的端口都开启了</strong>，否则后面网页会访问不了。</p><p>有的服务器厂商默认关闭不常用的端口，所以需要手动打开。阿里云服务器是在安全组中添加规则开放端口，可以参考<a href="https://developer.aliyun.com/article/1209367">这里</a>，最好是参考所使用服务商提供的官方文档。</p><h3 id="运行并访问-Nginx-Proxy-Manager"><a href="#运行并访问-Nginx-Proxy-Manager" class="headerlink" title="运行并访问 Nginx Proxy Manager"></a>运行并访问 Nginx Proxy Manager</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/data/docker_data/npm   <span class="comment"># 来到 dockercompose 文件所在的文件夹下</span></span><br><span class="line"></span><br><span class="line">docker-compose up -d </span><br></pre></td></tr></table></figure><p>开启成功以后，理论上就可以输入 <code>http:// + 服务器ip:81</code> 访问了。</p><p>默认登陆名和密码：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Email:    admin@example.com</span><br><span class="line">Password: changeme</span><br></pre></td></tr></table></figure><div class="note red anzhiyufont anshiyu-icon-dengpao simple"><ol><li>不知道服务器 IP，可以直接在命令行输入：curl ip.sb，会显示当前服务器的 IP。</li><li>遇到访问不了的情况，请再次检查在宝塔面板的防火墙或服务商的后台防火墙<strong>是否打开对应了端口</strong>。</li></ol></div><h2 id="今后更新-Nginx-Proxy-Manager"><a href="#今后更新-Nginx-Proxy-Manager" class="headerlink" title="今后更新 Nginx Proxy Manager"></a>今后更新 Nginx Proxy Manager</h2><p>Docker部署的应用更新都很方便</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/data/docker_data/npm</span><br><span class="line"></span><br><span class="line">docker-compose down </span><br><span class="line"></span><br><span class="line"><span class="built_in">cp</span> -r /root/data/docker_data/npm /root/data/docker_data/npm.archive  <span class="comment"># 万事先备份，以防万一</span></span><br><span class="line"></span><br><span class="line">docker-compose pull</span><br><span class="line"></span><br><span class="line">docker-compose up -d    <span class="comment"># 请不要使用 docker-compose stop 来停止容器，因为这么做需要额外的时间等待容器停止；docker-compose up -d 直接升级容器时会自动停止并立刻重建新的容器，完全没有必要浪费那些时间。</span></span><br><span class="line"></span><br><span class="line">docker image prune  <span class="comment"># prune 命令用来删除不再使用的 docker 对象。删除所有未被 tag 标记和未被容器使用的镜像</span></span><br></pre></td></tr></table></figure><p>提示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">WARNING! This will remove all dangling images.</span><br><span class="line">Are you sure you want to <span class="built_in">continue</span>? [y/N] </span><br></pre></td></tr></table></figure><p>输入 <code>y</code></p><h2 id="卸载-Nginx-Proxy-Manager"><a href="#卸载-Nginx-Proxy-Manager" class="headerlink" title="卸载 Nginx Proxy Manager"></a>卸载 Nginx Proxy Manager</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/data/docker_data/npm</span><br><span class="line"></span><br><span class="line">docker-compose down </span><br><span class="line"></span><br><span class="line"><span class="built_in">rm</span> -rf /root/data/docker_data/npm  <span class="comment"># 完全删除映射到本地的数据</span></span><br></pre></td></tr></table></figure><p>可以卸载得很干净。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>本篇博客只是简单搭建一下Nginx Proxy Manager，已经能够使用它来做反向代理了。关于它的具体使用可能后面会更，大家也可以自己研究一下。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;怎么样才能把 IP + 端口变成域名来访问？&lt;br&gt;答案是用反向代理。&lt;/p&gt;
&lt;p&gt;代理就是第三方，一般分为正向代理和反向代理两种。&lt;br</summary>
      
    
    
    
    <category term="技术分享" scheme="https://blog.xxfer.cn/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="网络安全" scheme="https://blog.xxfer.cn/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    <category term="ECS" scheme="https://blog.xxfer.cn/tags/ECS/"/>
    
  </entry>
  
  <entry>
    <title>Picsur imgur：docker部署简单易管理的图床项目</title>
    <link href="https://blog.xxfer.cn/posts/4c41eeca.html"/>
    <id>https://blog.xxfer.cn/posts/4c41eeca.html</id>
    <published>2024-01-15T20:00:00.000Z</published>
    <updated>2024-01-16T00:43:00.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note blue anzhiyufont anzhiyu-icon-fan simple"><p>本篇博客所有图片均存放在picsur图床上，目前感觉良好。另外，由于我的服务器硬盘容量有限，所以目前只是自用。如果想要体验几天，试试好不好用，可以QQ联系我，可以开几个小号供大家体验。</p></div><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>前段时间推荐了两种图床方案：<a href="https://blog.xxfer.cn/posts/a008ab16.html">npm图床</a>和<a href="https://blog.xxfer.cn/posts/92211228.html">jsDelivr图床</a><br>可是使用的感受并不好，如果配合CDN进行缓存可能效果还行，但是没有缓存策略的话图片有时候都难以加载。所以就像我之前所说，稳定的方案肯定是要结合云存储的，当然也可以是免费图床也可以是值得信赖的低价图床。对于没有服务器的同学，我目前比较推荐使用的是：</p><ul><li>免费图床：<a href="https://www.freeimg.cn/">Freeimg图床</a></li><li>付费图床：<a href="https://image.anheyu.com/">安知鱼图床</a>和杜老师的<a href="https://7bu.top/">去不图床</a></li></ul><p>这些图床其实都是基于国人开发的<a href="https://www.lsky.pro/">兰空图床</a>项目搭建的，有服务器的同学可以试试。不过它比较适合多人使用，自用的话也可以，但是感觉有点大材小用了。</p><p>所以，今天想要分享的就是一个适合自用的开源图床项目——<a href="https://github.com/CaramelFur/Picsur">Picsur</a>，这是国外某位大佬开发的，目前还没有汉化版，不过词汇量不大，实在不习惯的话，可以使用浏览器自带的翻译功能。另外，这个项目本就是这位大佬找遍了GitHub，但是没有找到好用的图床项目，才用PHP写了这个项目。所以，我感觉外国程序员还是比较纯粹的，大家不必担心挂马什么的，可以放心使用。</p><p>我使用它的原因：</p><ul><li>Freeimg图床暂时不支持webp格式的图片上传，picsur支持</li><li>界面比兰空简单，适合个人搭建使用</li><li>部署在国内服务器上，访问速度当然不慢</li></ul><h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h2><ul><li><p>上传界面，提交后直接上传</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://picsur.xxfer.cn/i/aac9f39c-7f05-4ede-89e7-3502f5a8e04a.webp"/></div></div></li><li><p>可以自由设置图片格式，尤其支持webp，至于其他格式，下文会具体介绍</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://picsur.xxfer.cn/i/95c4869d-7678-491c-934a-90b946c360a0.webp"/></div></div></li><li><p>已上传的图片</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://picsur.xxfer.cn/i/ee7e76cf-f320-40b6-a546-3e785b387bd9.webp"/></div></div></li><li><p>支持多种图片操作，还可以设置图片有效期</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://picsur.xxfer.cn/i/1e8066b0-f424-4884-94bc-3f296a44d841.webp"/></div></div></li><li><p>可以自定义用户组</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://picsur.xxfer.cn/i/546faa32-0ee7-4add-92b3-b3b9907da2e3.webp"/></div></div></li></ul><p><strong>还有一些其他功能</strong></p><div class="note orange anzhiyufont anzhiyu-icon-dengpao simple"><p>我主要是看重webp格式和它足够轻量简洁这两个优点，比兰空要简约。</p></div><h2 id="功能简介"><a href="#功能简介" class="headerlink" title="功能简介"></a>功能简介</h2><ul><li>支持 docker 一键部署</li><li>匿名上传</li><li>支持多账户</li><li>适当的 CORS 限制：防止恶意的网站通过跨域请求获取或修改用户的信息</li><li>Exif 信息剥离</li><li>支持保留原始图像的能力</li><li>支持多种格式：<ol><li>QOI</li><li>JPG</li><li>PNG</li><li>WEBP（支持动画）</li><li>TIFF</li><li>BMP</li><li>GIF（支持动画）</li><li>支持转换图像</li></ol></li><li>支持编辑图像<ol><li>调整大小</li><li>旋转</li><li>翻转</li><li>去除透明度</li><li>负片效果</li><li>灰度化处理</li><li>可删除图片</li></ol></li><li>正确的数据库迁移</li><li>支持在列表中显示自己的图片</li><li>支持聊天窗口上正确显示预览图</li><li>支持设置图片有效期</li><li>支持 ShareX API</li><li>支持 ARM64 和 AMD64 Docker 镜像</li><li>白色模式（WIP）</li><li>公共画廊（WIP）</li><li>相册（WIP）</li></ul><h3 id="EXIF-是什么？"><a href="#EXIF-是什么？" class="headerlink" title="EXIF 是什么？"></a>EXIF 是什么？</h3><p>EXIF 数据，全称”Exchangeable Image File Format”，是一种包含各种关于照片的信息的数据格式。它可以包含很多有关照片的信息，比如相机制造商、相机型号、照片拍摄日期、ISO 设置、快门速度、焦距，是否使用了闪光灯等等。一些相机还会添加地理位置的 gps 信息。</p><p>正因为 EXIF 数据可能包含这种敏感信息，例如地理位置，所以在分享照片的时候需要小心。如果不希望自己的这些信息被公开，应该在发布照片之前去除这些 EXIF 数据。</p><h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><ul><li>服务器：我使用的是阿里云的ECS云服务器，其他的VPS都行</li><li>操作系统：Debian 11</li><li>安装好 Docker、Docker-compose（相关脚本），参考这篇<a href="https://u.sb/debian-install-docker/">博客</a></li></ul><p>【非必需但建议】域名一枚，并做好解析到服务器上<br>【非必需】提前安装好宝塔面板海外版本 aapanel，并安装好 Nginx<br>【非必需但建议】安装好 Nginx Proxy Manager（我也是使用docker部署的，有时间写篇博客记录一下）</p><div class="note orange anzhiyufont anzhiyu-icon-dengpao simple"><p>既然用作图床，服务器的硬盘当然越大越好，不过自己用的话已经足够使用了。</p></div><h2 id="使用docker部署"><a href="#使用docker部署" class="headerlink" title="使用docker部署"></a>使用docker部署</h2><div class="note orange anzhiyufont anzhiyu-icon-dengpao simple"><p>需要事先安装 Docker和Docker compose环境，参考这篇<a href="https://u.sb/debian-install-docker/">博客</a></p></div><h3 id="创建一下安装的目录"><a href="#创建一下安装的目录" class="headerlink" title="创建一下安装的目录"></a>创建一下安装的目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo -i                                 <span class="comment">#进入root模式</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /root/data/docker_data/picsur  <span class="comment">#创建文件所在的文件夹</span></span><br><span class="line"><span class="built_in">cd</span> /root/data/docker_data/picsur        <span class="comment">#进入文件夹</span></span><br></pre></td></tr></table></figure><p>创建yaml文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim docker-compose.yml</span><br></pre></td></tr></table></figure><p>按一下键盘<code>i</code>，将以下代码复制到文件中，根据自己需要修改（基本不用修改）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">picsur:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">ghcr.io/caramelfur/picsur:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">picsur</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;8003:8080&#x27;</span> <span class="comment">#8003可以改成服务器上没有用过的端口</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">PICSUR_HOST:</span> <span class="string">&#x27;0.0.0.0&#x27;</span></span><br><span class="line">      <span class="attr">PICSUR_PORT:</span> <span class="number">8080</span></span><br><span class="line">      <span class="attr">PICSUR_DB_HOST:</span> <span class="string">picsur_postgres</span></span><br><span class="line">      <span class="attr">PICSUR_DB_PORT:</span> <span class="number">5432</span></span><br><span class="line">      <span class="attr">PICSUR_DB_USERNAME:</span> <span class="string">picsur</span></span><br><span class="line">      <span class="attr">PICSUR_DB_PASSWORD:</span> <span class="string">nice-long-strong-passw0rd-here</span>  <span class="comment"># 确保和picsur_postgres:部分的 POSTGRES_PASSWORD 匹配</span></span><br><span class="line">      <span class="attr">PICSUR_DB_DATABASE:</span> <span class="string">picsur</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">## 默认管理员账户是 admin, 这个没法改，密码就是下面这个你设置的</span></span><br><span class="line">      <span class="attr">PICSUR_ADMIN_PASSWORD:</span> <span class="string">different-nice-long-str0n6-passw0rd-here</span>       </span><br><span class="line"></span><br><span class="line">      <span class="comment">## 可选的，如果没有设置会默认生产随机字符</span></span><br><span class="line">      <span class="comment"># PICSUR_JWT_SECRET: CHANGE_ME</span></span><br><span class="line">      <span class="comment"># PICSUR_JWT_EXPIRY: 7d</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">## 最大可以上传的字节数</span></span><br><span class="line">      <span class="attr">PICSUR_MAX_FILE_SIZE:</span> <span class="number">128000000</span>  <span class="comment"># 128 MB</span></span><br><span class="line">      <span class="comment">## No need to touch this, unless you use a custom frontend</span></span><br><span class="line">      <span class="comment"># PICSUR_STATIC_FRONTEND_ROOT: &quot;/picsur/frontend/dist&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">## Warning: Verbose mode might log sensitive data</span></span><br><span class="line">      <span class="comment"># PICSUR_VERBOSE: &quot;true&quot;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    </span><br><span class="line">  <span class="attr">picsur_postgres:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres:14-alpine</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">picsur_postgres</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">POSTGRES_DB:</span> <span class="string">picsur</span></span><br><span class="line">      <span class="attr">POSTGRES_PASSWORD:</span> <span class="string">nice-long-strong-passw0rd-here</span></span><br><span class="line">      <span class="attr">POSTGRES_USER:</span> <span class="string">picsur</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./picsur-data:/var/lib/postgresql/data</span>  <span class="comment"># 默认数据存放在当前文件夹下的picsur-data目录中，可以自行修改</span></span><br></pre></td></tr></table></figure><p>修改好之后，<strong>注意切换成英文输入法</strong>，然后按一下<code>esc</code>，然后<code>:wq</code>保存退出。</p><p>一行命令自动部署，docker真的太方便了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose up -d  </span><br></pre></td></tr></table></figure><p><strong>有些操作系统是docker-compose up -d，注意区别</strong></p><h3 id="打开服务器防火墙（非必需）并访问网页"><a href="#打开服务器防火墙（非必需）并访问网页" class="headerlink" title="打开服务器防火墙（非必需）并访问网页"></a>打开服务器防火墙（非必需）并访问网页</h3><p>有些服务器可能不需要，阿里云的服务器需要在安全组开启上面代码中我们使用的8003端口，才能使用8003端口访问服务器。</p><p><strong>开启8003端口以后最好重启一下实例</strong></p><p>查看端口是否被占用（以 8003 为例），输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof -i:8003  <span class="comment">#查看 8003 端口是否被占用，如果被占用，重新自定义一个端口</span></span><br></pre></td></tr></table></figure><p>如果啥也没出现，表示端口未被占用，可以继续下面的操作了～</p><p>如果出现：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-bash: lsof: <span class="built_in">command</span> not found</span><br></pre></td></tr></table></figure><p>运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install lsof  <span class="comment">#安装 lsof</span></span><br></pre></td></tr></table></figure><p>如果端口没有被占用，理论上已经可以输入 <code>http:// + 服务器ip:8003</code> 访问到picsur了。<br><strong>端口被占用了就修改一下端口，比如改成 8081，注意 docker-compose.yml 文件里和防火墙都要改</strong></p><div class="note green anzhiyufont anzhiyu-icon-fan simple"><p>到这里，其实已经能够使用picsur了。但是，访问的网址直接暴露了ip，而且不方便记忆，所以下面做一下反向代理。由于我现在只有一台服务器，一般反向代理需要两台以上，以后再做迁移吧。</p></div><h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><p>我这里使用的是Nginx Proxy Manager，Nginx Proxy Manager也是使用Docker部署的，参考这篇<a href="https://blog.xxfer.cn/posts/79f9b780.html">博客</a>。熟悉宝塔的同学当然也可以使用宝塔做反向代理。</p><h4 id="如果picsur和Nginx-Proxy-Manager部署在不同服务器上"><a href="#如果picsur和Nginx-Proxy-Manager部署在不同服务器上" class="headerlink" title="如果picsur和Nginx Proxy Manager部署在不同服务器上"></a>如果picsur和Nginx Proxy Manager部署在不同服务器上</h4><ol><li>在添加反向代理之前，需要确保已经完成域名解析：域名解析添加<code>A</code>记录，<code>主机名</code>自定义（这里以picsur为例），<code>记录值</code>为Nginx Proxy Manager所在服务器的IP地址<div class="img-wrap"><div class="img-bg"><img class="img" src="https://picsur.xxfer.cn/i/5110944d-42d0-4b5b-8255-fb88008161a6.webp"/></div></div></li><li>在Nginx Proxy Manager中添加<code>Proxy Host</code>：<div class="img-wrap"><div class="img-bg"><img class="img" src="https://picsur.xxfer.cn/i/93e45c65-8444-4dac-a435-1716cdf8df98.webp"/></div></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://picsur.xxfer.cn/i/1835b22d-713e-44ed-881c-3048a174255e.webp"/></div></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://picsur.xxfer.cn/i/3924f893-4973-4b41-85f3-a1b42186628f.webp"/></div></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://picsur.xxfer.cn/i/d1867ef2-2bdc-4ab0-9678-c57a22b662cc.webp"/></div></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://picsur.xxfer.cn/i/ed2326da-2ac4-437d-b556-4b1388868276.webp"/></div></div></li></ol><h4 id="如果picsur和Nginx-Proxy-Manager部署在同一服务器上"><a href="#如果picsur和Nginx-Proxy-Manager部署在同一服务器上" class="headerlink" title="如果picsur和Nginx Proxy Manager部署在同一服务器上"></a>如果picsur和Nginx Proxy Manager部署在同一服务器上</h4><p>与上面有一点点变化，就是在下面的这一步：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://picsur.xxfer.cn/i/1835b22d-713e-44ed-881c-3048a174255e.webp"/></div></div><p><strong>原本图中标注3的位置需要改为Docker容器内部IP</strong><br>通过下面命令可以查看对应的 Docker 容器内部 IP</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip addr show docker0</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://picsur.xxfer.cn/i/12105ab8-02af-44e8-8797-8b2face5387e.webp"/></div></div><p>这里涉及到的是Docker的网络模式，感兴趣的同学可以学习一下这个视频：</p><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://www.bilibili.com/video/BV1Aj411r71b/?spm_id_from=333.337.search-card.all.click&vd_source=91a233ea2e45cea087336c119461d12b">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://www.freeimg.cn/i/2023/12/30/658fb2cbc152c.png)">          <i class="anzhiyufont anzhiyu-icon-link" style="display: none"></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">Docker网络模式</div>            <div class="tag-link-sitename">技术蛋老师</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><p>配置完毕，理论上已经大家可以通过域名访问picsur了。</p><div class="note orange anzhiyufont anzhiyu-icon-dengpao simple"><p>可能会遇到无法访问，可能的原因：<br>Nginx Proxy Manager会用到 80、443 端口，所以服务器不能占用这些端口，或者服务器防火墙不能禁止这些端口。<br>关闭服务器占用80、443端口的进程，并在服务器安全组里添加80、443端口（有些服务器需要，像阿里云服务器就需要手动添加）</p></div><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>其实也不难，大家自己攻略。因为这个项目还在开发中，所以讲一下版本更新方法，其实也不难。</p><h3 id="更新picsur"><a href="#更新picsur" class="headerlink" title="更新picsur"></a>更新picsur</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/data/docker_data/picsur</span><br><span class="line"></span><br><span class="line">docker compose down </span><br><span class="line"></span><br><span class="line"><span class="built_in">cp</span> -r /root/data/docker_data/picsur /root/data/docker_data/picsur.archive  <span class="comment"># 万事先备份，以防万一</span></span><br><span class="line"></span><br><span class="line">docker compose pull</span><br><span class="line"></span><br><span class="line">docker compose up -d    <span class="comment"># 请不要使用 docker-compose stop 来停止容器，因为这么做需要额外的时间等待容器停止；docker-compose up -d 直接升级容器时会自动停止并立刻重建新的容器，完全没有必要浪费那些时间。</span></span><br><span class="line"></span><br><span class="line">docker image prune  <span class="comment"># prune 命令用来删除不再使用的 docker 对象。删除所有未被 tag 标记和未被容器使用的镜像</span></span><br></pre></td></tr></table></figure><p>提示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">WARNING! This will remove all dangling images.</span><br><span class="line">Are you sure you want to <span class="built_in">continue</span>? [y/N] </span><br></pre></td></tr></table></figure><p>输入<code>y</code><br>利用 Docker 搭建的应用，更新非常容易嘿嘿</p><h3 id="卸载picsur"><a href="#卸载picsur" class="headerlink" title="卸载picsur"></a>卸载picsur</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/data/docker_data/picsur</span><br><span class="line"></span><br><span class="line">docker-compose down</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"></span><br><span class="line"><span class="built_in">rm</span> -rf /root/data/docker_data/picsur  <span class="comment"># 完全删除映射到本地的数据</span></span><br></pre></td></tr></table></figure><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>感觉图床也就这样告一段落了，博客封面啥的就放在Freeimg图床上，毕竟有2个GB，够我造好长时间了。博客内部的图片就放在picsur上面，然后npm和jsDelivr图床就当作备用方案。这样已经足够我使用的了，大家如果有什么推荐，欢迎在评论区留言。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note blue anzhiyufont anzhiyu-icon-fan simple&quot;&gt;&lt;p&gt;本篇博客所有图片均存放在picsur图床上，目前感觉良好。另外，由于我的服务器硬盘容量有限，所以目前只是自用。如果想要体验几天，试试好不好用，可以QQ联系我</summary>
      
    
    
    
    <category term="技术分享" scheme="https://blog.xxfer.cn/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="ECS" scheme="https://blog.xxfer.cn/tags/ECS/"/>
    
    <category term="图床" scheme="https://blog.xxfer.cn/tags/%E5%9B%BE%E5%BA%8A/"/>
    
    <category term="docker" scheme="https://blog.xxfer.cn/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>npm自建免费图床方案</title>
    <link href="https://blog.xxfer.cn/posts/a008ab16.html"/>
    <id>https://blog.xxfer.cn/posts/a008ab16.html</id>
    <published>2024-01-09T15:05:00.000Z</published>
    <updated>2024-01-10T22:33:00.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note blue anzhiyufont anzhiyu-icon-fan simple"><p>使用感受：访问速度比较慢，如果自己配置了CDN缓存策略或者可以尝试多个镜像源，可能会好一点。<br>2024.01.16已将本篇博客图片转移至自建Picsur图床。</p></div><p>最新图床方案请看<a href="https://blog.xxfer.cn/posts/6a3f672a.html">我的图床方案</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天摸鱼的时候搭了一个npm图床，也是免费的，访问速度至少目前挺快的，推荐给大家，顺便做个记录。</p><p>npm有大量的镜像站，且npm可以使用版本号增量更新。但是搭建起来还是有些麻烦的，而且和GitHub图床一样有可能被查，可以作为一种<code>备用方案</code>吧，大家自己考虑是否使用。</p><p><strong>同样，这篇博客中的图片就放在该图床上</strong></p><h2 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h2><h3 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h3><ol><li>登录<a href="https://npmjs.com/">npm官网</a>，没有账号的注册一个，点击右上角的头像，进入Access Token。</li></ol><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/npm/xxfer-pic@1.0.2/a008ab16/npm1.png" style="width:650px;"/></div></div><ol start="2"><li>点击 Generate New Token，选择 Classic Token。</li></ol><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/npm/xxfer-pic@1.0.2/a008ab16/npm2.png" style="width:800px;"/></div></div><ol start="3"><li>勾选 Automation，点击 Generate Token 生成令牌。</li></ol><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/npm/xxfer-pic@1.0.2/a008ab16/npm3.png" style="width:800px;"/></div></div><p><strong>然后将生成的Token令牌保存好，只显示一次</strong></p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/npm/xxfer-pic@1.0.2/a008ab16/npm4.png" style="width:800px;"/></div></div><h3 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h3><ul><li>需要一个 Github 账号，以及一个已经创建好的仓库，名称随意，权限私有或者公开都可以。参考<a href="https://blog.xxfer.cn/posts/92211228.html">jsDelivr自建免费图床方案</a></li></ul><ol><li><strong>进入仓库</strong>，选择 Settings，选择 Secrets 中的 Actions</li></ol><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/npm/xxfer-pic@1.0.2/a008ab16/secret1.png" style="width:800px;"/></div></div><ol start="2"><li>点击 New repository secret 添加一个新的 Secret</li></ol><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/npm/xxfer-pic@1.0.2/a008ab16/secret2.png" style="width:800px;"/></div></div><ol start="3"><li>Name 填写 NPM_TOKEN，Secret 填写前面获取的 npm 令牌</li></ol><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/npm/xxfer-pic@1.0.2/a008ab16/secret3.png" style="width:800px;"/></div></div><ol start="4"><li>在仓库<code>根目录</code>中新建一个 package.json 文件，内容如下：</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">name 必须要小写</span><br><span class="line">version 随意</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;xxfer-pic&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;Somewhere to save the file from @xxfer&quot;,</span><br><span class="line">  &quot;author&quot;: &quot;LJJ(@xxfer)&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/npm/xxfer-pic@1.0.2/a008ab16/packet.png"/></div></div><h3 id="本地文件夹"><a href="#本地文件夹" class="headerlink" title="本地文件夹"></a>本地文件夹</h3><ol><li>在本地创建一个空的文件夹，打开git终端将图床仓库clone下来：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:[username]/[AssetsRepo].git</span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/[username]/[AssetsRepo].git</span><br></pre></td></tr></table></figure><ol start="2"><li>在 clone 下来的[AssetsRepo]文件夹内打开终端，输入以下指令切换回原生源</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npmjs.org</span><br></pre></td></tr></table></figure><ol start="3"><li>添加本地 npm 用户设置</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 仅第一次使用需要添加用户，之后会提示你输入你的npm账号密码以及注册邮箱</span></span><br><span class="line">npm adduser</span><br><span class="line"><span class="comment"># 非第一次使用直接登录即可，之后会提示你输入你的npm账号密码以及注册邮箱</span></span><br><span class="line">npm login</span><br></pre></td></tr></table></figure><ol start="4"><li>运行 npm 初始化指令，把整个图床仓库打包，按照指示进行配置，注意需要事先确认你的包名没有和别人已发布的包重复，可以在 npm 官网搜索相应包名，搜不到就说明还没被占用。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/npm/xxfer-pic@1.0.3/a008ab16/npminit.png"/></div></div><p>最后会输出一段 package.json，请求确认，输入 yes 即可。</p><ol start="5"><li>然后输入发布指令，我们就可以把包发布到 npm 上了。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm publish</span><br></pre></td></tr></table></figure><p>jsdelivr+npm 的图片引用和 jsdelivr+github 很相似，例如我在[AssetsRepo]仓库里存放的&#x2F;img&#x2F;index.png</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># jsDelivr+github链接</span></span><br><span class="line">https://cdn.jsdelivr.net/gh/[GithubUserName]/[AssetsRepo]/img/index.png</span><br><span class="line"><span class="comment"># jsDelivr+npm链接</span></span><br><span class="line">https://cdn.jsdelivr.net/npm/[NpmPackageName]/img/index.png</span><br></pre></td></tr></table></figure><div class="note orange anzhiyufont anzhiyu-icon-dengpao simple"><p>jsDelivr+Npm 依然有 100MB 的包大小限制，但是 NPM 有丰富的国内节点。可以挑选一个使用。个人推荐知乎的，没有大小限制，而且也很稳定。</p></div><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">【jsd出品，网宿国内节点】</span><br><span class="line">https://cdn.jsdelivr.net/npm/:package@:version/:file</span><br><span class="line">【unpkg 自建】</span><br><span class="line">https://cdn.cbd.int/:package@:version/:file</span><br></pre></td></tr></table></figure><p>当然也可以利用<a href="https://unpkg.com/">unpkg</a>自建。(UNPKG 是一个内容源自 npm 的全球快速 CDN。它部署在 cloudflare 上，在大陆地区访问到的是香港节点。所以速度也不错。)</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://unpkg.com/:package@:version/:file</span><br></pre></td></tr></table></figure><ol start="6"><li>如果每次都要在本地进行npm publish的话，npm 的提交是整个包一起上传的，不存在增量更新，耗时不说，而且还往往需要架梯子才能正常上传。所以我们可以把它交给 github action 来完成。</li></ol><ul><li><p>在本地的[AssetsRepo]文件夹下新建[AssetsRepo]&#x2F;.github&#x2F;workflows&#x2F;autopublish.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Node.js</span> <span class="string">Package</span></span><br><span class="line"><span class="comment"># 监测图床分支，2020年10月后github新建仓库默认分支改为main，记得更改</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">publish-npm:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">&quot;12.x&quot;</span></span><br><span class="line">          <span class="attr">registry-url:</span> <span class="string">https://registry.npmjs.org/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">npm</span> <span class="string">publish</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">NODE_AUTH_TOKEN:</span> <span class="string">$&#123;&#123;secrets.npm_token&#125;&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>在本地的[AssetsRepo]文件夹下添加想要上传的图片，然后打开git终端，运行以下指令，上传新增内容至 github，即可触发部署。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将更改提交</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;npm publish&quot;</span></span><br><span class="line"><span class="comment"># 更新package版本号</span></span><br><span class="line">npm version patch</span><br><span class="line"><span class="comment"># 推送至github触发action</span></span><br><span class="line">git push <span class="comment">#这里可能会遇到报错，大家可以使用git pull origin main然后git push</span></span><br></pre></td></tr></table></figure><div class="note orange anzhiyufont anzhiyu-icon-dengpao simple"><p>此处的四行指令顺序严格。<br>每次更新 npm 图床都需要先修改[AssetsRepo]\package.json里的version,也就是版本号。<br>而npm version patch即为更新 package.json 里的版本号的指令，效果是末尾版本号+1，例如0.0.1&#x3D;&gt;0.0.2、1.1.3&#x3D;&gt;1.1.4。免去了打开package.json再修改版本号的麻烦。（大版本更新还是需要手动改的）<br>更新 npm 图床务必要记得更新package.json里的版本号！</p></div></li></ul><h2 id="目前可访问的镜像源"><a href="#目前可访问的镜像源" class="headerlink" title="目前可访问的镜像源"></a>目前可访问的镜像源</h2><p>访问慢一般是因为：</p><ul><li>国内没有他们的CDN节点</li><li>CDN上没有同步你的npm包，有些镜像源都是从 CDNJS 上同步的数据，CDNJS 并不会把所有的 npm 包进行同步，所以当你需要的一些 npm 包没有在 CDNJS 上面，你就用不了这些国内 CDN 了。</li></ul><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">国外 CDN 节点：</span><br><span class="line">https://unpkg.com/:package@:version/:file</span><br><span class="line">https://cdn.jsdelivr.net/npm/:package@:version/:file</span><br><span class="line">https://fastly.jsdelivr.net/npm/:package@:version/:file</span><br><span class="line">https://cdn.cbd.int/:package@:version/:file</span><br><span class="line"></span><br><span class="line">国内公益 CDN 节点：</span><br><span class="line">Zkeq 的渺软 CDN</span><br><span class="line">https://jsd.onmicrosoft.cn/npm/:package@:version/:file           #回源jsd</span><br><span class="line">https://npm.onmicrosoft.cn/:package@:version/:file               #回源unpkg</span><br><span class="line">https://cdnjs.onmicrosoft.cn/ajax/libs/:package/:version/:file   #回源cdnjs 这个访问好像存在问题</span><br><span class="line">夏柔 CDN</span><br><span class="line">https://font.onmicrosoft.cn/:package/:version/:file              #目前只支持.css .woff2 .woff .ttf .otf后缀文件的加速</span><br><span class="line"></span><br><span class="line">有博主推荐，但我使用不了，大家试试：</span><br><span class="line">https://github.elemecdn.com/:package@:version/:file</span><br><span class="line">https://npm.elemecdn.com/:package@:version/:file</span><br><span class="line">https://unpkg.zhimg.com/:package@:version/:file</span><br></pre></td></tr></table></figure><p>建议都尝试一下，看看速度，有些镜像还是比较快的，同时欢迎大家在评论区分享自己觉得好用的镜像。所以npm图床还是建议作为一个应急备用的方案，不建议大量使用。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>可以看出npm图床创建起来还是有些麻烦的，但是不失为一种备用图床的方案。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note blue anzhiyufont anzhiyu-icon-fan simple&quot;&gt;&lt;p&gt;使用感受：访问速度比较慢，如果自己配置了CDN缓存策略或者可以尝试多个镜像源，可能会好一点。&lt;br&gt;2024.01.16已将本篇博客图片转移至自建Picsu</summary>
      
    
    
    
    <category term="技术分享" scheme="https://blog.xxfer.cn/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="图床" scheme="https://blog.xxfer.cn/tags/%E5%9B%BE%E5%BA%8A/"/>
    
    <category term="自建应用项目" scheme="https://blog.xxfer.cn/tags/%E8%87%AA%E5%BB%BA%E5%BA%94%E7%94%A8%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="npm" scheme="https://blog.xxfer.cn/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>jsDelivr自建免费图床方案</title>
    <link href="https://blog.xxfer.cn/posts/92211228.html"/>
    <id>https://blog.xxfer.cn/posts/92211228.html</id>
    <published>2024-01-08T21:14:00.000Z</published>
    <updated>2024-01-13T16:44:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>相信刚开始建站的同学都想要一个方便管理的图床，今天发现一个免费的图床搭建方案，访问挺快的，也方便管理。</p><p>最新图床方案请看<a href="https://blog.xxfer.cn/posts/6a3f672a.html">我的图床方案</a></p><p><strong>本篇博客中的图片就都放在该图床上</strong></p><div class="note orange anzhiyufont anzhiyu-icon-fan simple"><p>2024.01.13：不够稳定，访问时快时慢，自行斟酌是否使用。已将图片转移至Freeimg图床。</p></div><h2 id="视频推荐教程"><a href="#视频推荐教程" class="headerlink" title="视频推荐教程"></a>视频推荐教程</h2><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://www.bilibili.com/video/BV1P64y1H7eY/?spm_id_from=333.337.search-card.all.click&vd_source=91a233ea2e45cea087336c119461d12b">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="">          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">GitHub+PicGo+JsDelivr 打造高效免费图床视频教程</div>            <div class="tag-link-sitename">库源吧</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><h2 id="jsDelivr-GitHub-PicGo"><a href="#jsDelivr-GitHub-PicGo" class="headerlink" title="jsDelivr+GitHub+PicGo"></a>jsDelivr+GitHub+PicGo</h2><div class="note orange anzhiyufont anzhiyu-icon-dengpao simple"><p>GitHub图床访问国内速度慢，所以使用jsDelivr（CDN）加速访问。需要注意的是：</p><ol><li>GitHub容量为1GB，需要定时更换仓库，而且有可能会被官方删除，一般不会有事的，毕竟官方没那么闲</li><li>jsDelivr可能会因为DNS污染访问变慢，不过官方会定期修复，最好配备应急方案</li></ol></div><h3 id="创建一个新的GitHub库"><a href="#创建一个新的GitHub库" class="headerlink" title="创建一个新的GitHub库"></a>创建一个新的GitHub库</h3><p>如果没有GitHub账号的同学可以参考这篇<a href="https://blog.csdn.net/m0_67906358/article/details/128808210">博客</a></p><p><strong>GitHub国内访问比较慢，需要“科学”上网</strong></p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/13/65a2524139a3d.png" style="width:800px;"/></div></div><p>README文件可加可不加</p><h3 id="生成Token令牌"><a href="#生成Token令牌" class="headerlink" title="生成Token令牌"></a>生成Token令牌</h3><ul><li>右上角头像，进入setting</li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/13/65a25240c1608.png" style="width:800px;"/></div></div><ul><li>进入左侧栏底部的Deployer settings</li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/13/65a2523fd5dd3.png" style="width:800px;"/></div></div><ul><li>新建Token</li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/13/65a25240cb6b6.png" style="width:800px;"/></div></div><ul><li>选择参数后点击下面的创建，<strong>然后会生成一串字符，就是你的Token，只会出现一次，建议暂时不要关闭这个页面</strong></li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/13/65a25240cd411.png" style="width:800px;"/></div></div><h3 id="下载并安装PicGo工具并配置"><a href="#下载并安装PicGo工具并配置" class="headerlink" title="下载并安装PicGo工具并配置"></a>下载并安装PicGo工具并配置</h3><ul><li>下载</li></ul><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://github.com/Molunerfinn/PicGo">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://www.freeimg.cn/i/2024/01/09/659cb418d9cef.png)">          <i class="anzhiyufont anzhiyu-icon-link" style="display: none"></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">GitHub源码</div>            <div class="tag-link-sitename">PicGo</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><p>网盘提取码：xia2</p><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://pan.baidu.com/s/1oMzjI2BAh1T4lntcanwvUQ?pwd=xia2">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://www.freeimg.cn/i/2023/12/30/658f84e46d5ad.png)">          <i class="anzhiyufont anzhiyu-icon-link" style="display: none"></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">V2.3.1Windows安装包</div>            <div class="tag-link-sitename">PicGo</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><ul><li>安装好了以后，打开进行图床配置</li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/13/65a2524120395.png" style="width:800px;"/></div></div><p><strong>自定义域名一定是<a href="https://cdn.jsdelivr.net/gh/%E8%B4%A6%E6%88%B7%E5%90%8D/%E4%BB%93%E5%BA%93%E5%90%8D">https://cdn.jsdelivr.net/gh/账户名/仓库名</a></strong></p><ul><li>PicGo设置</li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/13/65a25240c4094.png" style="width:800px;"/></div></div><ul><li>选择GitHub图床</li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/13/65a25240e826f.png" style="width:800px;"/></div></div><p>至此，图床创建完成，在上传之前最好重启一下PicGo，我一开始配置好后好像不能立马生效。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>PicGo其实还支持其他的图床，大家有兴趣自行了解。OSS是需要付费的，七牛云和又拍云有免费额度。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;相信刚开始建站的同学都想要一个方便管理的图床，今天发现一个免费的图床搭建方案，访问挺快的，也方便管理。&lt;/p&gt;
&lt;p&gt;最新图床方案请看&lt;a </summary>
      
    
    
    
    <category term="技术分享" scheme="https://blog.xxfer.cn/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="图床" scheme="https://blog.xxfer.cn/tags/%E5%9B%BE%E5%BA%8A/"/>
    
    <category term="自建应用项目" scheme="https://blog.xxfer.cn/tags/%E8%87%AA%E5%BB%BA%E5%BA%94%E7%94%A8%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="jsDelivr" scheme="https://blog.xxfer.cn/tags/jsDelivr/"/>
    
  </entry>
  
  <entry>
    <title>我的CDN使用与防护方案：如何减少流量损失，应对恶意刷流量？</title>
    <link href="https://blog.xxfer.cn/posts/7c372084.html"/>
    <id>https://blog.xxfer.cn/posts/7c372084.html</id>
    <published>2024-01-05T12:16:08.000Z</published>
    <updated>2024-01-07T11:44:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><div class="note orange anzhiyufont anzhiyu-icon-dengpao simple"><p>建议大家使用CDN之前，一定要认真研究学习一下CDN。<strong>千万不要轻易使用CDN，以免带来不必要的损失</strong></p></div><p>CDN在一般情况下能给网站加速，但如果使用不当，不仅不能实现访问加速，还有可能被黑客利用。因为CDN服务一般是按量计费的，相信大家都听过一些博主的网站被恶意刷流量，然后损失几百甚至上万的。尽管我的网站访问量不多，也应该做好应对恶意刷流量的措施，毕竟存在这个问题，那就需要解决。</p><h2 id="使用一般CDN后的效果"><a href="#使用一般CDN后的效果" class="headerlink" title="使用一般CDN后的效果"></a>使用一般CDN后的效果</h2><div class="note orange anzhiyufont anzhiyu-icon-dengpao simple"><p>为什么说是一般CDN？因为还有一类是高防CDN，顾名思义，它具有更好的防御服务提供，下文会有具体介绍。</p></div><ul><li>网站在配备CDN前后的访问速度（我使用的是<a href="https://www.upyun.com/">又拍云</a>CDN服务）</li></ul><p>我使用免费的测速网站进行测试，为了测试数据更具参考价值，我使用了多个平台进行测试。</p><h3 id="使用CDN前后对比"><a href="#使用CDN前后对比" class="headerlink" title="使用CDN前后对比"></a>使用CDN前后对比</h3><ul><li><a href="https://www.itdog.cn/">itdog</a></li></ul><ol><li>网站测速（HTTP）</li></ol><div class="gallery">  <div class="fj-gallery page_img_lazyload  data" data-rowHeight="300" data-limit="2">    <span class="gallery-data">[{"url":"https://www.freeimg.cn/i/2024/01/07/659a6872b9e36.png","alt":""},{"url":"https://www.freeimg.cn/i/2024/01/07/659a68812f08b.png","alt":""}]</span>  </div><button class="gallery-load-more" style="opacity:0">  <span>加载更多</span>  <i class="anzhiyufont anzhiyu-icon-arrow-down"></i>  </button></div><ol start="2"><li>异地Ping</li></ol><div class="gallery">  <div class="fj-gallery page_img_lazyload  data" data-rowHeight="300" data-limit="2">    <span class="gallery-data">[{"url":"https://www.freeimg.cn/i/2024/01/07/659a6839e6941.png","alt":""},{"url":"https://www.freeimg.cn/i/2024/01/07/659a684b2f6e2.png","alt":""}]</span>  </div><button class="gallery-load-more" style="opacity:0">  <span>加载更多</span>  <i class="anzhiyufont anzhiyu-icon-arrow-down"></i>  </button></div><ul><li><a href="https://zhale.me/">zhale</a></li></ul><ol><li>网站测速（HTTP）</li></ol><div class="gallery">  <div class="fj-gallery page_img_lazyload  data" data-rowHeight="300" data-limit="2">    <span class="gallery-data">[{"url":"https://www.freeimg.cn/i/2024/01/07/659a6a0b4934e.png","alt":""},{"url":"https://www.freeimg.cn/i/2024/01/07/659a6a1d127ed.png","alt":""}]</span>  </div><button class="gallery-load-more" style="opacity:0">  <span>加载更多</span>  <i class="anzhiyufont anzhiyu-icon-arrow-down"></i>  </button></div><ol start="2"><li>异地Ping</li></ol><div class="gallery">  <div class="fj-gallery page_img_lazyload  data" data-rowHeight="300" data-limit="2">    <span class="gallery-data">[{"url":"https://www.freeimg.cn/i/2024/01/07/659a6a51799e8.png","alt":""},{"url":"https://www.freeimg.cn/i/2024/01/07/659a6a6780381.png","alt":""}]</span>  </div><button class="gallery-load-more" style="opacity:0">  <span>加载更多</span>  <i class="anzhiyufont anzhiyu-icon-arrow-down"></i>  </button></div><ul><li><a href="https://ping.chinaz.com/">站长之家</a>异地Ping</li></ul><div class="gallery">  <div class="fj-gallery page_img_lazyload  data" data-rowHeight="300" data-limit="2">    <span class="gallery-data">[{"url":"https://www.freeimg.cn/i/2024/01/07/659a6a82213b0.png","alt":""},{"url":"https://www.freeimg.cn/i/2024/01/07/659a6a93219c9.png","alt":""}]</span>  </div><button class="gallery-load-more" style="opacity:0">  <span>加载更多</span>  <i class="anzhiyufont anzhiyu-icon-arrow-down"></i>  </button></div><p><strong>上面的这些测试指标仅作为参考，不能直接代表网站访问速度</strong></p><p>从这些数据可以看出CDN能够实现网站的加速访问，CDN另一个作用：隐藏源站IP</p><ul><li>源站IP隐藏</li></ul><p>上面的数据里还包含了响应IP：</p><ul><li>使用CDN前，源站IP直接暴露：185.199.111.153；</li><li>使用CDN后出现了四个不同IP：<br>61.139.65.250、112.3.31.155、218.25.106.79、61.240.153.194（不包含185.199.111.153）</li></ul><p>185.199.111.153即为源站IP，也就是仓库所在IP地址，说明CDN确实能够一定程度地隐藏源站IP。</p><h2 id="可能的攻击方式"><a href="#可能的攻击方式" class="headerlink" title="可能的攻击方式"></a>可能的攻击方式</h2><p>下面介绍的这些攻击，实现逻辑是比较简单的，可能一个小白（比如我）就能实现攻击。但是这种逻辑简单的攻击却非常有效，还很难处理。即使通过一些安全策略防住了这些攻击，攻击还很容易进化，通过事先信息搜集，分析…以后，一种比较针对性的“变种”就出现了。因此，这篇文章只是记录基于我的使用情况设置的一些安全策略，并不能应用于所有的场景中，大家需要结合自己的使用状况进行调整。</p><h3 id="绕过CDN获取源站IP"><a href="#绕过CDN获取源站IP" class="headerlink" title="绕过CDN获取源站IP"></a>绕过CDN获取源站IP</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2023/12/26/658a8a208cbe9.jpg" alt="等待更新......" style="width:360px;"/></div><span class="image-caption">等待更新......</span></div><h3 id="CC攻击"><a href="#CC攻击" class="headerlink" title="CC攻击"></a>CC攻击</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2023/12/26/658a8a208cbe9.jpg" alt="等待更新......" style="width:360px;"/></div><span class="image-caption">等待更新......</span></div><h3 id="DDos攻击"><a href="#DDos攻击" class="headerlink" title="DDos攻击"></a>DDos攻击</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2023/12/26/658a8a208cbe9.jpg" alt="等待更新......" style="width:360px;"/></div><span class="image-caption">等待更新......</span></div><h2 id="针对性防御措施"><a href="#针对性防御措施" class="headerlink" title="针对性防御措施"></a>针对性防御措施</h2><p>（防盗链、IP限频和访问控制…）</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2023/12/26/658a8a208cbe9.jpg" alt="等待更新......" style="width:360px;"/></div><span class="image-caption">等待更新......</span></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;div class=&quot;note orange anzhiyufont anzhiyu-icon-dengpao simple&quot;&gt;&lt;p&gt;建议大家使</summary>
      
    
    
    
    <category term="技术分享" scheme="https://blog.xxfer.cn/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="网络安全" scheme="https://blog.xxfer.cn/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    <category term="Web" scheme="https://blog.xxfer.cn/tags/Web/"/>
    
    <category term="CDN" scheme="https://blog.xxfer.cn/tags/CDN/"/>
    
    <category term="博客" scheme="https://blog.xxfer.cn/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Docker命令整理：本地开发环境的快捷配置方式</title>
    <link href="https://blog.xxfer.cn/posts/b2d12a7e.html"/>
    <id>https://blog.xxfer.cn/posts/b2d12a7e.html</id>
    <published>2024-01-04T10:12:08.000Z</published>
    <updated>2024-01-04T14:36:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>服务器中快速部署项目环境避免不了docker的使用，所以专门在这里整理一下常用的docker命令。</p><h2 id="优质视频链接"><a href="#优质视频链接" class="headerlink" title="优质视频链接"></a>优质视频链接</h2><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://www.bilibili.com/video/BV1s54y1n7Ev/?spm_id_from=333.337.search-card.all.click">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://www.freeimg.cn/i/2024/01/04/6596af37ca26c.png)">          <i class="anzhiyufont anzhiyu-icon-link" style="display: none"></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">Docker 10分钟快速入门</div>            <div class="tag-link-sitename">奇乐编程学院</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://www.bilibili.com/video/BV1Aj411r71b/?spm_id_from=333.337.search-card.all.click&vd_source=91a233ea2e45cea087336c119461d12b">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://www.freeimg.cn/i/2023/12/30/658fb2cbc152c.png)">          <i class="anzhiyufont anzhiyu-icon-link" style="display: none"></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">Docker网络模式</div>            <div class="tag-link-sitename">技术蛋老师</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://www.bilibili.com/video/BV1og4y1q7M4/?vd_source=91a233ea2e45cea087336c119461d12b">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://www.freeimg.cn/i/2024/01/04/6596b92803503.png)">          <i class="anzhiyufont anzhiyu-icon-link" style="display: none"></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">Docker详细版教程</div>            <div class="tag-link-sitename">遇见狂神说</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><h2 id="关于docker"><a href="#关于docker" class="headerlink" title="关于docker"></a>关于docker</h2><p>Docker 就像一个盒子，里面可以装很多物件，如果需要某些物件，可以直接将该盒子拿走，而不需要从该盒子中一件一件的取。<br>可以简单地把docker理解为轻量级的VM虚拟机，但它和虚拟机是有区别的，具体区别请大家自行学习。</p><h2 id="三个基本概念"><a href="#三个基本概念" class="headerlink" title="三个基本概念"></a>三个基本概念</h2><ul><li><p>镜像（Image）</p><p>Docker的镜像概念类似于虚拟机里的镜像（比如.ISO文件），是一个只读的模板，一个独立的文件系统，包括运行容器所需的数据，可以用来创建新的容器。</p><p>例如：一个镜像可以包含一个完整的 ubuntu 操作系统环境，里面仅安装了MySQL或用户需要的其它应用程序。</p><p>这里的镜像就如下方虚拟机创建时候使用的镜像类似。这个镜像便于移动，并且这个镜像我们可以交给任何人使用，其他人使用的时候也很方便，只需要将其实例化即可，这也是docker迁移项目的便捷之处。</p><p>关于创建镜像，就要讲到Dockerfile文件，镜像就是靠Dockerfile文件这个自动化脚本创建出来的。</p></li><li><p>容器（Container）</p><p>Docker容器是由Docker镜像创建的运行实例，类似VM虚拟机，支持启动，停止，删除等。</p><p>每个容器间是相互隔离的，容器中会运行特定的应用，包含特定应用的代码及所需的依赖文件。</p><p>容器就类似与虚拟机中我们创建好的虚拟机系统，之后我们所有的操作都是在容器中进行的，我们的程序也是运行在容器中。</p></li><li><p>仓库（Repository&#x2F;Hub）</p><p>镜像便于传播，而仓库就是专门用来传播这些镜像的地方，他有点类似与Github，或者你可以把他看成一个存放各种镜像的镜像商店</p><p><a href="https://hub.docker.com/">Docker官方的仓库</a>：他的服务器处于国外，所以下载速度较慢，不过我们可以通过换源解决。</p><p><a href="https://hub.daocloud.io/">daocloud国内仓库</a>：国内也有一些优秀的商店，他和Docker官方的仓库的区别类似与Github和Gitee的区别。</p><p><a href="https://c.163yun.com/hub#/home">网易云镜像中心</a></p></li></ul><h2 id="安装和基础配置"><a href="#安装和基础配置" class="headerlink" title="安装和基础配置"></a>安装和基础配置</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>因为之后要在服务器上使用，所以这篇文章使用Linux的Ubuntu20.04发行版为例进行演示。</p><p><a href="https://u.sb/debian-install-docker/">参考教程</a></p><p>Ubuntu一般自带docker，只是docker的旧版本不一定被称为docker，docker.io 或 docker-engine也有可能，所以需要先卸载：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove docker docker-engine docker.io containerd runc</span><br></pre></td></tr></table></figure><p>如果不能正常卸载也没事，可以跳过上面的步骤，直接启用 Docker 软件源，更新软件包即可。具体操作如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//更新软件包索引，并且安装必要的依赖软件，来添加一个新的 HTTPS 软件源</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install apt-transport-https ca-certificates curl gnupg-agent software-properties-common</span><br><span class="line">//导入源仓库的 GPG key</span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line">//将 Docker APT 软件源添加到你的系统</span><br><span class="line">sudo add-apt-repository <span class="string">&quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu <span class="subst">$(lsb_release -cs)</span> stable&quot;</span></span><br><span class="line">//Docker 软件源被启用了，你可以安装软件源中任何可用的 Docker 版本</span><br></pre></td></tr></table></figure><p>安装 Docker 最新版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><p>安装完成，Docker 服务将会自动启动。输入下面的命令进行验证：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl status docker</span><br></pre></td></tr></table></figure><p>出现类似下面内容说明安装成功：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker.service - Docker Application Container Engine</span><br><span class="line"><span class="code">     Loaded: loaded (/lib/systemd/system/docker.service; enabled; vendor preset: enabled)</span></span><br><span class="line"><span class="code">     Active: active (running) since Thu 2020-05-21 14:47:34 UTC; 42s ago</span></span><br><span class="line"><span class="code">     ......</span></span><br></pre></td></tr></table></figure><p>当一个新的 Docker 发布时，你可以使用标准的<code>sudo apt update &amp;&amp; sudo apt upgrade</code>流程来升级 Docker 软件包。</p><p>如果你想阻止 Docker 自动更新，锁住它的版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-mark hold docker-ce</span><br></pre></td></tr></table></figure><h3 id="以非-Root-用户身份执行-Docker"><a href="#以非-Root-用户身份执行-Docker" class="headerlink" title="以非 Root 用户身份执行 Docker"></a>以非 Root 用户身份执行 Docker</h3><p>默认情况下，只有 root 或者 有 sudo 权限的用户可以执行 Docker 命令。</p><p>想要以非 root 用户执行 Docker 命令，你需要将你的用户添加到 Docker 用户组，该用户组在 Docker CE 软件包安装过程中被创建。想要这么做，输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -aG docker <span class="variable">$USER</span></span><br></pre></td></tr></table></figure><p>$USER是一个环境变量，代表当前用户名。登出，并且重新登录，以便用户组会员信息刷新。</p><h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><p>在卸载 Docker 之前，你最好移除所有的容器，镜像，卷和网络。</p><p>运行下面的命令停止所有正在运行的容器，并且移除所有的 docker 对象：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker container stop $(docker container <span class="built_in">ls</span> -aq)</span><br><span class="line">docker system prune -a --volumes</span><br></pre></td></tr></table></figure><p>可以使用<code>apt</code>像卸载其他软件包一样来卸载 Docker：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt purge docker-ce</span><br><span class="line">sudo apt autoremove</span><br></pre></td></tr></table></figure><h2 id="docker命令使用"><a href="#docker命令使用" class="headerlink" title="docker命令使用"></a>docker命令使用</h2><h3 id="镜像（Image）"><a href="#镜像（Image）" class="headerlink" title="镜像（Image）"></a>镜像（Image）</h3><p>创建镜像需要自行编写Dockerfile文件，然后使用命令<code>docker build</code>即可。目前现有的镜像够我用了，Dockerfile以后再学。</p><ul><li><strong>docker images：查看已有镜像</strong></li><li>docker images -q：查看已有镜像id</li></ul><p>去dockerhub网站搜索镜像，然后拉取镜像</p><ul><li>docker search xxx                      #xxx指你要搜索的镜像，例如mysql</li><li>docker search xxx –filter&#x3D;STARS&#x3D;3000  #搜索收藏量大于3000的xxx镜像</li><li>docker pull xxx                        #下载xxx镜像<strong>最新版</strong>，这里搜索比较慢的话需要换加速镜像</li><li>docker pull xxx:5.7                    #下载xxx镜像<strong>5.7版本</strong></li></ul><p>删除镜像</p><ul><li>docker rmi -f ID：根据id删除指定镜像</li></ul><h3 id="容器（Container）"><a href="#容器（Container）" class="headerlink" title="容器（Container）"></a>容器（Container）</h3><p>创建容器</p><ul><li><strong>docker run [参数] 镜像名</strong><br>#参数说明<br>–name&#x3D;”name”        #容器名字<br>-d                   #后台方式运行<br>-it                  #交互方式运行(进入容器)<br>-p ip:主机端口:容器端口<br>-p 主机端口:容器端口<br>-p 容器端口<br>-p 随机指定端口</li></ul><p>查看容器</p><ul><li>docker ps     #列出正在运行的容器</li><li><strong>docker ps -a  #列出所有容器（常用查看id）</strong></li></ul><p>删除容器</p><ul><li>docker rm 容器id   <strong>不能删除正在运行的容器</strong></li></ul><p>启动&#x2F;停止容器</p><ul><li><strong>docker start 容器id    #启动容器</strong></li><li>docker restart 容器id  #重启容器</li><li><strong>docker stop 容器id   #停止当前正在运行的容器</strong></li><li>docker kill 容器id   #强制停止容器</li></ul><p>日志&#x2F;进程&#x2F;元数据信息</p><ul><li>docker logs -tf –tail 10 容器id   #–tail 10表示显示10条日志</li><li>docker top 容器id                  #查看容器中进程信息</li><li>docker inspect 容器id              #显示容器的所有信息</li></ul><p>当容器正在运行时</p><ul><li><strong>docker exec -it 容器id &#x2F;bin&#x2F;bash   #进入正在运行的容器,并开启一个新的终端</strong></li><li>docker attach 容器id               #进入正在运行的终端</li><li>dockr cp 容器id:&#x2F;xxx&#x2F;aaa.txt &#x2F;xxx  #将容器中&#x2F;xxx文件夹下的aaa.txt文件拷贝到主机的&#x2F;xxx文件夹下</li></ul><p>数据挂载——数据卷技术</p><ul><li>docker run -d -p 3310:3306 -v &#x2F;home&#x2F;mysql&#x2F;conf:&#x2F;etc&#x2F;mysql&#x2F;conf.d -v &#x2F;home&#x2F;mysql&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql -e MYSQL_ROOT_PASSWORD&#x3D;123456 –name mysql01 mysql:5.7<br>#参数说明<br>-d 后台运行<br>-p 主机端口:容器端口             #端口映射<br>-v 主机地址:容器地址             #卷挂载<br>-e MYSQL_ROOT_PASSWORD&#x3D;123456   #配置密码为123456<br>–name 容器名字</li></ul><h3 id="Docker-compose"><a href="#Docker-compose" class="headerlink" title="Docker compose"></a>Docker compose</h3><p>常用的就是创建yaml文件，然后运行即可，关键在于yaml文件的编写。</p><ol><li>创建并编写yaml文件</li><li>使用命令运行<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure>至于如何编写yaml文件建议自学，可以参考这些部署教程：<a href="https://blog.xxfer.cn/posts/79f9b780.html">Nginx Proxy Manager</a>、<a href="https://blog.xxfer.cn/posts/4c41eeca.html">自建Picsur</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;服务器中快速部署项目环境避免不了docker的使用，所以专门在这里整理一下常用的docker命令。&lt;/p&gt;
&lt;h2 id=&quot;</summary>
      
    
    
    
    <category term="技术分享" scheme="https://blog.xxfer.cn/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="自主开发" scheme="https://blog.xxfer.cn/tags/%E8%87%AA%E4%B8%BB%E5%BC%80%E5%8F%91/"/>
    
    <category term="Docker" scheme="https://blog.xxfer.cn/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>重温大一计算机操作系统实验：时间真快！</title>
    <link href="https://blog.xxfer.cn/posts/8c84e76e.html"/>
    <id>https://blog.xxfer.cn/posts/8c84e76e.html</id>
    <published>2024-01-02T00:33:08.000Z</published>
    <updated>2024-02-01T16:16:21.894Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这是大一学的一门实验课程，那时候学起来感觉有点困难，并没有吃透这些实验。现在感觉自己又可以了，所以想着寒假再完完整整地重新做一遍这些题目，好好做一个总结。</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2023/12/26/658a8a208cbe9.jpg" alt="等待更新......" style="width:360px;"/></div><span class="image-caption">等待更新......</span></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;这是大一学的一门实验课程，那时候学起来感觉有点困难，并没有吃透这些实验。现在感觉自己又可以了，所以想着寒假再完完整整地重新做一遍这些题目，好</summary>
      
    
    
    
    <category term="大学生涯" scheme="https://blog.xxfer.cn/categories/%E5%A4%A7%E5%AD%A6%E7%94%9F%E6%B6%AF/"/>
    
    
    <category term="网络安全" scheme="https://blog.xxfer.cn/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    <category term="CTF" scheme="https://blog.xxfer.cn/tags/CTF/"/>
    
    <category term="栈帧" scheme="https://blog.xxfer.cn/tags/%E6%A0%88%E5%B8%A7/"/>
    
  </entry>
  
  <entry>
    <title>2024《北京欢迎你》接力，你都看了吗？</title>
    <link href="https://blog.xxfer.cn/posts/61ac759f.html"/>
    <id>https://blog.xxfer.cn/posts/61ac759f.html</id>
    <published>2024-01-01T20:44:33.000Z</published>
    <updated>2024-01-16T20:19:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="新年快乐！"><a href="#新年快乐！" class="headerlink" title="新年快乐！"></a>新年快乐！</h1><div class="tabs" id="mov"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="mov-1">【北京欢迎你】翻唱up们的第一波新年祝福</button><button type="button" class="tab " data-href="mov-2">翻唱up们的第二波祝福来啦！</button><button type="button" class="tab " data-href="mov-3">还有你认识的up吗？</button></ul><div class="tab-contents"><div class="tab-item-content active" id="mov-1"><div class="video"><video controls preload><source src='https://pan.freeimg.cn/view.php/d3ce6e53d499746ba52a4004427387ad.mp4' type='video/mp4'>Your browser does not support the video tag.</video></div></div><div class="tab-item-content" id="mov-2"><div class="video"><video controls preload><source src='https://pan.freeimg.cn/view.php/63725be4380fb7bc1d7a4c1ab1640e68.mp4' type='video/mp4'>Your browser does not support the video tag.</video></div></div><div class="tab-item-content" id="mov-3"><div class="video"><video controls preload><source src='https://pan.freeimg.cn/view.php/989ddde596bbe4010b7c309558007480.mp4' type='video/mp4'>Your browser does not support the video tag.</video></div></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><div class="tabs" id="乐器"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="乐器-1">全国34个省级行政区合唱接力</button><button type="button" class="tab " data-href="乐器-2">【北京欢迎你】乐器接力</button></ul><div class="tab-contents"><div class="tab-item-content active" id="乐器-1"><div class="video"><video controls preload><source src='https://pan.freeimg.cn/view.php/5d24bd8b633d08c7e410b554ee10a3e9.mp4' type='video/mp4'>Your browser does not support the video tag.</video></div></div><div class="tab-item-content" id="乐器-2"><div class="video"><video controls preload><source src='https://pan.freeimg.cn/view.php/3abba0491fd94122abc6a0742d9308fc.mp4' type='video/mp4'>Your browser does not support the video tag.</video></div></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><div class="tabs" id="不一样的接力"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="不一样的接力-1">【北京欢迎你】手语版接力大合唱来了！</button><button type="button" class="tab " data-href="不一样的接力-2">【北京欢迎你】高原军营版</button></ul><div class="tab-contents"><div class="tab-item-content active" id="不一样的接力-1"><div class="video"><video controls preload><source src='https://pan.freeimg.cn/view.php/85e0d1b6d24c5dc9fab5a6fadc257914.mp4' type='video/mp4'>Your browser does not support the video tag.</video></div></div><div class="tab-item-content" id="不一样的接力-2"><div class="video"><video controls preload><source src='https://pan.freeimg.cn/view.php/08cc727aee5bcfb9fe16e770a759aa83.mp4' type='video/mp4'>Your browser does not support the video tag.</video></div></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;新年快乐！&quot;&gt;&lt;a href=&quot;#新年快乐！&quot; class=&quot;headerlink&quot; title=&quot;新年快乐！&quot;&gt;&lt;/a&gt;新年快乐！&lt;/h1&gt;&lt;div class=&quot;tabs&quot; id=&quot;mov&quot;&gt;&lt;ul class=&quot;nav-tabs&quot;&gt;&lt;button type=</summary>
      
    
    
    
    <category term="日常生活" scheme="https://blog.xxfer.cn/categories/%E6%97%A5%E5%B8%B8%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="2024" scheme="https://blog.xxfer.cn/tags/2024/"/>
    
    <category term="北京欢迎你" scheme="https://blog.xxfer.cn/tags/%E5%8C%97%E4%BA%AC%E6%AC%A2%E8%BF%8E%E4%BD%A0/"/>
    
  </entry>
  
  <entry>
    <title>再见，2023！你好，2024！</title>
    <link href="https://blog.xxfer.cn/posts/e26dd8b5.html"/>
    <id>https://blog.xxfer.cn/posts/e26dd8b5.html</id>
    <published>2024-01-01T00:00:00.000Z</published>
    <updated>2024-01-10T23:27:33.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note blue anzhiyufont anzhiyu-icon-fan simple"><p>转眼一年又过去了，这一年发生了很多事呀……</p></div><h2 id="一些心路历程"><a href="#一些心路历程" class="headerlink" title="一些心路历程"></a>一些心路历程</h2><p>其实，这一年，主线任务还是一尘不变的学习，关键在于心态的转变吧。以前，我一直觉得只要学，就完事儿了，所以就随大流卷绩点，卷保研。</p><p>事实上也确实卷得小有成就，但也就仅此而已。</p><p>就这样的状态一直到了大二上学期吧，慢慢觉得这样子还远远不够。也许是醒悟了，就觉得即使如愿保研了，那又能怎样了，不过是比别人早点上岸研究生，这真的是上岸了吗？</p><p>到了2023年，终于有点想明白了，所以这一年是值得记录的一年。</p><h2 id="对于保研这件事"><a href="#对于保研这件事" class="headerlink" title="对于保研这件事"></a>对于保研这件事</h2><p>以前一直秉着“能保则保”的原则，不断强化着专业课程的学习。后来到了大二下学期，以微乎其微的优势暂时领先，成了“保绩点边缘人”😇，这几年在这方面的努力也算是得到了一点回报吧。当然，我也不想半场开香槟，这不是总结重点……</p><p>其实我现在的打算就是：卷技术第一，卷保研第二，能拿到推免资格自然是好的，但如果在2024年乃至2025年能够拿到心仪的offer，也许我要好好考虑考虑是否去读这个研究生了。保研或者说读研不过是一种选择，读研本就是为了将来能更好地就业，况且我今后大概率也不会继续攻读博士，也不想当大学老师。</p><p>既然如此，又何必要把读研看得如此重要。总之现在的就业环境如此复杂，想要能在社会中占得一席之地，没有真材实料怎么行？</p><p>其他的也不多说什么，说实在，专业课需要好好学，可应付考试的话就算了，不如去多敲几行代码呢！</p><h2 id="这一年尝试的新事物"><a href="#这一年尝试的新事物" class="headerlink" title="这一年尝试的新事物"></a>这一年尝试的新事物</h2><h3 id="比赛成果"><a href="#比赛成果" class="headerlink" title="比赛成果"></a>比赛成果</h3><p>先是参加了不少竞赛吧，但是好像都挺水的：</p><ul><li>数模校赛一等奖——感谢两位队友的邀请❤️</li><li>虽迟但到的陕西省大学生高等数学竞赛特等奖✌️</li><li>第一届网计大赛二等奖 再接再厉💪</li><li>第十五届全国大学生数学竞赛陕西赛区一等奖✌️</li><li>第三届网计大赛三等奖💪<br>……</li></ul><p>我比较喜欢自己折腾，很多项目也喜欢独立开发。小声哔哔：有时候，真的要看准队友，这让我想到我哥跟我说的“志同道合”……😷</p><h3 id="项目开发"><a href="#项目开发" class="headerlink" title="项目开发"></a>项目开发</h3><p>当然这一年也搞了好多项目去实践学习，有课设，也有一些自己捣鼓的小玩意儿。基本都整理到GitHub里面了：</p><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://github.com/LJJbyZJU/">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://www.freeimg.cn/i/2023/12/23/6586e75c86de7.png)">          <i class="anzhiyufont anzhiyu-icon-link" style="display: none"></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">我的项目仓库</div>            <div class="tag-link-sitename">xxfer</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><p>课设：</p><ul><li>第一次接触QT框架，用C++写了<a href="https://blog.xxfer.cn/posts/7dca2e02.html">一个用于路径规划的Astar算法演示器</a></li><li>用python自制了一个简易识别系统界面，还想着配置后端进行强化，到现在还没有把这个坑填了😇</li></ul><p>自研项目：</p><ul><li>前端的知识倒是学习了不少，包括搭建的这个博客项目，个人主页这些</li><li>服务器搭建了各种docker小玩意儿，摸鱼必备😋</li><li>另外肯定少不了CTF的学习，算是半只脚进去了吧(doge)<br>……</li></ul><p>总之，这一年相对大一那会儿真的变了不少，还会继续努力下去的💪</p><h3 id="混了个校二等奖学金"><a href="#混了个校二等奖学金" class="headerlink" title="混了个校二等奖学金"></a>混了个校二等奖学金</h3><p>全是数学竞赛给我加的分😅，说实话拿的都有点不好意思，不过学校的钱当然能拿多少就拿多少，拿的越多越好哈哈哈。</p><h3 id="吃"><a href="#吃" class="headerlink" title="吃"></a>吃</h3><p>认识我的应该都知道，对我来说吃一直都是一个问题，好像没有什么吸引我的美食，不知道这是好事还是坏事。不过这一年，我跑的食堂比以前勤快多了，尝试的也多了，现在基本两三天伙食能做到不重样了，难绷。总之也算是在往好的方向改变吧👼</p><h3 id="来陕西三年快了，终于玩了一遍"><a href="#来陕西三年快了，终于玩了一遍" class="headerlink" title="来陕西三年快了，终于玩了一遍"></a>来陕西三年快了，终于玩了一遍</h3><p>我其实不太喜欢跟着导游看景点，所以这趟出游感觉最好玩的就兵马俑和壶口瀑布吧，逛旅游景点还不如去五星级酒店体验生活或者去山里野一把啥的😏</p><p>不过看兵马俑的人是真的多，拍了一个还有点颜色🙃</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/10/659ebc0ee90b3.jpg"/></div></div><h3 id="第一个自费“梯子”"><a href="#第一个自费“梯子”" class="headerlink" title="第一个自费“梯子”"></a>第一个自费“梯子”</h3><p>GitHub上面找的一个“梯子”，有可以白嫖的节点，但是速度比较慢，所以后面冲了个年费，算是第一个自费“梯子”了。挺好用的，很多国家的节点都有了，速度也是可以的。</p><h3 id="第一枚域名"><a href="#第一枚域名" class="headerlink" title="第一枚域名"></a>第一枚域名</h3><p>有了属于自己的域名，刚开始还是选择国内大厂的产品，主要比较稳定牢靠。以后可以买小厂或者国外的，便宜点，可以胡乱造。</p><h3 id="第一台云服务器"><a href="#第一台云服务器" class="headerlink" title="第一台云服务器"></a>第一台云服务器</h3><p>年底买了一台云服务器，为此我还特意写了一篇<a href="https://blog.xxfer.cn/posts/9a5ae3b8.html">博客</a>记录。想着学习一下服务器的运维使用，然后在上面搭建一些个人应用。现在看来有些麻烦，要好好研究研究。买之前觉得挺简单的，买了以后有点懵，不过用着用着就好了。</p><p>也是趁着阿里云杭州的云栖大会的活动，入手的包年服务器，很划算了已经，就这个<a href="https://www.aliyun.com/lowcode/promotion/allinaliyun/99program">活动</a>，对我这种刚上手的很友好😋，完全够用了。</p><h2 id="结束我们难忘的新冠疫情"><a href="#结束我们难忘的新冠疫情" class="headerlink" title="结束我们难忘的新冠疫情"></a>结束我们难忘的新冠疫情</h2><p>新冠疫情已经一去不复返了，我们终于“自由”啦。当然希望高中能够接受我们的申请，安排我和hxd的“学生大使回访母校”的活动。去年因为疫情被婉拒了，期待今年的寒假……</p><h2 id="关于游戏"><a href="#关于游戏" class="headerlink" title="关于游戏"></a>关于游戏</h2><p>还是一如既往的王者荣耀，不过值得一提的是，今年通过王者认识了朋友，有公主也有王子哈哈哈。感谢你们的陪伴（手动比心）……</p><p>室友邀请过我玩原神，但我知道原神太氪太肝了，我玩不了一点哈哈哈。游戏不过一种放松的途径而已，一个王者足矣。</p><p>今年遇到的高手队友：</p><ul><li>国服蛋</li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/10/659ebc98b6946.jpg"/></div></div><ul><li>高手司空震</li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/10/659ebca68d24f.jpg"/></div></div><p><strong>脑子一热还把妲己的至尊给买了</strong>😳</p><h2 id="对2024的展望"><a href="#对2024的展望" class="headerlink" title="对2024的展望"></a>对2024的展望</h2><p>如愿保上研，努力提高专业技术，然后不管是变成社畜，还是成为研究牲，都要努力活着，就是这样……</p><p>说实在的，我觉得前端学起来还是挺有意思的，就像游戏一样，不像后端业务这么繁琐（前端也有令人头大的知识点，但是修炼CSS大法会发现很多乐趣）。前端的东西虽然相对比较少，但是想要精通，还是需要下工夫的。可话又说回来，我将来并不打算从事前端的工作，所以学的差不多就好，毕竟咱是个程序员，前端的东西多少得懂一些。剩下的时间多花点在网安上吧，虽说网安就业也不咋地，但下了工夫总是有用的。至于将来的就业方向，还是得斟酌一下，别限的太死，可大体方向得确定了，然后花一年多的时间去准备吧。</p><p>总之，在新的一年里，要继续努力，要努力变强。还有，在新的一年里，我有可能从i变e吗？🙏</p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note blue anzhiyufont anzhiyu-icon-fan simple&quot;&gt;&lt;p&gt;转眼一年又过去了，这一年发生了很多事呀……&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;一些心路历程&quot;&gt;&lt;a href=&quot;#一些心路历程&quot; class=&quot;hea</summary>
      
    
    
    
    <category term="大学生涯" scheme="https://blog.xxfer.cn/categories/%E5%A4%A7%E5%AD%A6%E7%94%9F%E6%B6%AF/"/>
    
    
    <category term="年终总结" scheme="https://blog.xxfer.cn/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>【持续更新...】刚买到服务器应该干什么？</title>
    <link href="https://blog.xxfer.cn/posts/8127414b.html"/>
    <id>https://blog.xxfer.cn/posts/8127414b.html</id>
    <published>2023-12-30T20:44:33.000Z</published>
    <updated>2024-01-17T14:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>前段时间，在某云上买了一台云服务器。这是第一台自己的服务器，所以有些不知所措吧，一下子不知道该干什么了。本来我的初衷是在服务器上结合docker部署一些项目，以及为了给我的域名备案使用。买了以后，发现各种问题接踵而至。如何使用？如何选择远程连接的方式？如何确保服务器的安全？</p><p>刚买第二天就给我报各种风险漏洞，虽然目前没有什么东西放在上面，但是也不能一直这样下去。因此，我就到处去学如何使用这台服务器（当然包括官方文档），来解决上面的问题。现在真心觉得维护工作好麻烦，我在想部署项目的时候不知道会有什么更大的问题在等着我……</p><p>好啦，还是正题，下面我会记录一下我刚拿到的服务器以后做的一些事情。</p><p><strong>服务器操作系统：Debian 11</strong></p><h2 id="远程连接"><a href="#远程连接" class="headerlink" title="远程连接"></a>远程连接</h2><p>远程连接的方式有很多，提供远程连接的软件也有很多，根据实际需求选择合适的软件即可。下面介绍几种常见的远程连接方式或软件吧</p><h3 id="网页端远程连接"><a href="#网页端远程连接" class="headerlink" title="网页端远程连接"></a>网页端远程连接</h3><p>这应该是最最最简单，或者说用户最容易发现的方法了吧，简单讲下：</p><ol><li>进入云服务商官网控制台，左上角扩展中找到“云服务器ECS”进入实例管理</li><li>点击远程连接，选择连接方式，输入密码即可连接</li></ol><p><strong>如果忘记密码可以离线重置密码，重置以后不要忘了重启实例</strong></p><p>这种连接方式就是浏览器通过云服务商连接到远端的服务器，浏览器与服务商之间使用HTTPS协议，服务商与服务器之间使用的是SSH协议，这两种协议的安全性都有保证，所以可以放心使用。</p><h3 id="VNC"><a href="#VNC" class="headerlink" title="VNC"></a>VNC</h3><p>VNC是基于RFB协议的有界面的连接方式，但是RFB协议不够安全，不建议经常使用VNC连接。可是，一般排查一些异常会用到VNC，所以VNC是需要学会的。</p><p>第一次使用服务器需要设置VNC远程连接密码，实例操作中的“更多”，找到密码&#x2F;密钥，里面就能修改VNC远程密码。</p><h3 id="RDP"><a href="#RDP" class="headerlink" title="RDP"></a>RDP</h3><p>VNC和RDP都是有界面的连接模式，但是RDP更安全，所以一般选择RDP来连接的比较多。RDP是微软的专有协议，在Windows下使用非常方便，而且更安全，另外RDP需要在安全组中开启3389端口。</p><h3 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h3><p>还有一种更安全的连接方式，那当然是SSH连接，毕竟密钥对肯定比密码更安全啦。</p><p>在控制台左边有一栏是“网络与安全”，里面有一个密钥对，去创建一个密钥对。其实就是在本地生成一个私钥，需要保存好，不要泄露了。之后远程连接时使用证书连接即可。</p><p><strong>生成的私钥文件一定要保存好，这个文件只能下载一次</strong></p><h3 id="Websockets-SSL免密登录"><a href="#Websockets-SSL免密登录" class="headerlink" title="Websockets+SSL免密登录"></a>Websockets+SSL免密登录</h3><p>简单来讲就是要在服务器端安装一个阿里云的客户端来支持免密登录。</p><h3 id="客户端连接（我采用的方式）"><a href="#客户端连接（我采用的方式）" class="headerlink" title="客户端连接（我采用的方式）"></a>客户端连接（我采用的方式）</h3><p>一般大厂提供的云服务都会有自己的客户端连接软件，比如阿里云、腾讯云等。使用他们开发提供的客户端也会比较放心，直接下载安装即可。</p><p>具体的操作方式可以参考下面的视频：</p><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://www.bilibili.com/video/BV1724y1o7ih/?spm_id_from=333.337.search-card.all.click">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://www.freeimg.cn/i/2023/12/30/658fb2cbc152c.png)">          <i class="anzhiyufont anzhiyu-icon-link" style="display: none"></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">远程连接云服务器的方式汇总</div>            <div class="tag-link-sitename">技术蛋老师</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><h2 id="如何处理服务器报警的漏洞"><a href="#如何处理服务器报警的漏洞" class="headerlink" title="如何处理服务器报警的漏洞"></a>如何处理服务器报警的漏洞</h2><p>使用服务器的第二天，就给我报了两个中小漏洞出来，短短几天又爆出来十几个，我的天。作为网安人肯定不能忍，于是就去网上寻找解决方案，下面我来讲讲我是如何解决漏洞的。</p><p>这里出现的漏洞主要是系统漏洞、Web漏洞以及应用漏洞。基本平时碰到的漏洞一般都是系统漏洞，这是因为Linux内核或者应用程序中必然会存在一些缺陷或者错误。</p><h3 id="手动修复漏洞（免费）"><a href="#手动修复漏洞（免费）" class="headerlink" title="手动修复漏洞（免费）"></a>手动修复漏洞（免费）</h3><p>具体请看下文<a href="https://blog.xxfer.cn/posts/8127414b.html#%E5%A6%82%E4%BD%95%E5%81%9A%E5%A5%BD%E5%AE%89%E5%85%A8%E9%98%B2%E6%8A%A4%EF%BC%9F">如何做好安全防护？</a></p><!-- - 对于系统漏洞  新的软件意味着更少的漏洞。  我的服务器操作系统是Linux的，主要为了加强对Linux的使用学习。所以以Linux为例，可以执行yum update -y命令来升级和修复系统。  执行以后，重启服务器，等第二天的扫描结果，漏洞确实减少了，但还是存在漏洞。亲测至少是有效的，这种方法应该可以解决大多数报的小危漏洞。  yum是一个用于管理RPM包的工具，它可以自动解决包之间的依赖关系，方便地安装、更新或删除软件包。yum update -y命令的作用是更新当前系统可升级的最新版本的软件包，包括内核和系统版本。这样可以修复一些已知的系统漏洞，提高系统的安全性和稳定性。但是，yum update -y 命令并不能保证修复所有的系统漏洞，因为有些漏洞可能还没有被发现或者还没有被修复。  当然还可以利用云安全中心基础版免费检测云服务器存在的漏洞，然后根据漏洞详情自行修复，这种需要的水平就比较高了。  所以感觉要彻底修复报出来的漏洞还是需要官方的修复服务qwq- 对于Web漏洞  暂时还没有遇到，等遇到了再来更新解决方案。- 对于应用漏洞  暂时还没有遇到，等遇到了再来更新解决方案。 --><h3 id="自动修复漏洞（付费）"><a href="#自动修复漏洞（付费）" class="headerlink" title="自动修复漏洞（付费）"></a>自动修复漏洞（付费）</h3><p>最简单粗暴的方法，掏钱使用服务商的按量修复，推荐富哥使用。</p><h2 id="如何做好安全防护？"><a href="#如何做好安全防护？" class="headerlink" title="如何做好安全防护？"></a>如何做好安全防护？</h2><p>我只能尽我所能去做好服务器的安全防护，保护好我的小鸡🐥。Linux 服务器的安全防护一直是一个复杂的巨大课题。现在，我有了一台服务器，这与自己的电脑不同，它 24 小时开机，而且具有一个公网 IP，意味着人人都可能可以访问到这台服务器，就相当于已经置身于安全攻防战场的第一线，需要直面所有风险。</p><p>任何人只需要知道【IP 地址】+【端口】+【用户名】+【密码】这四个要素，就能登录你的 VPS 服务器。那很显然，这四要素的安全就是我们要防护的底线。</p><h3 id="更新安装包索引"><a href="#更新安装包索引" class="headerlink" title="更新安装包索引"></a>更新安装包索引</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br><span class="line">apt upgrade</span><br></pre></td></tr></table></figure><p>保持即可，直接回车。</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/14/65a3cc17bfb17.png" style="width:800px;"/></div></div><h3 id="SSH-防护"><a href="#SSH-防护" class="headerlink" title="SSH 防护"></a>SSH 防护</h3><h4 id="更改-SSH-端口"><a href="#更改-SSH-端口" class="headerlink" title="更改 SSH 端口"></a>更改 SSH 端口</h4><p>一般 SSH 端口默认为22，但是也有服务器提供商已经为我们修改了SSH的端口，那么你可以选择不修改，直接跳过此步。</p><ol><li>对于Linux来说，用 nano 打开 SSH 远程登录程序设置：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><p>  如果服务器操作系统是Windows，自行检索吧，因为很少有人用Windows去操作服务器。</p><ol start="2"><li>文件打开后，进入了 nano 的界面，重要的快捷键都显示在屏幕下方了，不用死记硬背，是不是很贴心呢？</li></ol><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/14/65a3d25c8f86c.png" style="width:800px;"/></div></div><ol start="3"><li>在打开的文件中一找到 Port 这项，并修改它的端口。Port 后面的数字就是 SSH 的端口，<strong>建议把它改成一个大于 1024 小于 65535 的整数。</strong>具体操作如下：</li></ol><ul><li>使用 ctrl+w 进入搜索模式，然后输入 Port 22 并回车</li><li>删除 22 并改成你自定义的端口号</li><li>注意：如果这一行开头有个#，说明这一行【不生效】（被注释掉了），可以在文件最后写一个不带#的，或者把#删掉就好。</li></ul><div class="note orange anzhiyufont anzhiyu-icon-dengpao simple"><p>强烈建议用一个自己想到的其他端口，毕竟有 6 万多个端口可以自由选择。</p></div><ol start="4"><li>保存并退出配置文件</li></ol><p>  保存是 <code>ctrl+o + 回车</code>，退出是 <code>ctrl+x</code></p><p>  <strong>注意：是保存后退出，不是退出后保存</strong></p><ol start="5"><li>重启 ssh 服务，使变更生效</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service sshd restart</span><br></pre></td></tr></table></figure><p><strong>注意：为了保证你不会失联，请不要关闭当前的 ssh 登录窗口！而是另外开一个窗口来测试！</strong><br><strong>注意：为了保证你不会失联，请不要关闭当前的 ssh 登录窗口！而是另外开一个窗口来测试！</strong><br><strong>注意：为了保证你不会失联，请不要关闭当前的 ssh 登录窗口！而是另外开一个窗口来测试！</strong></p><ol start="6"><li>一般来说，现在就能使用自定义端口使用SSH服务了。但是也不绝对，就拿我使用的ECS来说。因为阿里云为了保护服务器，在默认的安全组里面，只添加了一些常用的端口号，比如22端口。所以，我还需要进入服务器的控制台，<strong>在安全组里添加自定义的端口，然后重启实例，注意必须重启实例</strong>，然后才能够使用自定义端口进行SSH连接。这种端口变换不会影响公私钥对的校验。</li></ol><p>  所以说，大家需要查看自己的服务器是否开启了我们自定义的端口号，如果默认关闭，那就需要手动开启，才能使用SSH连接。</p><h4 id="使用复杂的密码"><a href="#使用复杂的密码" class="headerlink" title="使用复杂的密码"></a>使用复杂的密码</h4><p>如果你想给当前的用户设置重新设置一个密码，那么可以到这个<a href="https://1password.com/zh-cn/password-generator/">网站</a>，生成一个复杂的密码，当作你服务器的密码。</p><p>然后使用下面的命令修改密码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd</span><br></pre></td></tr></table></figure><p>出现提示让你修改密码。然后粘贴进去就行了。（注意为了安全的考量，Linux 下输入密码是没有显示的）</p><h4 id="新建普通用户"><a href="#新建普通用户" class="headerlink" title="新建普通用户"></a>新建普通用户</h4><p>为什么要普通用户？Linux 系统中的 root，不仅仅是一个管理员账号那么简单。它是整个系统的<code>根基</code>、是系统的主宰、至高无上的神。一旦 root 账号出现安全问题，整个系统就只能任人鱼肉、无处可逃。</p><ol><li>新增一个用户并设定登录密码</li></ol><p>名字可以随便起，这里以 ecsadmin 为例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adduser ecsadmin</span><br></pre></td></tr></table></figure><p>执行命令后，根据提示操作即可。务必设置一个用户密码（设置密码时是看不到的）。之后系统会询问一些用户的附加信息，可以无视，一路回车即可。</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/14/65a3dcf120365.png" style="width:800px;"/></div></div><ol start="2"><li>安装 sudo 功能</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt update &amp;&amp; apt install sudo  <span class="comment">#Debain默认没有，Ubuntu自身应该是已经有安装的</span></span><br></pre></td></tr></table></figure><ol start="3"><li>把 ecsadmin 用户加入 sudo 名单里</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">visudo</span><br></pre></td></tr></table></figure><p>在 <code>User Privilege Specification</code> 下加入一行 <code>ecsadmin ALL=(ALL) NOPASSWD: ALL</code> 即可。</p><div class="note orange anzhiyufont anzhiyu-icon-dengpao simple"><p>NOPASSWD 这个设置，它的意思是 ecsadmin 用户临时使用 root 权限时，不用额外输入密码。如果你希望遵守传统习惯，每次使用 sudo 时需要输入密码，那么这一行改成 vpsadmin ALL&#x3D;(ALL:ALL) ALL 即可。</p></div><h4 id="禁止-root-登陆"><a href="#禁止-root-登陆" class="headerlink" title="禁止 root 登陆"></a>禁止 root 登陆</h4><ol><li>用 nano 编辑器打开 SSH远程登录程序设置</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><ol start="2"><li>找到 PermitRootLogin Yes 这一项，然后把它后面的设定值改为 no 即可</li><li>保存文件并退出</li><li>重启 ssh 服务，让变更生效</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service sshd restart</span><br></pre></td></tr></table></figure><h3 id="全局防护"><a href="#全局防护" class="headerlink" title="全局防护"></a>全局防护</h3><h4 id="安装并配置-UFW-防火墙"><a href="#安装并配置-UFW-防火墙" class="headerlink" title="安装并配置 UFW 防火墙"></a>安装并配置 UFW 防火墙</h4><ol><li>Ubuntu 默认自己已经是自带 ufw 防火墙了，只是没有启动而已（如果是 Debian 的话，需要安装）</li></ol><p>安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install ufw</span><br></pre></td></tr></table></figure><ol start="2"><li>设置 ufw 使用默认值</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ufw default deny incoming</span><br><span class="line">ufw default allow outgoing</span><br></pre></td></tr></table></figure><ol start="3"><li>允许 SSH 连接</li></ol><p>没有改SSH端口设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ufw allow ssh</span><br></pre></td></tr></table></figure><p>使用自定义SSH端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ufw allow 自定义端口号/tcp comment <span class="string">&#x27;SSH&#x27;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>允许 http 连接</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ufw allow http</span><br></pre></td></tr></table></figure><ol start="5"><li>允许 https 连接</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ufw allow https</span><br></pre></td></tr></table></figure><ol start="6"><li>启动 ufw 防火墙</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ufw <span class="built_in">enable</span></span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/14/65a3e90abd0fb.png"/></div></div><ol start="7"><li>查看 ufw 防火墙状态</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ufw status</span><br><span class="line">ufw status numbered</span><br></pre></td></tr></table></figure><ol start="8"><li>其他</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ufw delete 5 <span class="comment">#删除一条规则</span></span><br><span class="line">ufw reload   <span class="comment">#重载配置</span></span><br></pre></td></tr></table></figure><h4 id="禁止-Ping"><a href="#禁止-Ping" class="headerlink" title="禁止 Ping"></a>禁止 Ping</h4><ul><li><p>宝塔用户<br>如果是宝塔用户，可以在这边禁止 Ping</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/17/65a76442b05d2.png"/></div></div></li><li><p>未安装宝塔的用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/ufw/before.rules</span><br></pre></td></tr></table></figure><p><code>crl+w</code>搜索：<code>echo-request</code>，把 <code>ACCEPT</code> 改成 <code>DROP</code></p></li></ul><h4 id="禁止暴力破解"><a href="#禁止暴力破解" class="headerlink" title="禁止暴力破解"></a>禁止暴力破解</h4><div class="note orange anzhiyufont anzhiyu-icon-dengpao simple"><p>这一步如果大家使用的是SSH公私钥对连接的话就没必要配置了，因为只要保证你的私钥不泄露，就基本能够保证不被暴力破解。感兴趣的可以去了解一下RSA加密通信的相关知识。其实，使用SSH连接远程仓库的时候，有些教程会教大家生成私钥，这个生成的私钥一般就在用户文件夹下的.ssh里面，就是通过RSA加密算法得到的。</p></div><p>安装 Fail2ban</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update &amp;&amp; sudo apt install fail2ban</span><br></pre></td></tr></table></figure><p>进入文件夹，先做好备份</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/fail2ban <span class="comment"># 进入fail2ban目录</span></span><br><span class="line">sudo <span class="built_in">cp</span> fail2ban.conf fail2ban.local  <span class="comment"># 复制一份配置文件 </span></span><br></pre></td></tr></table></figure><p>打开编辑fail2ban.local文件，默认的是没有配置的，我们加入一个配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[sshd]</span><br><span class="line"><span class="built_in">enable</span> = ture</span><br><span class="line">port = 9753   <span class="comment"># 注意改成自己对应的端口</span></span><br><span class="line">filter =sshd</span><br><span class="line">logpath = /var/log/auth.log</span><br><span class="line">maxretry = 3</span><br><span class="line">bantime = -1</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/17/65a765f9d0221.png"/></div></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo service fail2ban restart    <span class="comment">#重启</span></span><br><span class="line">sudo fail2ban-client status      <span class="comment">#查看状态</span></span><br><span class="line">sudo fail2ban-client status sshd <span class="comment">#查看sshd的详细状态</span></span><br></pre></td></tr></table></figure><p>解禁指定IP，这里的IP需要自定义</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo fail2ban-client <span class="built_in">set</span> sshd unbanip 192.0.0.1 <span class="comment">#解禁指定IP，这里的IP需要自定义</span></span><br></pre></td></tr></table></figure><h3 id="尽量使用反向代理"><a href="#尽量使用反向代理" class="headerlink" title="尽量使用反向代理"></a>尽量使用反向代理</h3><div class="note orange anzhiyufont anzhiyu-icon-dengpao simple"><p>使用宝塔的同学建议更改一下默认的8888端口，使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bt</span><br></pre></td></tr></table></figure><p>就能进入修改面板，大家自己修改即可。</p></div><p>我使用 Nginx Proxy Manager 做反向代理，具体搭建请参考<a href="https://blog.xxfer.cn/posts/79f9b780.html">Nginx Proxy Manager</a></p><h2 id="其他使用"><a href="#其他使用" class="headerlink" title="其他使用"></a>其他使用</h2><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2023/12/26/658a8a208cbe9.jpg" alt="等待更新......" style="width:360px;"/></div><span class="image-caption">等待更新......</span></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;前段时间，在某云上买了一台云服务器。这是第一台自己的服务器，所以有些不知所措吧，一下子不知道该干什么了。本来我的初衷是在服务</summary>
      
    
    
    
    <category term="技术分享" scheme="https://blog.xxfer.cn/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="网络安全" scheme="https://blog.xxfer.cn/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    <category term="Web" scheme="https://blog.xxfer.cn/tags/Web/"/>
    
    <category term="ECS" scheme="https://blog.xxfer.cn/tags/ECS/"/>
    
  </entry>
  
  <entry>
    <title>奇怪的知识又增加了( •̀ ω •́ )y</title>
    <link href="https://blog.xxfer.cn/posts/49fa10ba.html"/>
    <id>https://blog.xxfer.cn/posts/49fa10ba.html</id>
    <published>2023-12-29T00:00:00.000Z</published>
    <updated>2024-01-04T00:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>在这里我会分享一些新学习到的“知识点”，知道的勿喷( •̀ ω •́ )y</p><h2 id="BGM-OST"><a href="#BGM-OST" class="headerlink" title="BGM &amp; OST"></a>BGM &amp; OST</h2><p>BGM通常出现在游戏的setting里面。通常有Sound、BGM等的音量大小可调控。你玩FIFA还可以有Speech可以调。</p><p>BGM的全称是：Background Music。虽然和OST一样同为烘托氛围的作用，但是在咖啡厅、西餐厅、书店里面的那些，你只能说是BGM。</p><p>OST的全称是Original Sound Track，也就是影视原声。它的功能上，和BGM有一部分的重叠，但OST本身是需要被发行，才叫做OST的。它必须要影视制作公司拿出来发行，否则就不叫做OST了。</p><h2 id="多巴胺-an-？！"><a href="#多巴胺-an-？！" class="headerlink" title="多巴胺(àn)？！"></a>多巴胺(àn)？！</h2><p>“多巴胺”本身是一种神经传导物质，同时也是一种激素，能够让人产生愉悦的感觉。2023年，色彩鲜艳的“多巴胺穿搭”成了时尚潮流，“多巴胺”也引申出“快乐因子”的含义，成为流行语，广泛使用。“多巴胺”的“胺”经常被误读为ān，其实正确读音是àn。“胺”是氨分子中部分或全部氢原子被烃基取代而成的有机化合物。常容易读错的还有“三聚氰胺”。</p><h2 id="“账号”误为“帐号”"><a href="#“账号”误为“帐号”" class="headerlink" title="“账号”误为“帐号”"></a>“账号”误为“帐号”</h2><p>2023年7月，话题“账与帐很多人分不清”冲上热搜。生活中，许多网站和手机应用软件都将“账号”误为“帐号”。古汉语中，“帐”可通“账”。但是，2001年发布的《第一批异形词整理表》对二字明确分工如下：“账”用于货币和货物出入的记载、债务等，如账本、报账、借账、还账；“帐”专表用布、纱、绸子等制成的遮蔽物，如蚊帐、帐篷。“账号”本指单位或个人跟银行建立经济关系后，银行在账上给该单位或个人所编的号码，与货币等有关；后由此义引申，指用户访问计算机系统或使用某些资源时使用的识别码。因此，表示用户识别码时，“账号”才是正确词形。</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2023/12/26/658a8a208cbe9.jpg" alt="持续更新......" style="width:360px;"/></div><span class="image-caption">持续更新......</span></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;在这里我会分享一些新学习到的“知识点”，知道的勿喷( •̀ ω •́ )y&lt;/p&gt;
&lt;h2 id=&quot;BGM-OST&quot;&gt;&lt;a </summary>
      
    
    
    
    <category term="大学生涯" scheme="https://blog.xxfer.cn/categories/%E5%A4%A7%E5%AD%A6%E7%94%9F%E6%B6%AF/"/>
    
    
    <category term="玩梗" scheme="https://blog.xxfer.cn/tags/%E7%8E%A9%E6%A2%97/"/>
    
  </entry>
  
  <entry>
    <title>我的第一台云服务器——阿里云服务器 ECS</title>
    <link href="https://blog.xxfer.cn/posts/9a5ae3b8.html"/>
    <id>https://blog.xxfer.cn/posts/9a5ae3b8.html</id>
    <published>2023-12-28T20:44:33.000Z</published>
    <updated>2023-12-29T10:42:33.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="纪念我的第一台云服务器"><a href="#纪念我的第一台云服务器" class="headerlink" title="纪念我的第一台云服务器"></a>纪念我的第一台云服务器</h2><p>不知不觉得，建站也有段时间了。学到了不少前端后端的知识，同时也算是巩固和实践了不少之前所学。还想要继续深入学习下去，但是，相信不少同学在建站过程中和我一样，总会觉得缺了点什么。我想服务器应该就是其中之一，因为缺少服务器，很多东西都是寸步难行。</p><p>因此，趁着阿里云推出的双十一优惠，买了一台属于自己的云服务器ECS。之后我会在本站分享零基础学习云服务器的使用心得与体会，记录我的云服务器学习使用之路。当然，在探索到好用的小技巧，肯定会分享给大家。下面我们来看看服务器的魅力所在吧~</p><h2 id="什么是服务器？"><a href="#什么是服务器？" class="headerlink" title="什么是服务器？"></a>什么是服务器？</h2><p>说到服务器，相信大家都不陌生，大家会说服务器是一台特殊的主机或者说是网络中能对其它机器提供某些服务的计算机系统。没错，它就是一台为电脑提供服务的电脑。只是它在软件和硬件层面做了某些专门化设计。如果把电脑比作人类，那么服务器就是一个某一专业能力非常突出的人。</p><p>一般最常见的应该是Web服务器，顾名思义，它是专门用来响应大家的访问请求的。除此之外，还有文件服务器、数据库服务器也是两种比较常见的服务器类型。</p><p>因为服务器具有的特定功能，所以一般服务器的外观也和我们平时使用的电脑有所不同。</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2023/12/28/658d8defaf19b.jpg" alt="一台服务器示例" style="width:360px;"/></div><span class="image-caption">一台服务器示例</span></div><p>上文也提到了，它们在软件和硬件层面也都与普通电脑不同。</p><p>软件层面，比如服务器的操作系统一般不会用家用或者商用的这些windows旗舰版啥的，它们可能是windows服务器版，可能是Unix，Linux操作系统，这些操作系统也会针对服务器的工作情况，在安全性，稳定性，性能等方面有所侧重。</p><p>硬件层面，因为可能要被用来给很多人同时访问，因为要全年无休，而且要提供稳定的服务，所以在硬件设计上可能会更加的追求稳定性，可靠性，配置上也会有侧重性，比如前面说的文件服务器，那肯定会要求非常非常大的硬盘空间，硬盘的可靠性比普通家用硬盘的可靠性也高很多，然后这些服务器要面对大并发的数据处理，可能CPU也会很强劲，当然，他们都用不着独立显卡的，因为他们都不需要显示输出的，只有维护的时候才拖一台显示器去接上临时用一下。</p><h2 id="什么是云服务器？"><a href="#什么是云服务器？" class="headerlink" title="什么是云服务器？"></a>什么是云服务器？</h2><p>想要了解云服务器，可能需要知道虚拟主机、VPS、云服务器三者的区别：</p><h4 id="虚拟主机"><a href="#虚拟主机" class="headerlink" title="虚拟主机"></a>虚拟主机</h4><p>虚拟主机相对于其他两种云主机的主要区别就是，虚拟主机无需用户部署网站环境，通常默认支持多种建站环境，用户直接上传建站程序安装就可以使用。由于虚拟机空间不支持连接到桌面进行其他操作，所以一般服务器租用商都会提供一个控制面板，可以进行域名绑定、文件解压缩等简单操作。</p><p>从技术角度来讲，虚拟主机是使用特殊的软硬件技术，把一台真实的物理电脑主机分割成多个的逻辑存储单元，每个单元都没有物理实体，但是每一个逻辑存储单元都能像真实的物理主机一样在网络上工作，具有单独的域名、IP地址(或共享的IP地址)以及完整的Internet服务器功能。</p><h4 id="VPS"><a href="#VPS" class="headerlink" title="VPS"></a>VPS</h4><p>VPS主机是通过使用VPS(Virtual Private Server 虚拟专用服务器)技术，将一部服务器分割成多个虚拟专享服务器的优质服务，也就是由一台真实主机虚拟成多个小主机。每个VPS都可分配独立公网IP地址、独立操作系统、独立空间、独立内存、独立CPU资源等，可以远程连接到桌面，相当于一台功能完整的电脑;用户除了可以自行分配多个虚拟主机及无限企业邮箱外，还可以根据需求自行更换操作系统、安装程序、部署环境以及重启服务器，也就是说VPS主机相对虚拟主机来说更高一级，自由度更高。</p><h4 id="云服务器"><a href="#云服务器" class="headerlink" title="云服务器"></a>云服务器</h4><p>上面所说的VPS主机是由一台真实主机虚拟成多个小主机，性能往往得不到保障，那么云服务器又怎样的呢?但话又说回来，VPS发展了这么多年，拥有非常成熟的方案，一般中小型的企业也会有VPS的业务，但是云产品就不一样了。因为云服务器往往需要企业根据自身需求条件自研一套资源分配的方案，不像VPS那样抄作业就行，所以一般只有大厂会有云服务器的业务。</p><p>云服务器利用的是更先进的集群技术，在一组集群服务器上虚拟出多个类似独立服务器的部分，集群中每个服务器上都有云服务器的一个镜像，从而大大提高了虚拟服务器的安全稳定性，除非所有的集群内服务器全部出现问题，云服务器才会无法访问。所以，云服务器相对于VPS主机来说又更高一个级别，稳定性、安全性更高。</p><p><strong>虚拟主机 &lt; VPS &lt; 云服务器</strong></p><h2 id="有什么用？"><a href="#有什么用？" class="headerlink" title="有什么用？"></a>有什么用？</h2><p>一台服务器有很多用处，值得我们持续探索。一般的建站呀，文件存储这些都不一一列举了，下面来说说我买云服务器的原因吧。目前我还是一名大三学生，对于平时的开发，一些项目如果需要服务器之类的资源，其实有更廉价便捷的方案，比如使用docker。那为什么还是决定买一台服务器呢？</p><ol><li>使用docker只能做到本地运行或者说只能做到内网使用，想要在外网访问本地项目，就必须有一个公网ip。也许大家会说使用内网穿透，但是从费用上来看，差不了多少，所以为什么不干脆直接买一台服务器，上面的问题都能迎刃而解了。</li><li>我的博客是使用GitHub Pages来搭建的，所以说源站资源在国外的服务器上，国内访问非常慢。想要加速到比较好的效果，使用CDN应该是首选。而CDN服务器如果选在国内，那么域名需要备案，接入商备案就需要提供你的公网ip。发现了吗？又是公网ip。</li><li>就我目前的情况，大概率是回去读研的，但只能说读研可能会是一种选择，如果大四能够拿到好的offer，我不介意直接工作。那如果将来读研，一些学习资料代码和论文之类的肯定会放在实验室的主机上。这样不管是在宿舍还是回家，都会需要远程实验室的主机。在宿舍还好，毕竟在同一局域网，直接用内网ip，但如果出了学校，就比较麻烦了。我知道解决方案不止服务器，很多远程软件也可以解决，但是一般这种都需要付费（什么德行大家应该都懂），这时候服务器就能派上用场了。</li><li>最后就是上文提到的，docker结合服务器可以玩出新高度，很多好用的软件结合服务器会有意想不到的体验感。通过服务器慢慢搭建属于自己的生态环境，是一件很酷的事情。</li></ol><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>如果小伙伴们目前还是本科，其实还犯不着买云服务器（富哥除外），真的想用服务器，可以去试试和老师套套近户，白嫖他们实验室的服务器也是不错的~当然也可以去国外买VPS服务器，也是相对便宜的，我只要是考虑这是我的第一台服务器，所以希望有些保障，所以选择了阿里云，其实国内除阿里云外，还有腾讯云、华为云等，国外的亚马逊云也是值得信赖的。</p><p>后面会分享一些基于服务器的有意思的项目给大家，都是些在收藏夹里“吃灰”的项目。现在有了自己的服务器，当然要都玩一遍😋我会在这篇<a href="https://blog.xxfer.cn/posts/9a5ae3b8.html">博客</a>里记录我的使用日志。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;纪念我的第一台云服务器&quot;&gt;&lt;a href=&quot;#纪念我的第一台云服务器&quot; class=&quot;headerlink&quot; title=&quot;纪念我的第一台云服务器&quot;&gt;&lt;/a&gt;纪念我的第一台云服务器&lt;/h2&gt;&lt;p&gt;不知不觉得，建站也有段时间了。学到了不少前端后端的知识，同时也算是巩</summary>
      
    
    
    
    <category term="技术分享" scheme="https://blog.xxfer.cn/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="Web" scheme="https://blog.xxfer.cn/tags/Web/"/>
    
    <category term="ECS" scheme="https://blog.xxfer.cn/tags/ECS/"/>
    
    <category term="阿里云" scheme="https://blog.xxfer.cn/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
    <category term="后端" scheme="https://blog.xxfer.cn/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>路径规划：基于QT的Astar算法演示器</title>
    <link href="https://blog.xxfer.cn/posts/7dca2e02.html"/>
    <id>https://blog.xxfer.cn/posts/7dca2e02.html</id>
    <published>2023-12-26T17:20:33.000Z</published>
    <updated>2023-12-30T01:44:33.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>这是我自主研发的小程序，用于《算法设计与优化》的课设作业——无人机路径搜索和优化。</p><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><p>本项目基于 QT 框架，使用 C++ 开发</p><p>开发环境：Windows</p><p>编辑器：QT Creator</p><h2 id="主界面"><a href="#主界面" class="headerlink" title="主界面"></a>主界面</h2><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2023/12/27/658c4264e5507.jpg" style="width:800px;"/></div></div><h2 id="如何使用？"><a href="#如何使用？" class="headerlink" title="如何使用？"></a>如何使用？</h2><h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><p>源码放在GitHub上，下载即可使用</p><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://github.com/LJJbyZJU/A-star">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://www.freeimg.cn/i/2023/12/23/6586e75c86de7.png)">          <i class="anzhiyufont anzhiyu-icon-link" style="display: none"></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">A-star算法</div>            <div class="tag-link-sitename">GitHub</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><ol><li><p>直接通过链接进入下载源码，相信看本片文章的同学都会使用GitHub，我不再细说。</p></li><li><p>当然也可以本地新建文件夹，然后使用命令克隆源码：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:LJJbyZJU/A-star.git</span><br></pre></td></tr></table></figure></li><li><p>考虑到GitHub访问比较慢，甚至无法访问，我把网盘链接也附上（提取码：16ca），但只有最新版本的代码：</p></li></ol><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://pan.baidu.com/s/1SwZ1t9c0dEq-w0hxFZM_XA">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://www.freeimg.cn/i/2023/12/30/658f84e46d5ad.png)">          <i class="anzhiyufont anzhiyu-icon-link" style="display: none"></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">A-star算法</div>            <div class="tag-link-sitename">百度网盘</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><p>下载源码以后，建议安装 QT Creator 打开 Astar.pro 项目工程文件，即可编辑做二次开发</p><h3 id="Windows-中打包为可执行文件"><a href="#Windows-中打包为可执行文件" class="headerlink" title="Windows 中打包为可执行文件"></a>Windows 中打包为可执行文件</h3><p>推荐使用 Enigma Virtual Box 打包，可以<a href="https://blog.csdn.net/qq_40994692/article/details/113880198">参考这篇博客</a></p><h2 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h2><h3 id="界面设计"><a href="#界面设计" class="headerlink" title="界面设计"></a>界面设计</h3><ol><li>自定义地图宽高</li><li>地图单元格大小可调</li><li>自定义起点、终点、障碍物</li><li>底部状态栏，便于调试</li><li>顶部工具栏可隐藏</li><li>显示最优路径的同时将探索点用不同颜色显示在地图中</li><li>绘制地图可以 .Amap 文件保存到本地文件夹</li><li>可将保存的 .Amap 文件载入地图</li><li>性能分析，数据可视化处理</li><li>生成随机地图（生成逻辑待优化，目前还不能确保生成的地图一定存在可行路径）</li><li>可导入本地图片作为地图背景，一种伪栅格化操作</li><li>“关于我们”页面</li><li>一点拙劣的 QSS 美化</li></ol><h3 id="算法设计"><a href="#算法设计" class="headerlink" title="算法设计"></a>算法设计</h3><ol><li>深度优先搜索算法</li><li>广度优先搜索算法</li><li>Dijkstra 算法</li><li>最佳优先搜索算法</li><li>传统 A 星算法</li><li>双向 A 星算法</li><li>优化 A 星算法<ul><li>三种距离计算定义预估距离 h<ul><li>切比雪夫距离</li><li>曼哈顿距离</li><li>欧几里得距离</li></ul></li><li>整体动态加权 dynamic</li><li>自定义拐角权值 penalty</li><li>自定义安全距离模式 alpha</li></ul></li><li>三种增量式搜索算法（还不够完善，不建议使用）</li></ol><h2 id="程序演示"><a href="#程序演示" class="headerlink" title="程序演示"></a>程序演示</h2><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2023/12/26/658a8a208cbe9.jpg" alt="等待更新......" style="width:360px;"/></div><span class="image-caption">等待更新......</span></div><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>由于项目用于西北工业大学的课设总结，所以一些 ico 图标都与 NWPU 相关。如果有同学需要比较原始的版本，可以通过QQ：2565474095 联系我，免费提供代码。当然，如果有什么问题，我会尽我所能回答。</p><p>还有一件重要的事，下载源码的同学千万别忘了给个免费的star哦，感谢大家~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;这是我自主研发的小程序，用于《算法设计与优化》的课设作业——无人机路径搜索和优化。&lt;/p&gt;
&lt;h2 id=&quot;开发环境&quot;&gt;&lt;a</summary>
      
    
    
    
    <category term="技术分享" scheme="https://blog.xxfer.cn/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="A星算法" scheme="https://blog.xxfer.cn/tags/A%E6%98%9F%E7%AE%97%E6%B3%95/"/>
    
    <category term="自主开发" scheme="https://blog.xxfer.cn/tags/%E8%87%AA%E4%B8%BB%E5%BC%80%E5%8F%91/"/>
    
    <category term="C++" scheme="https://blog.xxfer.cn/tags/C/"/>
    
    <category term="QT" scheme="https://blog.xxfer.cn/tags/QT/"/>
    
  </entry>
  
  <entry>
    <title>Freeimg 图床！又是白嫖的一天^_^</title>
    <link href="https://blog.xxfer.cn/posts/518ec1ac.html"/>
    <id>https://blog.xxfer.cn/posts/518ec1ac.html</id>
    <published>2023-12-25T20:27:33.000Z</published>
    <updated>2024-01-08T18:01:33.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="初识图床"><a href="#初识图床" class="headerlink" title="初识图床"></a>初识图床</h2><p>图床图床，就是用来存放图片的温床，博客内有大量的图片，大量的地方需要使用到图片，优化博客加载方便管理的除了压缩图片的大小之外，首选就是多处使用图片链接，到不同的资源地址去进行加载来完成图片的加载。</p><h2 id="安利一个免费图床——-Freeimg-图床"><a href="#安利一个免费图床——-Freeimg-图床" class="headerlink" title="安利一个免费图床—— Freeimg 图床"></a>安利一个免费图床—— Freeimg 图床</h2><p>这是我接触的第一个免费图床，只需要注册就会有100MB的容量，容量确实比较少，可人家毕竟是免费的。Freeimg图床在国内的访问速度挺快的，至少比GitHub上的访问迅速。</p><p>该图床已经出来100天了，仍处于推广期，元旦有福利发放，加入用户群就送 1GB 的容量，确实挺良心的了。大家如果用量不大，可以考虑一下，是个不错的选择。至于跑路，群主也说了，在停止服务之前会有通知，方便大家备份数据，所以在近半年时间我认为都能放心使用吧。下面就是Freeimg图床链接：</p><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://www.freeimg.cn/">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://www.freeimg.cn/i/2023/12/26/6589a9fe738b8.png)">          <i class="anzhiyufont anzhiyu-icon-link" style="display: none"></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">Freeimg.cn</div>            <div class="tag-link-sitename">owen0o0</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><h2 id="网络免费图床"><a href="#网络免费图床" class="headerlink" title="网络免费图床"></a>网络免费图床</h2><p>上网搜索就能搜索到不少免费的图床供应商，Freeimg就是我搜到的，一直用到现在。其他还有 SMMS 等不多介绍。</p><p>网上的免费图床一般只需要注册，就能快速使用，也方便管理，关键是免费无需配置。但是它们的缺点也很明显：容易跑路、不稳定、容量小、不能支持图片处理等。因此，大家还是会不停地寻找其他更合适的图床方案，我也是如此。</p><h2 id="Github-图床"><a href="#Github-图床" class="headerlink" title="Github 图床"></a>Github 图床</h2><p>大部分同学都是没有公网服务器的，所以就想到了这一类开源仓库。这种方案有很多优点，这里不再赘述。但是它存在比较致命的缺点：访问速度太慢了，而且还有被封号仓库的风险。有同学可能会说使用 CDN 加速，关于 CDN，不了解的同学可以来看看我写的这篇<a href="https://blog.xxfer.cn/posts/992dd5ba.html">CDN简介，推荐一些国内可用的CDN</a><br>使用 CDN 确实能够提高访问速度，但是 CDN 服务器的流量费用也不便宜鸭~</p><p>一个比较成熟的方案是使用 github + jsd + PicGo<br>感兴趣的同学可以去学习一下，之后我可能也会去尝试一下，如果有好的方案，我会第一时间告诉大家哦。</p><p>更新：<a href="https://blog.xxfer.cn/posts/92211228.html">jsd图床搭建</a></p><h2 id="npm-图床"><a href="#npm-图床" class="headerlink" title="npm 图床"></a>npm 图床</h2><p>具体配置方法可以去参考下面这篇安知鱼的博客</p><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://blog.anheyu.com/posts/72ea.html">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="">          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">npm 图床</div>            <div class="tag-link-sitename">npm 图床配置教程</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><p>配置也比较简单，关键这是免费的，而且选择对的镜像访问速度也很可观，不足之处就是非常依赖镜像，镜像炸了图床也就一起没了，而且容量一般一个版本就100-200MB。</p><h2 id="腾讯云或阿里云等各大平台的云存储OSS-CDN方案"><a href="#腾讯云或阿里云等各大平台的云存储OSS-CDN方案" class="headerlink" title="腾讯云或阿里云等各大平台的云存储OSS+CDN方案"></a>腾讯云或阿里云等各大平台的云存储OSS+CDN方案</h2><p>这个方案比较好，缺点是需要一定成本，大概为每年 20 元的存储费用 ➕ CDN 费用，CDN 为流量加速费用，具体得看站点流量大小。又拍云与七牛云都有免费的存储与 CDN 额度可以自行申请。毕竟是大厂，稳定性肯定是能够保证的，就是配置麻烦点。</p><h2 id="自建图床"><a href="#自建图床" class="headerlink" title="自建图床"></a>自建图床</h2><p>当然喽，如果你有一台服务器，那么你就可以自建自己的图床，以达到稳定性与速度兼备，可以自建<a href="https://github.com/lsky-org/lsky-pro">兰空图床</a>，这是国人开发的一个项目，缺点大概就是需要一台服务器的费用。这个图床项目比较适合一人开发，多人使用的场景，不难发现，Freeimg图床就是使用兰空图床搭建的。</p><p>关于自建图床的项目，其实在GitHub上就有不少的开源项目，大家自己去学习探索，然后在评论区分享给大家。</p><h2 id="付费图床"><a href="#付费图床" class="headerlink" title="付费图床"></a>付费图床</h2><p>Freeimg就可以通过付费获取更大的容量。其他的还有<a href="https://image.anheyu.com/">鱼佬的图床</a>和杜老师的<a href="https://7bu.top/">去不图床</a>，它们都是值得信赖的。一般 10 元 1G, 容量收费。记得给我打广告费~~~</p><h2 id="我的图床方案"><a href="#我的图床方案" class="headerlink" title="我的图床方案"></a>我的图床方案</h2><p>请参考<a href="https://blog.xxfer.cn/posts/6a3f672a.html">小李的图床方案</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;初识图床&quot;&gt;&lt;a href=&quot;#初识图床&quot; class=&quot;headerlink&quot; title=&quot;初识图床&quot;&gt;&lt;/a&gt;初识图床&lt;/h2&gt;&lt;p&gt;图床图床，就是用来存放图片的温床，博客内有大量的图片，大量的地方需要使用到图片，优化博客加载方便管理的除了压缩图片的大小之外</summary>
      
    
    
    
    <category term="博客" scheme="https://blog.xxfer.cn/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="图床" scheme="https://blog.xxfer.cn/tags/%E5%9B%BE%E5%BA%8A/"/>
    
    <category term="建站" scheme="https://blog.xxfer.cn/tags/%E5%BB%BA%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>没有属于自己的主页？我的个人主页搭建日记</title>
    <link href="https://blog.xxfer.cn/posts/3d879cfb.html"/>
    <id>https://blog.xxfer.cn/posts/3d879cfb.html</id>
    <published>2023-12-25T20:27:33.000Z</published>
    <updated>2024-01-06T21:48:33.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>前段时间一直在填坑，再加上域名备案没下来，解析不了，所以一直没搞个人主页的事情。昨天域名备案终于下来了，今天把个人主页的事结束。</p><p>话不多说，上链接：</p><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://xxfer.cn">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://www.freeimg.cn/i/2024/01/06/65994c3874b85.jpg)">          <i class="anzhiyufont anzhiyu-icon-link" style="display: none"></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">小李同学|WebSite</div>            <div class="tag-link-sitename">xxfer.cn</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><h2 id="主页描述"><a href="#主页描述" class="headerlink" title="主页描述"></a>主页描述</h2><h3 id="主界面"><a href="#主界面" class="headerlink" title="主界面"></a>主界面</h3><p>本来想用这张背景的，最后还是换了，两个都挺好看的！</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/06/659952e76898f.png" style="width:800px;"/></div></div><h3 id="时间胶囊和工具"><a href="#时间胶囊和工具" class="headerlink" title="时间胶囊和工具"></a>时间胶囊和工具</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/06/659953858934b.png" style="width:800px;"/></div></div><p>可以看时间这种，还有一些自己平时觉得还用的工具页，其实这个完全能作为浏览器的标签页了。</p><h3 id="音乐界面"><a href="#音乐界面" class="headerlink" title="音乐界面"></a>音乐界面</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/06/659953aa87400.png" style="width:800px;"/></div></div><p><strong>整体就是这样，主页本来就是做个导航页，所以不想搞得很复杂。</strong></p><h3 id="最终版本（换了一张背景）"><a href="#最终版本（换了一张背景）" class="headerlink" title="最终版本（换了一张背景）"></a>最终版本（换了一张背景）</h3><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/06/659954c49e2a8.png" style="width:800px;"/></div></div><h2 id="部署考量"><a href="#部署考量" class="headerlink" title="部署考量"></a>部署考量</h2><p>刚开始，想着用自己的服务器，用宝塔去搭，主要这个完全是个静态网页（动态资源很少）。<br>可最后想想还是用GitHub，主要有以下几点考虑：</p><ul><li>个人主页和博客，包括之后要建的“秘密空间”（记录自己的CTF学习总结），都是相对公开的，所以访问量会比较高。虽然服务器设置了一些安全措施，但是我自知才疏学浅，很多的潜在隐患可能还是会被别有用心的人利用。为了避免这些不必要的麻烦，最终选择部署在GitHub上。</li><li>另外GitHub也方便更新管理，部署方便，也不用担心GitHub被攻击，即使攻击了对我也没有太大损失。</li><li>服务器主要用于搭建自己的开发环境，放一些实用的小应用，不打算过于公开。</li></ul><p>所以，我最后还是选择了部署在GitHub上，可能唯一的缺陷就是访问慢，不过这个套一层CDN基本就能解决，而且现在访问量也不大，完全承受的了。虽然用自己的服务器还是得套CDN，肯定是不能让源IP直接裸露在外的，对于一些师傅的话有没有都一样(doge)。绕过CDN获取源服务器IP的方法也有很多，大家其实在搭建网站的时候需要注意像评论呀、邮箱等第三方验证的防护，总之这些不是一两句就能解释清的，我也不想在各位师傅面前班门弄斧。</p><p>既然决定搭建在GitHub上，其实也就不需要多说了，和博客搭建的方式一样。最后做好域名解析，CDN流量控制，一些必要的安全措施就行。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;前段时间一直在填坑，再加上域名备案没下来，解析不了，所以一直没搞个人主页的事情。昨天域名备案终于下来了，今天把个人主页的事结</summary>
      
    
    
    
    <category term="技术分享" scheme="https://blog.xxfer.cn/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="建站" scheme="https://blog.xxfer.cn/tags/%E5%BB%BA%E7%AB%99/"/>
    
    <category term="DIY" scheme="https://blog.xxfer.cn/tags/DIY/"/>
    
    <category term="个人主页" scheme="https://blog.xxfer.cn/tags/%E4%B8%AA%E4%BA%BA%E4%B8%BB%E9%A1%B5/"/>
    
  </entry>
  
  <entry>
    <title>Git：独立开发者应该如何管理仓库分支？</title>
    <link href="https://blog.xxfer.cn/posts/f73e6dd5.html"/>
    <id>https://blog.xxfer.cn/posts/f73e6dd5.html</id>
    <published>2023-12-23T11:16:08.000Z</published>
    <updated>2023-12-24T11:43:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>前段时间考试比较多，今天终于有空可以整理有关Git分支的管理使用技巧，相信大家对Git应该都不陌生，所以直接进入正题。</p><p>如果大家觉得看书面材料太无聊，推荐大家视频学习：</p><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://www.bilibili.com/video/BV1r3411F7kn/?spm_id_from=333.999.0.0&vd_source=91a233ea2e45cea087336c119461d12b">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://www.freeimg.cn/i/2023/12/30/658fb2cbc152c.png)">          <i class="anzhiyufont anzhiyu-icon-link" style="display: none"></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">Git核心原理</div>            <div class="tag-link-sitename">技术蛋老师</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><p>蛋蛋老师的视频真心不错，大家可以学习了这个视频以后再看下面的内容，别忘了关注 + 一键三连。<br>其实我觉得蛋老师的视频已经足够大家学习一阵子了。</p><p>这篇<a href="https://zhuanlan.zhihu.com/p/263050507">图解Git操作，一篇就够</a>写得很不错，还有图例。</p><h2 id="什么是分支？"><a href="#什么是分支？" class="headerlink" title="什么是分支？"></a>什么是分支？</h2><p>在任何代码管理工具中, 分支都是一个非常重要的概念。<br>分支是主线某个状态的一个复制, 在不影响主线情况下, 可以有新的变化。</p><p>实际生活中，我们的工作一般都是在一条主线(master&#x2F;main)上进行，每一次提交会形成一个commit对象。客户提出了一个新的需求，而这个需求的开发需要一段时间才能完成。为了不影响主线的稳定性和持续进行。 我们会怎么做？我们可以把整个项目复制一份，在复制的项目上开发新功能，开发完成通过测试后，再将改动的代码整合回主线。那么，这个复制出来的项目就是一个分支。</p><h2 id="重要的分支操作"><a href="#重要的分支操作" class="headerlink" title="重要的分支操作"></a>重要的分支操作</h2><p>相信大家看了蛋老师的视频以后，至少对Git已经有了入门级的了解。那么现在，让我们整理一下Git的常用命令。</p><p>Git工作流基本可以参考下面这张图：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/03/659562c9a239a.png" style="width:800px;"/></div></div><p><strong>一定要搞清楚远程仓库、本地仓库、暂存区和工作区的概念</strong></p><h3 id="克隆项目"><a href="#克隆项目" class="headerlink" title="克隆项目"></a>克隆项目</h3><p>从服务器上进行克隆项目到本地</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:LJJbyZJU/A-star.git</span><br></pre></td></tr></table></figure><p>执行<code>git clone</code>就会生成一份副本，在本地仓库和工作区都会同步副本</p><h3 id="提交代码"><a href="#提交代码" class="headerlink" title="提交代码"></a>提交代码</h3><ul><li>git status：查看文件状态。</li><li>git add .：文件添加进暂存区。</li><li>git commit -m “提交信息”：文件添加进本地仓库，-m参数改为-am可以直接推向本地仓库。</li><li>git push：文件推向远程仓库。</li><li>git log：查看文件提交日志，每一个commit都会有自己的commit的ID。</li></ul><p>运行<code>git commit -a</code>相当于运行<code>git add</code>把所有文件加入暂存区，然后再运行<code>git commit</code>把文件提交本地仓库。</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/03/659569653eb91.jpg" style="width:800px;"/></div></div><h3 id="代码回退"><a href="#代码回退" class="headerlink" title="代码回退"></a>代码回退</h3><ul><li>git fetch：从远程仓库拉取代码到本地仓库。</li><li>git reset –files：用本地仓库覆盖暂存区中修改，也就是覆盖最后一次git add的内容，即撤销提交到暂存区的内容。</li><li>git checkout –files：把文件从暂存区复制到工作区，用于放弃本地的修改。</li><li>git checkout HEAD –files：回退最后一次的提交内容。</li></ul><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2024/01/03/659569933738f.jpg" style="width:800px;"/></div></div><h3 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h3><ul><li>git reset –hard HEAD^：回退上一个版本。在Git中HEAD表示当前版本，HEAD^表示上一个版本。</li></ul><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><ul><li>git rm filename：在工作区删除，如果需要从版本库中删除文件可以使用git rm命令进行删除，然后提交。</li></ul><p>如果删除错了，可以使用<code>git checkout -- filename</code>进行恢复，其原理就是使用版本库的文件替换工作区的文件。</p><h3 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h3><ul><li>git branch &lt;分支名字&gt;：新建一个分支。</li><li>git checkout &lt;分支名字&gt;：新建立后分之后，切换分支。</li><li>git branch：查看本地的分支情况，分支前面带有*号的表示当前的分支。</li><li>git merge &lt;分支名字&gt;：<strong>合并指定的分支到当前分支</strong>。</li><li>git branch -d &lt;分支名字&gt;：删除分支，假如分支删除不了，可以通过：git branch -D &lt;分支名字&gt;，强制删除分支。</li><li>git remote：查看远程仓库的情况，加上-v参数可以查看详细情况。</li><li>git push origin master：将本地master分支推送到远程库。</li><li>git pull：拉取远程仓库的分支到本地仓库。相当于执行git fetch和git merge命令。</li></ul><div class="note orange anzhiyufont anzhiyu-icon-dengpao simple"><p>需要注意git fetch和git pull之间的区别！可以参考这篇<a href="https://zhuanlan.zhihu.com/p/123370920">详解git pull和git fetch的区别</a></p></div><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>可以在VScode中安装Git插件，方便使用。</p><p>分支的操作其实还有很多，常用的都已经罗列在上面了，使用时结合图例和git结构，熟能生巧，慢慢就能掌握。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;前段时间考试比较多，今天终于有空可以整理有关Git分支的管理使用技巧，相信大家对Git应该都不陌生，所以直接进入正题。&lt;/p</summary>
      
    
    
    
    <category term="技术分享" scheme="https://blog.xxfer.cn/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="自主开发" scheme="https://blog.xxfer.cn/tags/%E8%87%AA%E4%B8%BB%E5%BC%80%E5%8F%91/"/>
    
    <category term="GitHub" scheme="https://blog.xxfer.cn/tags/GitHub/"/>
    
    <category term="Git" scheme="https://blog.xxfer.cn/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>利用 Github_Token 玩转仓库 API</title>
    <link href="https://blog.xxfer.cn/posts/9a2a157c.html"/>
    <id>https://blog.xxfer.cn/posts/9a2a157c.html</id>
    <published>2023-12-21T12:16:08.000Z</published>
    <updated>2023-12-21T12:16:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>前段时间在升级 Github 的首页 DIY，然后在配置相应插件 api 的 Token 的时候，差点把博客搞崩了，然后网上也只有 GitHub 给的官方文档比较靠谱，但是会发现文档很简洁。所以今天有空记录一下我对 GitHub Token 的理解，希望能够帮助到大家。</p><p>另外，如果有想要做 GitHub 首页 DIY 的同学，可以访问我的 GitHub 首页。然后如果对我的首页 DIY 感兴趣的话，可以参考这篇<a href="https://xxfer.cn/posts/86bbdefa.html">GitHub首页DIY</a>鸭~</p><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://github.com/LJJbyZJU">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://www.freeimg.cn/i/2023/12/23/6586e75c86de7.png)">          <i class="anzhiyufont anzhiyu-icon-link" style="display: none"></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">xxfer的GitHub首页DIY</div>            <div class="tag-link-sitename">owen0o0</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><p>如果大家觉得看博客比较繁琐，可以直接转到<a href="https://docs.github.com/zh/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens">官方文档</a>进行学习。</p><h2 id="Web-中-Cookie、Session、Token"><a href="#Web-中-Cookie、Session、Token" class="headerlink" title="Web 中 Cookie、Session、Token"></a>Web 中 Cookie、Session、Token</h2><p>想要了解 Token，也许对比着学习会比较容易理解，下面我们先看看我们常听到的Cookie、Session与Token之间的联系。</p><p>由于篇幅原因，请看我之前写的<a href="https://xxfer.cn/posts/c98645fd.html">Web中的Cookie、Session、Token</a></p><h2 id="GitHub-中的-Token"><a href="#GitHub-中的-Token" class="headerlink" title="GitHub 中的 Token"></a>GitHub 中的 Token</h2><p>现在大家应该对Token有了一定的了解，在 GitHub 首页 DIY，想要保持信息的实时性时，我们往往会使用 GitHub Actions 的任务流来帮助我们更新首页中的一些内容，比如新发布的博客、B站的番剧等等。想要每天更新这些信息，离不开调用大佬提供 API 接口来获取数据。Token 就非常适用于 API 的调用。下面我们来看几个例子方便理解。</p><ul><li><p><a href="https://blog.xxfer.cn/posts/86bbdefa.html">我的GitHub Profile DIY</a></p><p>里面有很多地方用到了现成的API，大家可以自行观看。</p></li></ul><p><strong>说白了，Token就是一个令牌，有了这个令牌，你才可以对GitHub中的某些仓库进行操作，就这么简单。一般Token在GitHub Actions用到的比较多，可以参考<a href="https://blog.xxfer.cn/posts/3c96c005.html">如何使用Github Actions提高独立开发效率？</a></strong></p><h3 id="GitHub中现有的几种令牌"><a href="#GitHub中现有的几种令牌" class="headerlink" title="GitHub中现有的几种令牌"></a>GitHub中现有的几种令牌</h3><p>1. </p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2023/12/26/658a8a208cbe9.jpg" alt="等待更新......" style="width:360px;"/></div><span class="image-caption">等待更新......</span></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;前段时间在升级 Github 的首页 DIY，然后在配置相应插件 api 的 Token 的时候，差点把博客搞崩了，然后网上</summary>
      
    
    
    
    <category term="技术分享" scheme="https://blog.xxfer.cn/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="GitHub" scheme="https://blog.xxfer.cn/tags/GitHub/"/>
    
    <category term="DIY" scheme="https://blog.xxfer.cn/tags/DIY/"/>
    
    <category term="Token" scheme="https://blog.xxfer.cn/tags/Token/"/>
    
    <category term="API" scheme="https://blog.xxfer.cn/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>如何使用Github Actions提高独立开发效率？</title>
    <link href="https://blog.xxfer.cn/posts/3c96c005.html"/>
    <id>https://blog.xxfer.cn/posts/3c96c005.html</id>
    <published>2023-12-12T20:27:33.000Z</published>
    <updated>2023-12-29T18:01:33.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>作为程序员，大家可能都知道GitHub，也都知道它能方便我们管理项目源码。可是大家知道GitHub Actions并且都会使用吗？我一开始也不知道，也是摸鱼的时候无意间刷到的，所以去学习了一下。使用GitHub Actions其实就是在白嫖GitHub服务器帮我们做事，是一种工作流<a href="https://blog.xxfer.cn/posts/35e49d5e.html">CI&#x2F;CD</a>。</p><p>话不多说，我在下面简单介绍一下GitHub Actions，然后总结了一些使用技巧。</p><h2 id="什么是GitHub-Actions"><a href="#什么是GitHub-Actions" class="headerlink" title="什么是GitHub Actions"></a>什么是GitHub Actions</h2><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2023/12/26/658a8a208cbe9.jpg" alt="等待更新......" style="width:360px;"/></div><span class="image-caption">等待更新......</span></div><h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><div class="img-wrap"><div class="img-bg"><img class="img" src="https://www.freeimg.cn/i/2023/12/26/658a8a208cbe9.jpg" alt="等待更新......" style="width:360px;"/></div><span class="image-caption">等待更新......</span></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;作为程序员，大家可能都知道GitHub，也都知道它能方便我们管理项目源码。可是大家知道GitHub Actions并且都会使用吗？我一开始也</summary>
      
    
    
    
    <category term="技术分享" scheme="https://blog.xxfer.cn/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="自主开发" scheme="https://blog.xxfer.cn/tags/%E8%87%AA%E4%B8%BB%E5%BC%80%E5%8F%91/"/>
    
    <category term="CI/CD" scheme="https://blog.xxfer.cn/tags/CI-CD/"/>
    
    <category term="工作流" scheme="https://blog.xxfer.cn/tags/%E5%B7%A5%E4%BD%9C%E6%B5%81/"/>
    
    <category term="Github" scheme="https://blog.xxfer.cn/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>Cookie、Session、Token的区别？如何进行用户校验，保持用户登录状态？</title>
    <link href="https://blog.xxfer.cn/posts/c98645fd.html"/>
    <id>https://blog.xxfer.cn/posts/c98645fd.html</id>
    <published>2023-12-10T12:10:08.000Z</published>
    <updated>2023-12-21T17:44:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>现代社会离不开网络，购物等都会选择在 Web 中进行。而且我们会发现只要登录以后，很长一段时间就不需要重新登录了，今天有空将Web中部分校验机制的知识做一个梳理（本人彩笔，如果有总结的不对的，勿喷，并请大佬评论指正，我会及时修改）。</p><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p>在 Cookie 之前，先有HTTP。1991 年 HTTP 0.9 诞生了，当时只是为了满足大家浏览 web 文档的要求 ，所以只有 GET 请求，浏览完就走了，两个连接之间是没有任何联系的，所以说HTTP是一种无状态的协议，因为它诞生之初就没有这个需求。</p><h4 id="HTTP-协议"><a href="#HTTP-协议" class="headerlink" title="HTTP 协议"></a>HTTP 协议</h4><p>一种无状态的协议：对于事务处理没有记忆能力，每次客户端和服务端会话完成时，服务端不会保存任何会话信息。每个请求都是完全独立的，服务端无法确认当前访问者的身份信息，无法分辨上一次的请求发送者和这一次的发送者是不是同一个人。所以服务器与浏览器为了进行会话跟踪（知道是谁在访问我），就必须主动的去维护一个状态，这个状态用于告知服务端前后两个请求是否来自同一浏览器。而这个状态需要通过 cookie 或者 session 去实现。</p><p>比如我们现在日常的网上购物，需要记录用户的购物车记录，就需要有一个机制记录每个连接的关系，来方便我们了解加入购物车的商品到底属于谁。也就是我们所说的交互式 Web （不光可以浏览，还可以登录，发评论，购物等用户操作的行为）。</p><h4 id="Cookie-一般工作机制"><a href="#Cookie-一般工作机制" class="headerlink" title="Cookie 一般工作机制"></a>Cookie 一般工作机制</h4><p><img src="https://www.freeimg.cn/i/2023/12/21/6583d87e6da31.png" alt="Cookie一般工作机制"></p><h4 id="以购物车为例"><a href="#以购物车为例" class="headerlink" title="以购物车为例"></a>以购物车为例</h4><p><img src="https://www.freeimg.cn/i/2023/12/21/6583d8acc03e2.png" alt="Cookie购物车工作机制"></p><ol><li><p>cookie 存储在客户端： cookie 是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。</p></li><li><p>cookie 是不可跨域的： 每个 cookie 都会绑定单一的域名，无法在别的域名下获取使用，一级域名和二级域名之间是允许共享使用的（靠的是 domain）。</p></li></ol><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>随着购物车内的商品越来越多，每次请求的 cookie 也越来越大，这对每个请求来说是一个很大的负担，我们只是想将一个商品加入购买车，为何要将历史的商品记录也一起返回给 server ？购物车信息其实已经记录在 server 了，浏览器这样的操作岂不是多此一举？如何改进呢？</p><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><p>由于用户的购物车信息都会保存在 Server 中，所以在 Cookie 里只要保存能识别用户身份的信息，知道是谁发起了加入购物车操作即可，这样每次请求后只要在 Cookie 里带上用户的身份信息，请求体里也只要带上本次加入购物车的商品 id，大大减少了 cookie 的体积大小，我们把这种能识别哪个请求由哪个用户发起的机制称为 Session（会话机制），生成的能识别用户身份信息的字符串称为 sessionId。</p><h4 id="工作机制"><a href="#工作机制" class="headerlink" title="工作机制"></a>工作机制</h4><p><img src="https://www.freeimg.cn/i/2023/12/21/6583dbb7cc9b5.png" alt="session购物工作机制.png"></p><h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><p>看起来通过 cookie + session 的方式是解决了问题， 但是我们忽略了一个问题，上述情况能正常工作是因为我们假设 server 是单机工作的，但实际在生产上，为了保障高可用，一般服务器至少需要两台机器，通过负载均衡的方式来决定到底请求该打到哪台机器上。</p><p><img src="https://www.freeimg.cn/i/2023/12/21/6583dc882255a.png" alt="session负载均衡工作机制.png"></p><p>假设登录请求打到了 A 机器，A 机器生成了 session 并在 cookie 里添加 sessionId 返回给了浏览器，那么问题来了：下次添加购物车时如果请求打到了 B 或者 C，由于 session 是在 A 机器生成的，此时的 B,C 是找不到 session 的，那么就会发生无法添加购物车的错误，就得重新登录了，此时请问该怎么办。</p><h4 id="balance"><a href="#balance" class="headerlink" title="balance"></a>balance</h4><ol><li><p>session 复制</p><p>A 生成 session 后复制到 B, C，这样每台机器都有一份 session，无论添加购物车的请求打到哪台机器，由于 session 都能找到，故不会有问题</p></li><li><p>session 粘连</p><p>这种方式是让每个客户端请求只打到固定的一台机器上，比如浏览器登录请求打到 A 机器后，后续所有的添加购物车请求也都打到 A 机器上，Nginx 的 sticky 模块可以支持这种方式，支持按 ip 或 cookie 粘连等等，如按 ip 粘连方式如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">upstream tomcats &#123;</span><br><span class="line">　　ip_hash;</span><br><span class="line">　　server 10.1.1.107:88;</span><br><span class="line">　　server 10.1.1.132:80;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>session 共享</p><p>这种方式也是目前各大公司普遍采用的方案，将 session 保存在 redis，memcached 等中间件中，请求到来时，各个机器去这些中间件取一下 session 即可。</p></li></ol><p><img src="https://www.freeimg.cn/i/2023/12/21/6583df21665cc.png" alt="session 共享.png"></p><h2 id="Token"><a href="#Token" class="headerlink" title="Token"></a>Token</h2><p>通过上文分析我们知道通过在服务端共享 session 的方式可以完成用户的身份定位，但是不难发现也有一个小小的瑕疵：搞个校验机制我还得搭个 redis 集群？大厂确实 redis 用得比较普遍，但对于小厂来说可能它的业务量还未达到用 redis 的程度，所以有没有其他不用 server 存储 session 的用户身份校验机制呢，就是token。</p><p>首先请求方输入自己的用户名，密码，然后 server 据此生成 token，客户端拿到 token 后会保存到本地，之后向 server 请求时在请求头带上此 token 即可。</p><p><img src="https://www.freeimg.cn/i/2023/12/21/6583deac8777c.png" alt="token工作机制.png"></p><ol><li><p>token 只存储在浏览器中，服务端却没有存储，这样的话我随便搞个 token 传给 server 也行？</p><p>server 会有一套校验机制，校验这个 token 是否合法。</p></li><li><p>怎么不像 session 那样根据 sessionId 找到 userid 呢，这样的话怎么知道是哪个用户？</p><p>token 本身携带 uid 信息。</p></li></ol><h4 id="HTTPS-签名机制校验-JWT"><a href="#HTTPS-签名机制校验-JWT" class="headerlink" title="HTTPS 签名机制校验 (JWT)"></a>HTTPS 签名机制校验 (JWT)</h4><p><img src="https://www.freeimg.cn/i/2023/12/21/6583dff0e5250.png" alt="JWT请求.png"></p><ol><li>header：指定了签名算法</li><li>payload：可以指定用户 id，过期时间等非敏感数据</li><li>Signature: 签名，server 根据 header 知道它该用哪种签名算法，再用密钥根据此签名算法对 head + payload 生成签名，这样一个 token 就生成了。</li></ol><p>当 server 收到浏览器传过来的 token 时，它会首先取出 token 中的 header + payload，根据密钥生成签名，然后再与 token 中的签名比对，如果成功则说明签名是合法的，即 token 是合法的。而且你会发现 payload 中存有我们的 userId，所以拿到 token 后直接在 payload 中就可获取 userid，避免了像 session 那样要从 redis 去取的开销。</p><div class="note warning simple"><p>header, payload 实际上是以 base64 的形式存在的，文中为了描述方便，省去了这一步。</p></div><p>只要 server 保证密钥不泄露，那么生成的 token 就是安全的，因为如果伪造 token 的话在签名验证环节是无法通过的，就此即可判定 token 非法。<br>可以看到通过这种方式有效地避免了 token 必须保存在 server 的弊端，实现了分布式存储，不过需要注意的是，token 一旦由 server 生成，它就是有效的，直到过期，无法让 token 失效，除非在 server 为 token 设立一个黑名单，在校验 token 前先过一遍此黑名单，如果在黑名单里则此 token 失效，但一旦这样做的话，那就意味着黑名单就必须保存在 server，这又回到了 session 的模式，那直接用 session 不香吗。所以一般的做法是当客户端登出要让 token 失效时，直接在本地移除 token 即可，下次登录重新生成 token 就好。<br>另外需要注意的是 token 一般是放在 header 的 Authorization 自定义头里，不是放在 Cookie 里的，这主要是为了解决跨域不能共享 Cookie 的问题。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>session 和 token 本质上是没有区别的，都是对用户身份的认证机制，只是他们实现的校验机制不一样而已（一个保存在 server，通过在 redis 等中间件获取来校验，一个保存在 client，通过签名校验的方式来校验），多数场景上使用 session 会更合理，但如果在单点登录，一次性命令认证上使用 token 会更合适，最好在不同的业务场景中合理选型，才能达到事半功倍的效果。<br>其实我们把 cookie 和 token 比较本身就不合理，一个是存储方式，一个是验证方式，正确的比较应该是 session vs token。其实cookie与session相比较也是不合理的，我们只要能够理解它们各自之间的联系和工作机制即可。<br>上面只是简单的介绍了一下三者，具体实现过程中还会涉及到认证、授权、凭证以及加密等知识。如何能够让校验机制花费较小的性能损耗，又能保证安全是我们的追求。</p><h2 id="参考学习资料"><a href="#参考学习资料" class="headerlink" title="参考学习资料"></a>参考学习资料</h2><p><a href="https://zhuanlan.zhihu.com/p/625995458">一文讲透Token与Cookie、Session的区别 - 知乎</a></p><p><a href="https://zhuanlan.zhihu.com/p/164696755">还分不清 Cookie、Session、Token、JWT？</a></p><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://www.bilibili.com/video/BV1ob4y1Y7Ep/?spm_id_from=333.999.0.0&vd_source=91a233ea2e45cea087336c119461d12b">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://www.freeimg.cn/i/2023/12/30/658fb2cbc152c.png)">          <i class="anzhiyufont anzhiyu-icon-link" style="display: none"></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">Cookie、Session、Token究竟区别在哪？</div>            <div class="tag-link-sitename">技术蛋老师</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;现代社会离不开网络，购物等都会选择在 Web 中进行。而且我们会发现只要登录以后，很长一段时间就不需要重新登录了，今天有空将</summary>
      
    
    
    
    <category term="技术分享" scheme="https://blog.xxfer.cn/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="网络安全" scheme="https://blog.xxfer.cn/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    <category term="Web" scheme="https://blog.xxfer.cn/tags/Web/"/>
    
    <category term="Token" scheme="https://blog.xxfer.cn/tags/Token/"/>
    
    <category term="Cookie" scheme="https://blog.xxfer.cn/tags/Cookie/"/>
    
    <category term="Session" scheme="https://blog.xxfer.cn/tags/Session/"/>
    
  </entry>
  
</feed>
